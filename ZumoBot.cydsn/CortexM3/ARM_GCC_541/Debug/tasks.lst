ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  23              		.type	prvTaskIsTaskSuspended, %function
  24              	prvTaskIsTaskSuspended:
  25              	.LFB80:
  26              		.file 1 "..\\FreeRTOS\\Source\\tasks.c"
   1:..\FreeRTOS\Source/tasks.c **** /*
   2:..\FreeRTOS\Source/tasks.c ****  * FreeRTOS Kernel V10.0.1
   3:..\FreeRTOS\Source/tasks.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\FreeRTOS\Source/tasks.c ****  *
   5:..\FreeRTOS\Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\FreeRTOS\Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\FreeRTOS\Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:..\FreeRTOS\Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\FreeRTOS\Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\FreeRTOS\Source/tasks.c ****  * subject to the following conditions:
  11:..\FreeRTOS\Source/tasks.c ****  *
  12:..\FreeRTOS\Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:..\FreeRTOS\Source/tasks.c ****  * copies or substantial portions of the Software.
  14:..\FreeRTOS\Source/tasks.c ****  *
  15:..\FreeRTOS\Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\FreeRTOS\Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\FreeRTOS\Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\FreeRTOS\Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\FreeRTOS\Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\FreeRTOS\Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\FreeRTOS\Source/tasks.c ****  *
  22:..\FreeRTOS\Source/tasks.c ****  * http://www.FreeRTOS.org
  23:..\FreeRTOS\Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:..\FreeRTOS\Source/tasks.c ****  *
  25:..\FreeRTOS\Source/tasks.c ****  * 1 tab == 4 spaces!
  26:..\FreeRTOS\Source/tasks.c ****  */
  27:..\FreeRTOS\Source/tasks.c **** 
  28:..\FreeRTOS\Source/tasks.c **** /* Standard includes. */
  29:..\FreeRTOS\Source/tasks.c **** #include <stdlib.h>
  30:..\FreeRTOS\Source/tasks.c **** #include <string.h>
  31:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 2


  32:..\FreeRTOS\Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:..\FreeRTOS\Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:..\FreeRTOS\Source/tasks.c **** task.h is included from an application file. */
  35:..\FreeRTOS\Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:..\FreeRTOS\Source/tasks.c **** 
  37:..\FreeRTOS\Source/tasks.c **** /* FreeRTOS includes. */
  38:..\FreeRTOS\Source/tasks.c **** #include "FreeRTOS.h"
  39:..\FreeRTOS\Source/tasks.c **** #include "task.h"
  40:..\FreeRTOS\Source/tasks.c **** #include "timers.h"
  41:..\FreeRTOS\Source/tasks.c **** #include "stack_macros.h"
  42:..\FreeRTOS\Source/tasks.c **** 
  43:..\FreeRTOS\Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  44:..\FreeRTOS\Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  45:..\FreeRTOS\Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  46:..\FreeRTOS\Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  47:..\FreeRTOS\Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  48:..\FreeRTOS\Source/tasks.c **** 
  49:..\FreeRTOS\Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:..\FreeRTOS\Source/tasks.c **** functions but without including stdio.h here. */
  51:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:..\FreeRTOS\Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:..\FreeRTOS\Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:..\FreeRTOS\Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:..\FreeRTOS\Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:..\FreeRTOS\Source/tasks.c **** 	#include <stdio.h>
  57:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:..\FreeRTOS\Source/tasks.c **** 
  59:..\FreeRTOS\Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:..\FreeRTOS\Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:..\FreeRTOS\Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:..\FreeRTOS\Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:..\FreeRTOS\Source/tasks.c **** #else
  64:..\FreeRTOS\Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:..\FreeRTOS\Source/tasks.c **** #endif
  66:..\FreeRTOS\Source/tasks.c **** 
  67:..\FreeRTOS\Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:..\FreeRTOS\Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:..\FreeRTOS\Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:..\FreeRTOS\Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:..\FreeRTOS\Source/tasks.c **** 
  72:..\FreeRTOS\Source/tasks.c **** /*
  73:..\FreeRTOS\Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:..\FreeRTOS\Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:..\FreeRTOS\Source/tasks.c ****  */
  76:..\FreeRTOS\Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:..\FreeRTOS\Source/tasks.c **** 
  78:..\FreeRTOS\Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  79:..\FreeRTOS\Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  80:..\FreeRTOS\Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  81:..\FreeRTOS\Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  82:..\FreeRTOS\Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  83:..\FreeRTOS\Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  84:..\FreeRTOS\Source/tasks.c **** settings allow a task to be created using either statically or dynamically
  85:..\FreeRTOS\Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  86:..\FreeRTOS\Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  87:..\FreeRTOS\Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
  88:..\FreeRTOS\Source/tasks.c **** made to free the RAM that was allocated statically.
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 3


  89:..\FreeRTOS\Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
  90:..\FreeRTOS\Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  91:..\FreeRTOS\Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
  92:..\FreeRTOS\Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  93:..\FreeRTOS\Source/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  94:..\FreeRTOS\Source/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  95:..\FreeRTOS\Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  96:..\FreeRTOS\Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  97:..\FreeRTOS\Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  98:..\FreeRTOS\Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  99:..\FreeRTOS\Source/tasks.c **** 
 100:..\FreeRTOS\Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 101:..\FreeRTOS\Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
 102:..\FreeRTOS\Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 103:..\FreeRTOS\Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 104:..\FreeRTOS\Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 105:..\FreeRTOS\Source/tasks.c **** #else
 106:..\FreeRTOS\Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 107:..\FreeRTOS\Source/tasks.c **** #endif
 108:..\FreeRTOS\Source/tasks.c **** 
 109:..\FreeRTOS\Source/tasks.c **** /*
 110:..\FreeRTOS\Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 111:..\FreeRTOS\Source/tasks.c ****  */
 112:..\FreeRTOS\Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
 113:..\FreeRTOS\Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:..\FreeRTOS\Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:..\FreeRTOS\Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:..\FreeRTOS\Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:..\FreeRTOS\Source/tasks.c **** 
 118:..\FreeRTOS\Source/tasks.c **** /*
 119:..\FreeRTOS\Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:..\FreeRTOS\Source/tasks.c ****  * global, rather than file scope.
 121:..\FreeRTOS\Source/tasks.c ****  */
 122:..\FreeRTOS\Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:..\FreeRTOS\Source/tasks.c **** 	#define static
 124:..\FreeRTOS\Source/tasks.c **** #endif
 125:..\FreeRTOS\Source/tasks.c **** 
 126:..\FreeRTOS\Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:..\FreeRTOS\Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:..\FreeRTOS\Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:..\FreeRTOS\Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:..\FreeRTOS\Source/tasks.c **** #endif
 131:..\FreeRTOS\Source/tasks.c **** 
 132:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:..\FreeRTOS\Source/tasks.c **** 
 134:..\FreeRTOS\Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:..\FreeRTOS\Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:..\FreeRTOS\Source/tasks.c **** 	microcontroller architecture. */
 137:..\FreeRTOS\Source/tasks.c **** 
 138:..\FreeRTOS\Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:..\FreeRTOS\Source/tasks.c **** 	state task. */
 140:..\FreeRTOS\Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:..\FreeRTOS\Source/tasks.c **** 	{																									\
 142:..\FreeRTOS\Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:..\FreeRTOS\Source/tasks.c **** 		{																								\
 144:..\FreeRTOS\Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 145:..\FreeRTOS\Source/tasks.c **** 		}																								\
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 4


 146:..\FreeRTOS\Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 147:..\FreeRTOS\Source/tasks.c **** 
 148:..\FreeRTOS\Source/tasks.c **** 	/*-----------------------------------------------------------*/
 149:..\FreeRTOS\Source/tasks.c **** 
 150:..\FreeRTOS\Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:..\FreeRTOS\Source/tasks.c **** 	{																									\
 152:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:..\FreeRTOS\Source/tasks.c **** 																										\
 154:..\FreeRTOS\Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:..\FreeRTOS\Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:..\FreeRTOS\Source/tasks.c **** 		{																								\
 157:..\FreeRTOS\Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:..\FreeRTOS\Source/tasks.c **** 			--uxTopPriority;																			\
 159:..\FreeRTOS\Source/tasks.c **** 		}																								\
 160:..\FreeRTOS\Source/tasks.c **** 																										\
 161:..\FreeRTOS\Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:..\FreeRTOS\Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:..\FreeRTOS\Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:..\FreeRTOS\Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:..\FreeRTOS\Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:..\FreeRTOS\Source/tasks.c **** 
 167:..\FreeRTOS\Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:..\FreeRTOS\Source/tasks.c **** 
 169:..\FreeRTOS\Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:..\FreeRTOS\Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:..\FreeRTOS\Source/tasks.c **** 	being used. */
 172:..\FreeRTOS\Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:..\FreeRTOS\Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:..\FreeRTOS\Source/tasks.c **** 
 175:..\FreeRTOS\Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:..\FreeRTOS\Source/tasks.c **** 
 177:..\FreeRTOS\Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:..\FreeRTOS\Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:..\FreeRTOS\Source/tasks.c **** 	architecture being used. */
 180:..\FreeRTOS\Source/tasks.c **** 
 181:..\FreeRTOS\Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:..\FreeRTOS\Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:..\FreeRTOS\Source/tasks.c **** 
 184:..\FreeRTOS\Source/tasks.c **** 	/*-----------------------------------------------------------*/
 185:..\FreeRTOS\Source/tasks.c **** 
 186:..\FreeRTOS\Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:..\FreeRTOS\Source/tasks.c **** 	{																								\
 188:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:..\FreeRTOS\Source/tasks.c **** 																									\
 190:..\FreeRTOS\Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:..\FreeRTOS\Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:..\FreeRTOS\Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:..\FreeRTOS\Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:..\FreeRTOS\Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:..\FreeRTOS\Source/tasks.c **** 
 196:..\FreeRTOS\Source/tasks.c **** 	/*-----------------------------------------------------------*/
 197:..\FreeRTOS\Source/tasks.c **** 
 198:..\FreeRTOS\Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:..\FreeRTOS\Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:..\FreeRTOS\Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:..\FreeRTOS\Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 202:..\FreeRTOS\Source/tasks.c **** 	{																									\
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 5


 203:..\FreeRTOS\Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 204:..\FreeRTOS\Source/tasks.c **** 		{																								\
 205:..\FreeRTOS\Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 206:..\FreeRTOS\Source/tasks.c **** 		}																								\
 207:..\FreeRTOS\Source/tasks.c **** 	}
 208:..\FreeRTOS\Source/tasks.c **** 
 209:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:..\FreeRTOS\Source/tasks.c **** 
 211:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 212:..\FreeRTOS\Source/tasks.c **** 
 213:..\FreeRTOS\Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:..\FreeRTOS\Source/tasks.c **** count overflows. */
 215:..\FreeRTOS\Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:..\FreeRTOS\Source/tasks.c **** {																									\
 217:..\FreeRTOS\Source/tasks.c **** 	List_t *pxTemp;																					\
 218:..\FreeRTOS\Source/tasks.c **** 																									\
 219:..\FreeRTOS\Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:..\FreeRTOS\Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:..\FreeRTOS\Source/tasks.c **** 																									\
 222:..\FreeRTOS\Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:..\FreeRTOS\Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:..\FreeRTOS\Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:..\FreeRTOS\Source/tasks.c **** 	xNumOfOverflows++;																				\
 226:..\FreeRTOS\Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:..\FreeRTOS\Source/tasks.c **** }
 228:..\FreeRTOS\Source/tasks.c **** 
 229:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 230:..\FreeRTOS\Source/tasks.c **** 
 231:..\FreeRTOS\Source/tasks.c **** /*
 232:..\FreeRTOS\Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:..\FreeRTOS\Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:..\FreeRTOS\Source/tasks.c ****  */
 235:..\FreeRTOS\Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:..\FreeRTOS\Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:..\FreeRTOS\Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:..\FreeRTOS\Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:..\FreeRTOS\Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 241:..\FreeRTOS\Source/tasks.c **** 
 242:..\FreeRTOS\Source/tasks.c **** /*
 243:..\FreeRTOS\Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:..\FreeRTOS\Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:..\FreeRTOS\Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:..\FreeRTOS\Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:..\FreeRTOS\Source/tasks.c ****  */
 248:..\FreeRTOS\Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 249:..\FreeRTOS\Source/tasks.c **** 
 250:..\FreeRTOS\Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:..\FreeRTOS\Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:..\FreeRTOS\Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:..\FreeRTOS\Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:..\FreeRTOS\Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:..\FreeRTOS\Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:..\FreeRTOS\Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:..\FreeRTOS\Source/tasks.c **** to its original value when it is released. */
 258:..\FreeRTOS\Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 259:..\FreeRTOS\Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 6


 260:..\FreeRTOS\Source/tasks.c **** #else
 261:..\FreeRTOS\Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:..\FreeRTOS\Source/tasks.c **** #endif
 263:..\FreeRTOS\Source/tasks.c **** 
 264:..\FreeRTOS\Source/tasks.c **** /*
 265:..\FreeRTOS\Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:..\FreeRTOS\Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:..\FreeRTOS\Source/tasks.c ****  * (the task's run time environment, including register values)
 268:..\FreeRTOS\Source/tasks.c ****  */
 269:..\FreeRTOS\Source/tasks.c **** typedef struct tskTaskControlBlock
 270:..\FreeRTOS\Source/tasks.c **** {
 271:..\FreeRTOS\Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:..\FreeRTOS\Source/tasks.c **** 
 273:..\FreeRTOS\Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:..\FreeRTOS\Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:..\FreeRTOS\Source/tasks.c **** 	#endif
 276:..\FreeRTOS\Source/tasks.c **** 
 277:..\FreeRTOS\Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:..\FreeRTOS\Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:..\FreeRTOS\Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:..\FreeRTOS\Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:..\FreeRTOS\Source/tasks.c **** 
 283:..\FreeRTOS\Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:..\FreeRTOS\Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:..\FreeRTOS\Source/tasks.c **** 	#endif
 286:..\FreeRTOS\Source/tasks.c **** 
 287:..\FreeRTOS\Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:..\FreeRTOS\Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:..\FreeRTOS\Source/tasks.c **** 	#endif
 290:..\FreeRTOS\Source/tasks.c **** 
 291:..\FreeRTOS\Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:..\FreeRTOS\Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:..\FreeRTOS\Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:..\FreeRTOS\Source/tasks.c **** 	#endif
 295:..\FreeRTOS\Source/tasks.c **** 
 296:..\FreeRTOS\Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:..\FreeRTOS\Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:..\FreeRTOS\Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:..\FreeRTOS\Source/tasks.c **** 	#endif
 300:..\FreeRTOS\Source/tasks.c **** 
 301:..\FreeRTOS\Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:..\FreeRTOS\Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:..\FreeRTOS\Source/tasks.c **** 	#endif
 304:..\FreeRTOS\Source/tasks.c **** 
 305:..\FreeRTOS\Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:..\FreeRTOS\Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:..\FreeRTOS\Source/tasks.c **** 	#endif
 308:..\FreeRTOS\Source/tasks.c **** 
 309:..\FreeRTOS\Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:..\FreeRTOS\Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:..\FreeRTOS\Source/tasks.c **** 	#endif
 312:..\FreeRTOS\Source/tasks.c **** 
 313:..\FreeRTOS\Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:..\FreeRTOS\Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:..\FreeRTOS\Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 316:..\FreeRTOS\Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 7


 317:..\FreeRTOS\Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 318:..\FreeRTOS\Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:..\FreeRTOS\Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 320:..\FreeRTOS\Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:..\FreeRTOS\Source/tasks.c **** 		struct	_reent xNewLib_reent;
 322:..\FreeRTOS\Source/tasks.c **** 	#endif
 323:..\FreeRTOS\Source/tasks.c **** 
 324:..\FreeRTOS\Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:..\FreeRTOS\Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:..\FreeRTOS\Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:..\FreeRTOS\Source/tasks.c **** 	#endif
 328:..\FreeRTOS\Source/tasks.c **** 
 329:..\FreeRTOS\Source/tasks.c **** 	/* See the comments above the definition of
 330:..\FreeRTOS\Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:..\FreeRTOS\Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for
 332:..\FreeRTOS\Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:..\FreeRTOS\Source/tasks.c **** 	#endif
 334:..\FreeRTOS\Source/tasks.c **** 
 335:..\FreeRTOS\Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:..\FreeRTOS\Source/tasks.c **** 		uint8_t ucDelayAborted;
 337:..\FreeRTOS\Source/tasks.c **** 	#endif
 338:..\FreeRTOS\Source/tasks.c **** 
 339:..\FreeRTOS\Source/tasks.c **** } tskTCB;
 340:..\FreeRTOS\Source/tasks.c **** 
 341:..\FreeRTOS\Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 342:..\FreeRTOS\Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 343:..\FreeRTOS\Source/tasks.c **** typedef tskTCB TCB_t;
 344:..\FreeRTOS\Source/tasks.c **** 
 345:..\FreeRTOS\Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 346:..\FreeRTOS\Source/tasks.c **** which static variables must be declared volatile. */
 347:..\FreeRTOS\Source/tasks.c **** 
 348:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 349:..\FreeRTOS\Source/tasks.c **** 
 350:..\FreeRTOS\Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 351:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 352:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 353:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 354:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 355:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 356:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 357:..\FreeRTOS\Source/tasks.c **** 
 358:..\FreeRTOS\Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 359:..\FreeRTOS\Source/tasks.c **** 
 360:..\FreeRTOS\Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 361:..\FreeRTOS\Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 362:..\FreeRTOS\Source/tasks.c **** 
 363:..\FreeRTOS\Source/tasks.c **** #endif
 364:..\FreeRTOS\Source/tasks.c **** 
 365:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 366:..\FreeRTOS\Source/tasks.c **** 
 367:..\FreeRTOS\Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 368:..\FreeRTOS\Source/tasks.c **** 
 369:..\FreeRTOS\Source/tasks.c **** #endif
 370:..\FreeRTOS\Source/tasks.c **** 
 371:..\FreeRTOS\Source/tasks.c **** /* Other file private variables. --------------------------------*/
 372:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 373:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 8


 374:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 375:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 376:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 377:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 378:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 379:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 380:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 381:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 382:..\FreeRTOS\Source/tasks.c **** 
 383:..\FreeRTOS\Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 384:..\FreeRTOS\Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 385:..\FreeRTOS\Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 386:..\FreeRTOS\Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 387:..\FreeRTOS\Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 388:..\FreeRTOS\Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 389:..\FreeRTOS\Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 390:..\FreeRTOS\Source/tasks.c **** accessed from a critical section. */
 391:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 392:..\FreeRTOS\Source/tasks.c **** 
 393:..\FreeRTOS\Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 394:..\FreeRTOS\Source/tasks.c **** 
 395:..\FreeRTOS\Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:..\FreeRTOS\Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:..\FreeRTOS\Source/tasks.c **** 
 398:..\FreeRTOS\Source/tasks.c **** #endif
 399:..\FreeRTOS\Source/tasks.c **** 
 400:..\FreeRTOS\Source/tasks.c **** /*lint -restore */
 401:..\FreeRTOS\Source/tasks.c **** 
 402:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 403:..\FreeRTOS\Source/tasks.c **** 
 404:..\FreeRTOS\Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:..\FreeRTOS\Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:..\FreeRTOS\Source/tasks.c **** 
 407:..\FreeRTOS\Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:..\FreeRTOS\Source/tasks.c **** 
 409:..\FreeRTOS\Source/tasks.c **** #endif
 410:..\FreeRTOS\Source/tasks.c **** 
 411:..\FreeRTOS\Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:..\FreeRTOS\Source/tasks.c **** 
 413:..\FreeRTOS\Source/tasks.c **** 	extern void vApplicationTickHook( void );
 414:..\FreeRTOS\Source/tasks.c **** 
 415:..\FreeRTOS\Source/tasks.c **** #endif
 416:..\FreeRTOS\Source/tasks.c **** 
 417:..\FreeRTOS\Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:..\FreeRTOS\Source/tasks.c **** 
 419:..\FreeRTOS\Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:..\FreeRTOS\Source/tasks.c **** 
 421:..\FreeRTOS\Source/tasks.c **** #endif
 422:..\FreeRTOS\Source/tasks.c **** 
 423:..\FreeRTOS\Source/tasks.c **** /* File private functions. --------------------------------*/
 424:..\FreeRTOS\Source/tasks.c **** 
 425:..\FreeRTOS\Source/tasks.c **** /**
 426:..\FreeRTOS\Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:..\FreeRTOS\Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:..\FreeRTOS\Source/tasks.c ****  * is in any other state.
 429:..\FreeRTOS\Source/tasks.c ****  */
 430:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 9


 431:..\FreeRTOS\Source/tasks.c **** 
 432:..\FreeRTOS\Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:..\FreeRTOS\Source/tasks.c **** 
 434:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:..\FreeRTOS\Source/tasks.c **** 
 436:..\FreeRTOS\Source/tasks.c **** /*
 437:..\FreeRTOS\Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:..\FreeRTOS\Source/tasks.c ****  * automatically upon the creation of the first task.
 439:..\FreeRTOS\Source/tasks.c ****  */
 440:..\FreeRTOS\Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:..\FreeRTOS\Source/tasks.c **** 
 442:..\FreeRTOS\Source/tasks.c **** /*
 443:..\FreeRTOS\Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:..\FreeRTOS\Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:..\FreeRTOS\Source/tasks.c ****  * creation of the first user task.
 446:..\FreeRTOS\Source/tasks.c ****  *
 447:..\FreeRTOS\Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:..\FreeRTOS\Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:..\FreeRTOS\Source/tasks.c ****  *
 450:..\FreeRTOS\Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:..\FreeRTOS\Source/tasks.c ****  *
 452:..\FreeRTOS\Source/tasks.c ****  */
 453:..\FreeRTOS\Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:..\FreeRTOS\Source/tasks.c **** 
 455:..\FreeRTOS\Source/tasks.c **** /*
 456:..\FreeRTOS\Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:..\FreeRTOS\Source/tasks.c ****  * including the stack pointed to by the TCB.
 458:..\FreeRTOS\Source/tasks.c ****  *
 459:..\FreeRTOS\Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:..\FreeRTOS\Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:..\FreeRTOS\Source/tasks.c ****  */
 462:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:..\FreeRTOS\Source/tasks.c **** 
 464:..\FreeRTOS\Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:..\FreeRTOS\Source/tasks.c **** 
 466:..\FreeRTOS\Source/tasks.c **** #endif
 467:..\FreeRTOS\Source/tasks.c **** 
 468:..\FreeRTOS\Source/tasks.c **** /*
 469:..\FreeRTOS\Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:..\FreeRTOS\Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:..\FreeRTOS\Source/tasks.c ****  * and its TCB deleted.
 472:..\FreeRTOS\Source/tasks.c ****  */
 473:..\FreeRTOS\Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:..\FreeRTOS\Source/tasks.c **** 
 475:..\FreeRTOS\Source/tasks.c **** /*
 476:..\FreeRTOS\Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:..\FreeRTOS\Source/tasks.c ****  * either the current or the overflow delayed task list.
 478:..\FreeRTOS\Source/tasks.c ****  */
 479:..\FreeRTOS\Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:..\FreeRTOS\Source/tasks.c **** 
 481:..\FreeRTOS\Source/tasks.c **** /*
 482:..\FreeRTOS\Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:..\FreeRTOS\Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:..\FreeRTOS\Source/tasks.c ****  * a suspended list, etc.).
 485:..\FreeRTOS\Source/tasks.c ****  *
 486:..\FreeRTOS\Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:..\FreeRTOS\Source/tasks.c ****  * NORMAL APPLICATION CODE.
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 10


 488:..\FreeRTOS\Source/tasks.c ****  */
 489:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:..\FreeRTOS\Source/tasks.c **** 
 491:..\FreeRTOS\Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:..\FreeRTOS\Source/tasks.c **** 
 493:..\FreeRTOS\Source/tasks.c **** #endif
 494:..\FreeRTOS\Source/tasks.c **** 
 495:..\FreeRTOS\Source/tasks.c **** /*
 496:..\FreeRTOS\Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:..\FreeRTOS\Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:..\FreeRTOS\Source/tasks.c ****  */
 499:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:..\FreeRTOS\Source/tasks.c **** 
 501:..\FreeRTOS\Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:..\FreeRTOS\Source/tasks.c **** 
 503:..\FreeRTOS\Source/tasks.c **** #endif
 504:..\FreeRTOS\Source/tasks.c **** 
 505:..\FreeRTOS\Source/tasks.c **** /*
 506:..\FreeRTOS\Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:..\FreeRTOS\Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:..\FreeRTOS\Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:..\FreeRTOS\Source/tasks.c ****  */
 510:..\FreeRTOS\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 511:..\FreeRTOS\Source/tasks.c **** 
 512:..\FreeRTOS\Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 513:..\FreeRTOS\Source/tasks.c **** 
 514:..\FreeRTOS\Source/tasks.c **** #endif
 515:..\FreeRTOS\Source/tasks.c **** 
 516:..\FreeRTOS\Source/tasks.c **** /*
 517:..\FreeRTOS\Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:..\FreeRTOS\Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:..\FreeRTOS\Source/tasks.c ****  *
 520:..\FreeRTOS\Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:..\FreeRTOS\Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:..\FreeRTOS\Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:..\FreeRTOS\Source/tasks.c ****  * set to a value other than 1.
 524:..\FreeRTOS\Source/tasks.c ****  */
 525:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:..\FreeRTOS\Source/tasks.c **** 
 527:..\FreeRTOS\Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:..\FreeRTOS\Source/tasks.c **** 
 529:..\FreeRTOS\Source/tasks.c **** #endif
 530:..\FreeRTOS\Source/tasks.c **** 
 531:..\FreeRTOS\Source/tasks.c **** /*
 532:..\FreeRTOS\Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:..\FreeRTOS\Source/tasks.c ****  * will exit the Blocked state.
 534:..\FreeRTOS\Source/tasks.c ****  */
 535:..\FreeRTOS\Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:..\FreeRTOS\Source/tasks.c **** 
 537:..\FreeRTOS\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:..\FreeRTOS\Source/tasks.c **** 
 539:..\FreeRTOS\Source/tasks.c **** 	/*
 540:..\FreeRTOS\Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:..\FreeRTOS\Source/tasks.c **** 	 * human readable tables of task information.
 542:..\FreeRTOS\Source/tasks.c **** 	 */
 543:..\FreeRTOS\Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 11


 545:..\FreeRTOS\Source/tasks.c **** #endif
 546:..\FreeRTOS\Source/tasks.c **** 
 547:..\FreeRTOS\Source/tasks.c **** /*
 548:..\FreeRTOS\Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:..\FreeRTOS\Source/tasks.c ****  * dynamically to fill in the structure's members.
 550:..\FreeRTOS\Source/tasks.c ****  */
 551:..\FreeRTOS\Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:..\FreeRTOS\Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:..\FreeRTOS\Source/tasks.c **** 									const uint32_t ulStackDepth,
 554:..\FreeRTOS\Source/tasks.c **** 									void * const pvParameters,
 555:..\FreeRTOS\Source/tasks.c **** 									UBaseType_t uxPriority,
 556:..\FreeRTOS\Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:..\FreeRTOS\Source/tasks.c **** 									TCB_t *pxNewTCB,
 558:..\FreeRTOS\Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:..\FreeRTOS\Source/tasks.c **** 
 560:..\FreeRTOS\Source/tasks.c **** /*
 561:..\FreeRTOS\Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:..\FreeRTOS\Source/tasks.c ****  * under the control of the scheduler.
 563:..\FreeRTOS\Source/tasks.c ****  */
 564:..\FreeRTOS\Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:..\FreeRTOS\Source/tasks.c **** 
 566:..\FreeRTOS\Source/tasks.c **** /*
 567:..\FreeRTOS\Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:..\FreeRTOS\Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:..\FreeRTOS\Source/tasks.c ****  * called by the function.
 570:..\FreeRTOS\Source/tasks.c ****  */
 571:..\FreeRTOS\Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:..\FreeRTOS\Source/tasks.c **** 
 573:..\FreeRTOS\Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:..\FreeRTOS\Source/tasks.c **** 
 575:..\FreeRTOS\Source/tasks.c **** #endif
 576:..\FreeRTOS\Source/tasks.c **** 
 577:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 578:..\FreeRTOS\Source/tasks.c **** 
 579:..\FreeRTOS\Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:..\FreeRTOS\Source/tasks.c **** 
 581:..\FreeRTOS\Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:..\FreeRTOS\Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:..\FreeRTOS\Source/tasks.c **** 									const uint32_t ulStackDepth,
 584:..\FreeRTOS\Source/tasks.c **** 									void * const pvParameters,
 585:..\FreeRTOS\Source/tasks.c **** 									UBaseType_t uxPriority,
 586:..\FreeRTOS\Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:..\FreeRTOS\Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:..\FreeRTOS\Source/tasks.c **** 	{
 589:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxNewTCB;
 590:..\FreeRTOS\Source/tasks.c **** 	TaskHandle_t xReturn;
 591:..\FreeRTOS\Source/tasks.c **** 
 592:..\FreeRTOS\Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:..\FreeRTOS\Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:..\FreeRTOS\Source/tasks.c **** 
 595:..\FreeRTOS\Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:..\FreeRTOS\Source/tasks.c **** 		{
 597:..\FreeRTOS\Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:..\FreeRTOS\Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:..\FreeRTOS\Source/tasks.c **** 			structure. */
 600:..\FreeRTOS\Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 601:..\FreeRTOS\Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 12


 602:..\FreeRTOS\Source/tasks.c **** 		}
 603:..\FreeRTOS\Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 604:..\FreeRTOS\Source/tasks.c **** 
 605:..\FreeRTOS\Source/tasks.c **** 
 606:..\FreeRTOS\Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 607:..\FreeRTOS\Source/tasks.c **** 		{
 608:..\FreeRTOS\Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 609:..\FreeRTOS\Source/tasks.c **** 			function - use them. */
 610:..\FreeRTOS\Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 611:..\FreeRTOS\Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 612:..\FreeRTOS\Source/tasks.c **** 
 613:..\FreeRTOS\Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 614:..\FreeRTOS\Source/tasks.c **** 			{
 615:..\FreeRTOS\Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 616:..\FreeRTOS\Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 617:..\FreeRTOS\Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 618:..\FreeRTOS\Source/tasks.c **** 			}
 619:..\FreeRTOS\Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 620:..\FreeRTOS\Source/tasks.c **** 
 621:..\FreeRTOS\Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 622:..\FreeRTOS\Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 623:..\FreeRTOS\Source/tasks.c **** 		}
 624:..\FreeRTOS\Source/tasks.c **** 		else
 625:..\FreeRTOS\Source/tasks.c **** 		{
 626:..\FreeRTOS\Source/tasks.c **** 			xReturn = NULL;
 627:..\FreeRTOS\Source/tasks.c **** 		}
 628:..\FreeRTOS\Source/tasks.c **** 
 629:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
 630:..\FreeRTOS\Source/tasks.c **** 	}
 631:..\FreeRTOS\Source/tasks.c **** 
 632:..\FreeRTOS\Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 633:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 634:..\FreeRTOS\Source/tasks.c **** 
 635:..\FreeRTOS\Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 636:..\FreeRTOS\Source/tasks.c **** 
 637:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 638:..\FreeRTOS\Source/tasks.c **** 	{
 639:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxNewTCB;
 640:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 641:..\FreeRTOS\Source/tasks.c **** 
 642:..\FreeRTOS\Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 643:..\FreeRTOS\Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 644:..\FreeRTOS\Source/tasks.c **** 
 645:..\FreeRTOS\Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 646:..\FreeRTOS\Source/tasks.c **** 		{
 647:..\FreeRTOS\Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 648:..\FreeRTOS\Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 649:..\FreeRTOS\Source/tasks.c **** 			not static allocation is being used. */
 650:..\FreeRTOS\Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 651:..\FreeRTOS\Source/tasks.c **** 
 652:..\FreeRTOS\Source/tasks.c **** 			/* Store the stack location in the TCB. */
 653:..\FreeRTOS\Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 654:..\FreeRTOS\Source/tasks.c **** 
 655:..\FreeRTOS\Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 656:..\FreeRTOS\Source/tasks.c **** 			{
 657:..\FreeRTOS\Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 658:..\FreeRTOS\Source/tasks.c **** 				task was created statically in case the task is later deleted. */
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 13


 659:..\FreeRTOS\Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 660:..\FreeRTOS\Source/tasks.c **** 			}
 661:..\FreeRTOS\Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 662:..\FreeRTOS\Source/tasks.c **** 
 663:..\FreeRTOS\Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 664:..\FreeRTOS\Source/tasks.c **** 									pxTaskDefinition->pcName,
 665:..\FreeRTOS\Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 666:..\FreeRTOS\Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 667:..\FreeRTOS\Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 668:..\FreeRTOS\Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 669:..\FreeRTOS\Source/tasks.c **** 									pxTaskDefinition->xRegions );
 670:..\FreeRTOS\Source/tasks.c **** 
 671:..\FreeRTOS\Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 672:..\FreeRTOS\Source/tasks.c **** 			xReturn = pdPASS;
 673:..\FreeRTOS\Source/tasks.c **** 		}
 674:..\FreeRTOS\Source/tasks.c **** 
 675:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
 676:..\FreeRTOS\Source/tasks.c **** 	}
 677:..\FreeRTOS\Source/tasks.c **** 
 678:..\FreeRTOS\Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 679:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 680:..\FreeRTOS\Source/tasks.c **** 
 681:..\FreeRTOS\Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 682:..\FreeRTOS\Source/tasks.c **** 
 683:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 684:..\FreeRTOS\Source/tasks.c **** 	{
 685:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxNewTCB;
 686:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 687:..\FreeRTOS\Source/tasks.c **** 
 688:..\FreeRTOS\Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 689:..\FreeRTOS\Source/tasks.c **** 
 690:..\FreeRTOS\Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 691:..\FreeRTOS\Source/tasks.c **** 		{
 692:..\FreeRTOS\Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 693:..\FreeRTOS\Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 694:..\FreeRTOS\Source/tasks.c **** 			not static allocation is being used. */
 695:..\FreeRTOS\Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 696:..\FreeRTOS\Source/tasks.c **** 
 697:..\FreeRTOS\Source/tasks.c **** 			if( pxNewTCB != NULL )
 698:..\FreeRTOS\Source/tasks.c **** 			{
 699:..\FreeRTOS\Source/tasks.c **** 				/* Store the stack location in the TCB. */
 700:..\FreeRTOS\Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 701:..\FreeRTOS\Source/tasks.c **** 
 702:..\FreeRTOS\Source/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 703:..\FreeRTOS\Source/tasks.c **** 				{
 704:..\FreeRTOS\Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 705:..\FreeRTOS\Source/tasks.c **** 					this task had a statically allocated stack in case it is
 706:..\FreeRTOS\Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 707:..\FreeRTOS\Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 708:..\FreeRTOS\Source/tasks.c **** 				}
 709:..\FreeRTOS\Source/tasks.c **** 				#endif
 710:..\FreeRTOS\Source/tasks.c **** 
 711:..\FreeRTOS\Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 712:..\FreeRTOS\Source/tasks.c **** 										pxTaskDefinition->pcName,
 713:..\FreeRTOS\Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 714:..\FreeRTOS\Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 715:..\FreeRTOS\Source/tasks.c **** 										pxTaskDefinition->uxPriority,
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 14


 716:..\FreeRTOS\Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 717:..\FreeRTOS\Source/tasks.c **** 										pxTaskDefinition->xRegions );
 718:..\FreeRTOS\Source/tasks.c **** 
 719:..\FreeRTOS\Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 720:..\FreeRTOS\Source/tasks.c **** 				xReturn = pdPASS;
 721:..\FreeRTOS\Source/tasks.c **** 			}
 722:..\FreeRTOS\Source/tasks.c **** 		}
 723:..\FreeRTOS\Source/tasks.c **** 
 724:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
 725:..\FreeRTOS\Source/tasks.c **** 	}
 726:..\FreeRTOS\Source/tasks.c **** 
 727:..\FreeRTOS\Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 728:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 729:..\FreeRTOS\Source/tasks.c **** 
 730:..\FreeRTOS\Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 731:..\FreeRTOS\Source/tasks.c **** 
 732:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 733:..\FreeRTOS\Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 734:..\FreeRTOS\Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 735:..\FreeRTOS\Source/tasks.c **** 							void * const pvParameters,
 736:..\FreeRTOS\Source/tasks.c **** 							UBaseType_t uxPriority,
 737:..\FreeRTOS\Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 738:..\FreeRTOS\Source/tasks.c **** 	{
 739:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxNewTCB;
 740:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn;
 741:..\FreeRTOS\Source/tasks.c **** 
 742:..\FreeRTOS\Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 743:..\FreeRTOS\Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 744:..\FreeRTOS\Source/tasks.c **** 		the TCB then the stack. */
 745:..\FreeRTOS\Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 746:..\FreeRTOS\Source/tasks.c **** 		{
 747:..\FreeRTOS\Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 748:..\FreeRTOS\Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 749:..\FreeRTOS\Source/tasks.c **** 			allocation is being used. */
 750:..\FreeRTOS\Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 751:..\FreeRTOS\Source/tasks.c **** 
 752:..\FreeRTOS\Source/tasks.c **** 			if( pxNewTCB != NULL )
 753:..\FreeRTOS\Source/tasks.c **** 			{
 754:..\FreeRTOS\Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 755:..\FreeRTOS\Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 756:..\FreeRTOS\Source/tasks.c **** 				be deleted later if required. */
 757:..\FreeRTOS\Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 758:..\FreeRTOS\Source/tasks.c **** 
 759:..\FreeRTOS\Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 760:..\FreeRTOS\Source/tasks.c **** 				{
 761:..\FreeRTOS\Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 762:..\FreeRTOS\Source/tasks.c **** 					vPortFree( pxNewTCB );
 763:..\FreeRTOS\Source/tasks.c **** 					pxNewTCB = NULL;
 764:..\FreeRTOS\Source/tasks.c **** 				}
 765:..\FreeRTOS\Source/tasks.c **** 			}
 766:..\FreeRTOS\Source/tasks.c **** 		}
 767:..\FreeRTOS\Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 768:..\FreeRTOS\Source/tasks.c **** 		{
 769:..\FreeRTOS\Source/tasks.c **** 		StackType_t *pxStack;
 770:..\FreeRTOS\Source/tasks.c **** 
 771:..\FreeRTOS\Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 772:..\FreeRTOS\Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 15


 773:..\FreeRTOS\Source/tasks.c **** 
 774:..\FreeRTOS\Source/tasks.c **** 			if( pxStack != NULL )
 775:..\FreeRTOS\Source/tasks.c **** 			{
 776:..\FreeRTOS\Source/tasks.c **** 				/* Allocate space for the TCB. */
 777:..\FreeRTOS\Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 778:..\FreeRTOS\Source/tasks.c **** 
 779:..\FreeRTOS\Source/tasks.c **** 				if( pxNewTCB != NULL )
 780:..\FreeRTOS\Source/tasks.c **** 				{
 781:..\FreeRTOS\Source/tasks.c **** 					/* Store the stack location in the TCB. */
 782:..\FreeRTOS\Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 783:..\FreeRTOS\Source/tasks.c **** 				}
 784:..\FreeRTOS\Source/tasks.c **** 				else
 785:..\FreeRTOS\Source/tasks.c **** 				{
 786:..\FreeRTOS\Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 787:..\FreeRTOS\Source/tasks.c **** 					it again. */
 788:..\FreeRTOS\Source/tasks.c **** 					vPortFree( pxStack );
 789:..\FreeRTOS\Source/tasks.c **** 				}
 790:..\FreeRTOS\Source/tasks.c **** 			}
 791:..\FreeRTOS\Source/tasks.c **** 			else
 792:..\FreeRTOS\Source/tasks.c **** 			{
 793:..\FreeRTOS\Source/tasks.c **** 				pxNewTCB = NULL;
 794:..\FreeRTOS\Source/tasks.c **** 			}
 795:..\FreeRTOS\Source/tasks.c **** 		}
 796:..\FreeRTOS\Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 797:..\FreeRTOS\Source/tasks.c **** 
 798:..\FreeRTOS\Source/tasks.c **** 		if( pxNewTCB != NULL )
 799:..\FreeRTOS\Source/tasks.c **** 		{
 800:..\FreeRTOS\Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 801:..\FreeRTOS\Source/tasks.c **** 			{
 802:..\FreeRTOS\Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 803:..\FreeRTOS\Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 804:..\FreeRTOS\Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 805:..\FreeRTOS\Source/tasks.c **** 			}
 806:..\FreeRTOS\Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 807:..\FreeRTOS\Source/tasks.c **** 
 808:..\FreeRTOS\Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 809:..\FreeRTOS\Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 810:..\FreeRTOS\Source/tasks.c **** 			xReturn = pdPASS;
 811:..\FreeRTOS\Source/tasks.c **** 		}
 812:..\FreeRTOS\Source/tasks.c **** 		else
 813:..\FreeRTOS\Source/tasks.c **** 		{
 814:..\FreeRTOS\Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 815:..\FreeRTOS\Source/tasks.c **** 		}
 816:..\FreeRTOS\Source/tasks.c **** 
 817:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
 818:..\FreeRTOS\Source/tasks.c **** 	}
 819:..\FreeRTOS\Source/tasks.c **** 
 820:..\FreeRTOS\Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 821:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 822:..\FreeRTOS\Source/tasks.c **** 
 823:..\FreeRTOS\Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 824:..\FreeRTOS\Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 825:..\FreeRTOS\Source/tasks.c **** 									const uint32_t ulStackDepth,
 826:..\FreeRTOS\Source/tasks.c **** 									void * const pvParameters,
 827:..\FreeRTOS\Source/tasks.c **** 									UBaseType_t uxPriority,
 828:..\FreeRTOS\Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 829:..\FreeRTOS\Source/tasks.c **** 									TCB_t *pxNewTCB,
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 16


 830:..\FreeRTOS\Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 831:..\FreeRTOS\Source/tasks.c **** {
 832:..\FreeRTOS\Source/tasks.c **** StackType_t *pxTopOfStack;
 833:..\FreeRTOS\Source/tasks.c **** UBaseType_t x;
 834:..\FreeRTOS\Source/tasks.c **** 
 835:..\FreeRTOS\Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 836:..\FreeRTOS\Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 837:..\FreeRTOS\Source/tasks.c **** 		BaseType_t xRunPrivileged;
 838:..\FreeRTOS\Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 839:..\FreeRTOS\Source/tasks.c **** 		{
 840:..\FreeRTOS\Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 841:..\FreeRTOS\Source/tasks.c **** 		}
 842:..\FreeRTOS\Source/tasks.c **** 		else
 843:..\FreeRTOS\Source/tasks.c **** 		{
 844:..\FreeRTOS\Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 845:..\FreeRTOS\Source/tasks.c **** 		}
 846:..\FreeRTOS\Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 847:..\FreeRTOS\Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 848:..\FreeRTOS\Source/tasks.c **** 
 849:..\FreeRTOS\Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 850:..\FreeRTOS\Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 851:..\FreeRTOS\Source/tasks.c **** 	{
 852:..\FreeRTOS\Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 853:..\FreeRTOS\Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 854:..\FreeRTOS\Source/tasks.c **** 	}
 855:..\FreeRTOS\Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 856:..\FreeRTOS\Source/tasks.c **** 
 857:..\FreeRTOS\Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 858:..\FreeRTOS\Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 859:..\FreeRTOS\Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 860:..\FreeRTOS\Source/tasks.c **** 	by the port. */
 861:..\FreeRTOS\Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 862:..\FreeRTOS\Source/tasks.c **** 	{
 863:..\FreeRTOS\Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 864:..\FreeRTOS\Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 865:..\FreeRTOS\Source/tasks.c **** 
 866:..\FreeRTOS\Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 867:..\FreeRTOS\Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 868:..\FreeRTOS\Source/tasks.c **** 
 869:..\FreeRTOS\Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 870:..\FreeRTOS\Source/tasks.c **** 		{
 871:..\FreeRTOS\Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 872:..\FreeRTOS\Source/tasks.c **** 			debugging. */
 873:..\FreeRTOS\Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 874:..\FreeRTOS\Source/tasks.c **** 		}
 875:..\FreeRTOS\Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 876:..\FreeRTOS\Source/tasks.c **** 	}
 877:..\FreeRTOS\Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 878:..\FreeRTOS\Source/tasks.c **** 	{
 879:..\FreeRTOS\Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 880:..\FreeRTOS\Source/tasks.c **** 
 881:..\FreeRTOS\Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 882:..\FreeRTOS\Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 883:..\FreeRTOS\Source/tasks.c **** 
 884:..\FreeRTOS\Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 885:..\FreeRTOS\Source/tasks.c **** 		performed. */
 886:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 17


 887:..\FreeRTOS\Source/tasks.c **** 	}
 888:..\FreeRTOS\Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 889:..\FreeRTOS\Source/tasks.c **** 
 890:..\FreeRTOS\Source/tasks.c **** 	/* Store the task name in the TCB. */
 891:..\FreeRTOS\Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 892:..\FreeRTOS\Source/tasks.c **** 	{
 893:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 894:..\FreeRTOS\Source/tasks.c **** 
 895:..\FreeRTOS\Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:..\FreeRTOS\Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:..\FreeRTOS\Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 898:..\FreeRTOS\Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 899:..\FreeRTOS\Source/tasks.c **** 		{
 900:..\FreeRTOS\Source/tasks.c **** 			break;
 901:..\FreeRTOS\Source/tasks.c **** 		}
 902:..\FreeRTOS\Source/tasks.c **** 		else
 903:..\FreeRTOS\Source/tasks.c **** 		{
 904:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 905:..\FreeRTOS\Source/tasks.c **** 		}
 906:..\FreeRTOS\Source/tasks.c **** 	}
 907:..\FreeRTOS\Source/tasks.c **** 
 908:..\FreeRTOS\Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 909:..\FreeRTOS\Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 910:..\FreeRTOS\Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 911:..\FreeRTOS\Source/tasks.c **** 
 912:..\FreeRTOS\Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 913:..\FreeRTOS\Source/tasks.c **** 	remove the privilege bit if one is present. */
 914:..\FreeRTOS\Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 915:..\FreeRTOS\Source/tasks.c **** 	{
 916:..\FreeRTOS\Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 917:..\FreeRTOS\Source/tasks.c **** 	}
 918:..\FreeRTOS\Source/tasks.c **** 	else
 919:..\FreeRTOS\Source/tasks.c **** 	{
 920:..\FreeRTOS\Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 921:..\FreeRTOS\Source/tasks.c **** 	}
 922:..\FreeRTOS\Source/tasks.c **** 
 923:..\FreeRTOS\Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 924:..\FreeRTOS\Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 925:..\FreeRTOS\Source/tasks.c **** 	{
 926:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 927:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 928:..\FreeRTOS\Source/tasks.c **** 	}
 929:..\FreeRTOS\Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 930:..\FreeRTOS\Source/tasks.c **** 
 931:..\FreeRTOS\Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 932:..\FreeRTOS\Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 933:..\FreeRTOS\Source/tasks.c **** 
 934:..\FreeRTOS\Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 935:..\FreeRTOS\Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 936:..\FreeRTOS\Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 937:..\FreeRTOS\Source/tasks.c **** 
 938:..\FreeRTOS\Source/tasks.c **** 	/* Event lists are always in priority order. */
 939:..\FreeRTOS\Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 940:..\FreeRTOS\Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 941:..\FreeRTOS\Source/tasks.c **** 
 942:..\FreeRTOS\Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 943:..\FreeRTOS\Source/tasks.c **** 	{
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 18


 944:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 945:..\FreeRTOS\Source/tasks.c **** 	}
 946:..\FreeRTOS\Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 947:..\FreeRTOS\Source/tasks.c **** 
 948:..\FreeRTOS\Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 949:..\FreeRTOS\Source/tasks.c **** 	{
 950:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 951:..\FreeRTOS\Source/tasks.c **** 	}
 952:..\FreeRTOS\Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 953:..\FreeRTOS\Source/tasks.c **** 
 954:..\FreeRTOS\Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 955:..\FreeRTOS\Source/tasks.c **** 	{
 956:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 957:..\FreeRTOS\Source/tasks.c **** 	}
 958:..\FreeRTOS\Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 959:..\FreeRTOS\Source/tasks.c **** 
 960:..\FreeRTOS\Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 961:..\FreeRTOS\Source/tasks.c **** 	{
 962:..\FreeRTOS\Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 963:..\FreeRTOS\Source/tasks.c **** 	}
 964:..\FreeRTOS\Source/tasks.c **** 	#else
 965:..\FreeRTOS\Source/tasks.c **** 	{
 966:..\FreeRTOS\Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 967:..\FreeRTOS\Source/tasks.c **** 		( void ) xRegions;
 968:..\FreeRTOS\Source/tasks.c **** 	}
 969:..\FreeRTOS\Source/tasks.c **** 	#endif
 970:..\FreeRTOS\Source/tasks.c **** 
 971:..\FreeRTOS\Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 972:..\FreeRTOS\Source/tasks.c **** 	{
 973:..\FreeRTOS\Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 974:..\FreeRTOS\Source/tasks.c **** 		{
 975:..\FreeRTOS\Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 976:..\FreeRTOS\Source/tasks.c **** 		}
 977:..\FreeRTOS\Source/tasks.c **** 	}
 978:..\FreeRTOS\Source/tasks.c **** 	#endif
 979:..\FreeRTOS\Source/tasks.c **** 
 980:..\FreeRTOS\Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 981:..\FreeRTOS\Source/tasks.c **** 	{
 982:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 983:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 984:..\FreeRTOS\Source/tasks.c **** 	}
 985:..\FreeRTOS\Source/tasks.c **** 	#endif
 986:..\FreeRTOS\Source/tasks.c **** 
 987:..\FreeRTOS\Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 988:..\FreeRTOS\Source/tasks.c **** 	{
 989:..\FreeRTOS\Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 990:..\FreeRTOS\Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 991:..\FreeRTOS\Source/tasks.c **** 	}
 992:..\FreeRTOS\Source/tasks.c **** 	#endif
 993:..\FreeRTOS\Source/tasks.c **** 
 994:..\FreeRTOS\Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 995:..\FreeRTOS\Source/tasks.c **** 	{
 996:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 997:..\FreeRTOS\Source/tasks.c **** 	}
 998:..\FreeRTOS\Source/tasks.c **** 	#endif
 999:..\FreeRTOS\Source/tasks.c **** 
1000:..\FreeRTOS\Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 19


1001:..\FreeRTOS\Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1002:..\FreeRTOS\Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1003:..\FreeRTOS\Source/tasks.c **** 	the top of stack variable is updated. */
1004:..\FreeRTOS\Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1005:..\FreeRTOS\Source/tasks.c **** 	{
1006:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1007:..\FreeRTOS\Source/tasks.c **** 	}
1008:..\FreeRTOS\Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1009:..\FreeRTOS\Source/tasks.c **** 	{
1010:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1011:..\FreeRTOS\Source/tasks.c **** 	}
1012:..\FreeRTOS\Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1013:..\FreeRTOS\Source/tasks.c **** 
1014:..\FreeRTOS\Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
1015:..\FreeRTOS\Source/tasks.c **** 	{
1016:..\FreeRTOS\Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1017:..\FreeRTOS\Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1018:..\FreeRTOS\Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1019:..\FreeRTOS\Source/tasks.c **** 	}
1020:..\FreeRTOS\Source/tasks.c **** 	else
1021:..\FreeRTOS\Source/tasks.c **** 	{
1022:..\FreeRTOS\Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1023:..\FreeRTOS\Source/tasks.c **** 	}
1024:..\FreeRTOS\Source/tasks.c **** }
1025:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1026:..\FreeRTOS\Source/tasks.c **** 
1027:..\FreeRTOS\Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1028:..\FreeRTOS\Source/tasks.c **** {
1029:..\FreeRTOS\Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1030:..\FreeRTOS\Source/tasks.c **** 	updated. */
1031:..\FreeRTOS\Source/tasks.c **** 	taskENTER_CRITICAL();
1032:..\FreeRTOS\Source/tasks.c **** 	{
1033:..\FreeRTOS\Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1034:..\FreeRTOS\Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1035:..\FreeRTOS\Source/tasks.c **** 		{
1036:..\FreeRTOS\Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1037:..\FreeRTOS\Source/tasks.c **** 			the suspended state - make this the current task. */
1038:..\FreeRTOS\Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1039:..\FreeRTOS\Source/tasks.c **** 
1040:..\FreeRTOS\Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1041:..\FreeRTOS\Source/tasks.c **** 			{
1042:..\FreeRTOS\Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1043:..\FreeRTOS\Source/tasks.c **** 				initialisation required.  We will not recover if this call
1044:..\FreeRTOS\Source/tasks.c **** 				fails, but we will report the failure. */
1045:..\FreeRTOS\Source/tasks.c **** 				prvInitialiseTaskLists();
1046:..\FreeRTOS\Source/tasks.c **** 			}
1047:..\FreeRTOS\Source/tasks.c **** 			else
1048:..\FreeRTOS\Source/tasks.c **** 			{
1049:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1050:..\FreeRTOS\Source/tasks.c **** 			}
1051:..\FreeRTOS\Source/tasks.c **** 		}
1052:..\FreeRTOS\Source/tasks.c **** 		else
1053:..\FreeRTOS\Source/tasks.c **** 		{
1054:..\FreeRTOS\Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1055:..\FreeRTOS\Source/tasks.c **** 			current task if it is the highest priority task to be created
1056:..\FreeRTOS\Source/tasks.c **** 			so far. */
1057:..\FreeRTOS\Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 20


1058:..\FreeRTOS\Source/tasks.c **** 			{
1059:..\FreeRTOS\Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1060:..\FreeRTOS\Source/tasks.c **** 				{
1061:..\FreeRTOS\Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1062:..\FreeRTOS\Source/tasks.c **** 				}
1063:..\FreeRTOS\Source/tasks.c **** 				else
1064:..\FreeRTOS\Source/tasks.c **** 				{
1065:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1066:..\FreeRTOS\Source/tasks.c **** 				}
1067:..\FreeRTOS\Source/tasks.c **** 			}
1068:..\FreeRTOS\Source/tasks.c **** 			else
1069:..\FreeRTOS\Source/tasks.c **** 			{
1070:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1071:..\FreeRTOS\Source/tasks.c **** 			}
1072:..\FreeRTOS\Source/tasks.c **** 		}
1073:..\FreeRTOS\Source/tasks.c **** 
1074:..\FreeRTOS\Source/tasks.c **** 		uxTaskNumber++;
1075:..\FreeRTOS\Source/tasks.c **** 
1076:..\FreeRTOS\Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1077:..\FreeRTOS\Source/tasks.c **** 		{
1078:..\FreeRTOS\Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1079:..\FreeRTOS\Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1080:..\FreeRTOS\Source/tasks.c **** 		}
1081:..\FreeRTOS\Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1082:..\FreeRTOS\Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1083:..\FreeRTOS\Source/tasks.c **** 
1084:..\FreeRTOS\Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1085:..\FreeRTOS\Source/tasks.c **** 
1086:..\FreeRTOS\Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1087:..\FreeRTOS\Source/tasks.c **** 	}
1088:..\FreeRTOS\Source/tasks.c **** 	taskEXIT_CRITICAL();
1089:..\FreeRTOS\Source/tasks.c **** 
1090:..\FreeRTOS\Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1091:..\FreeRTOS\Source/tasks.c **** 	{
1092:..\FreeRTOS\Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1093:..\FreeRTOS\Source/tasks.c **** 		then it should run now. */
1094:..\FreeRTOS\Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1095:..\FreeRTOS\Source/tasks.c **** 		{
1096:..\FreeRTOS\Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1097:..\FreeRTOS\Source/tasks.c **** 		}
1098:..\FreeRTOS\Source/tasks.c **** 		else
1099:..\FreeRTOS\Source/tasks.c **** 		{
1100:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1101:..\FreeRTOS\Source/tasks.c **** 		}
1102:..\FreeRTOS\Source/tasks.c **** 	}
1103:..\FreeRTOS\Source/tasks.c **** 	else
1104:..\FreeRTOS\Source/tasks.c **** 	{
1105:..\FreeRTOS\Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1106:..\FreeRTOS\Source/tasks.c **** 	}
1107:..\FreeRTOS\Source/tasks.c **** }
1108:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1109:..\FreeRTOS\Source/tasks.c **** 
1110:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1111:..\FreeRTOS\Source/tasks.c **** 
1112:..\FreeRTOS\Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1113:..\FreeRTOS\Source/tasks.c **** 	{
1114:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 21


1115:..\FreeRTOS\Source/tasks.c **** 
1116:..\FreeRTOS\Source/tasks.c **** 		taskENTER_CRITICAL();
1117:..\FreeRTOS\Source/tasks.c **** 		{
1118:..\FreeRTOS\Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1119:..\FreeRTOS\Source/tasks.c **** 			being deleted. */
1120:..\FreeRTOS\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1121:..\FreeRTOS\Source/tasks.c **** 
1122:..\FreeRTOS\Source/tasks.c **** 			/* Remove task from the ready list. */
1123:..\FreeRTOS\Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1124:..\FreeRTOS\Source/tasks.c **** 			{
1125:..\FreeRTOS\Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1126:..\FreeRTOS\Source/tasks.c **** 			}
1127:..\FreeRTOS\Source/tasks.c **** 			else
1128:..\FreeRTOS\Source/tasks.c **** 			{
1129:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1130:..\FreeRTOS\Source/tasks.c **** 			}
1131:..\FreeRTOS\Source/tasks.c **** 
1132:..\FreeRTOS\Source/tasks.c **** 			/* Is the task waiting on an event also? */
1133:..\FreeRTOS\Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1134:..\FreeRTOS\Source/tasks.c **** 			{
1135:..\FreeRTOS\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1136:..\FreeRTOS\Source/tasks.c **** 			}
1137:..\FreeRTOS\Source/tasks.c **** 			else
1138:..\FreeRTOS\Source/tasks.c **** 			{
1139:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1140:..\FreeRTOS\Source/tasks.c **** 			}
1141:..\FreeRTOS\Source/tasks.c **** 
1142:..\FreeRTOS\Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1143:..\FreeRTOS\Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1144:..\FreeRTOS\Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1145:..\FreeRTOS\Source/tasks.c **** 			not return. */
1146:..\FreeRTOS\Source/tasks.c **** 			uxTaskNumber++;
1147:..\FreeRTOS\Source/tasks.c **** 
1148:..\FreeRTOS\Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1149:..\FreeRTOS\Source/tasks.c **** 			{
1150:..\FreeRTOS\Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1151:..\FreeRTOS\Source/tasks.c **** 				task itself, as a context switch to another task is required.
1152:..\FreeRTOS\Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1153:..\FreeRTOS\Source/tasks.c **** 				check the termination list and free up any memory allocated by
1154:..\FreeRTOS\Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1155:..\FreeRTOS\Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1156:..\FreeRTOS\Source/tasks.c **** 
1157:..\FreeRTOS\Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1158:..\FreeRTOS\Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1159:..\FreeRTOS\Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1160:..\FreeRTOS\Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1161:..\FreeRTOS\Source/tasks.c **** 
1162:..\FreeRTOS\Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1163:..\FreeRTOS\Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1164:..\FreeRTOS\Source/tasks.c **** 				after which it is not possible to yield away from this task -
1165:..\FreeRTOS\Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1166:..\FreeRTOS\Source/tasks.c **** 				required. */
1167:..\FreeRTOS\Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1168:..\FreeRTOS\Source/tasks.c **** 			}
1169:..\FreeRTOS\Source/tasks.c **** 			else
1170:..\FreeRTOS\Source/tasks.c **** 			{
1171:..\FreeRTOS\Source/tasks.c **** 				--uxCurrentNumberOfTasks;
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 22


1172:..\FreeRTOS\Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1173:..\FreeRTOS\Source/tasks.c **** 
1174:..\FreeRTOS\Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1175:..\FreeRTOS\Source/tasks.c **** 				the task that has just been deleted. */
1176:..\FreeRTOS\Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1177:..\FreeRTOS\Source/tasks.c **** 			}
1178:..\FreeRTOS\Source/tasks.c **** 
1179:..\FreeRTOS\Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1180:..\FreeRTOS\Source/tasks.c **** 		}
1181:..\FreeRTOS\Source/tasks.c **** 		taskEXIT_CRITICAL();
1182:..\FreeRTOS\Source/tasks.c **** 
1183:..\FreeRTOS\Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1184:..\FreeRTOS\Source/tasks.c **** 		been deleted. */
1185:..\FreeRTOS\Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1186:..\FreeRTOS\Source/tasks.c **** 		{
1187:..\FreeRTOS\Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1188:..\FreeRTOS\Source/tasks.c **** 			{
1189:..\FreeRTOS\Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1190:..\FreeRTOS\Source/tasks.c **** 				portYIELD_WITHIN_API();
1191:..\FreeRTOS\Source/tasks.c **** 			}
1192:..\FreeRTOS\Source/tasks.c **** 			else
1193:..\FreeRTOS\Source/tasks.c **** 			{
1194:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1195:..\FreeRTOS\Source/tasks.c **** 			}
1196:..\FreeRTOS\Source/tasks.c **** 		}
1197:..\FreeRTOS\Source/tasks.c **** 	}
1198:..\FreeRTOS\Source/tasks.c **** 
1199:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1200:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1201:..\FreeRTOS\Source/tasks.c **** 
1202:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1203:..\FreeRTOS\Source/tasks.c **** 
1204:..\FreeRTOS\Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1205:..\FreeRTOS\Source/tasks.c **** 	{
1206:..\FreeRTOS\Source/tasks.c **** 	TickType_t xTimeToWake;
1207:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1208:..\FreeRTOS\Source/tasks.c **** 
1209:..\FreeRTOS\Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1210:..\FreeRTOS\Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1211:..\FreeRTOS\Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1212:..\FreeRTOS\Source/tasks.c **** 
1213:..\FreeRTOS\Source/tasks.c **** 		vTaskSuspendAll();
1214:..\FreeRTOS\Source/tasks.c **** 		{
1215:..\FreeRTOS\Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1216:..\FreeRTOS\Source/tasks.c **** 			block. */
1217:..\FreeRTOS\Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1218:..\FreeRTOS\Source/tasks.c **** 
1219:..\FreeRTOS\Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1220:..\FreeRTOS\Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1221:..\FreeRTOS\Source/tasks.c **** 
1222:..\FreeRTOS\Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1223:..\FreeRTOS\Source/tasks.c **** 			{
1224:..\FreeRTOS\Source/tasks.c **** 				/* The tick count has overflowed since this function was
1225:..\FreeRTOS\Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1226:..\FreeRTOS\Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1227:..\FreeRTOS\Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1228:..\FreeRTOS\Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 23


1229:..\FreeRTOS\Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1230:..\FreeRTOS\Source/tasks.c **** 				{
1231:..\FreeRTOS\Source/tasks.c **** 					xShouldDelay = pdTRUE;
1232:..\FreeRTOS\Source/tasks.c **** 				}
1233:..\FreeRTOS\Source/tasks.c **** 				else
1234:..\FreeRTOS\Source/tasks.c **** 				{
1235:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1236:..\FreeRTOS\Source/tasks.c **** 				}
1237:..\FreeRTOS\Source/tasks.c **** 			}
1238:..\FreeRTOS\Source/tasks.c **** 			else
1239:..\FreeRTOS\Source/tasks.c **** 			{
1240:..\FreeRTOS\Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1241:..\FreeRTOS\Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1242:..\FreeRTOS\Source/tasks.c **** 				tick time is less than the wake time. */
1243:..\FreeRTOS\Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1244:..\FreeRTOS\Source/tasks.c **** 				{
1245:..\FreeRTOS\Source/tasks.c **** 					xShouldDelay = pdTRUE;
1246:..\FreeRTOS\Source/tasks.c **** 				}
1247:..\FreeRTOS\Source/tasks.c **** 				else
1248:..\FreeRTOS\Source/tasks.c **** 				{
1249:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1250:..\FreeRTOS\Source/tasks.c **** 				}
1251:..\FreeRTOS\Source/tasks.c **** 			}
1252:..\FreeRTOS\Source/tasks.c **** 
1253:..\FreeRTOS\Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1254:..\FreeRTOS\Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1255:..\FreeRTOS\Source/tasks.c **** 
1256:..\FreeRTOS\Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1257:..\FreeRTOS\Source/tasks.c **** 			{
1258:..\FreeRTOS\Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1259:..\FreeRTOS\Source/tasks.c **** 
1260:..\FreeRTOS\Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1261:..\FreeRTOS\Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1262:..\FreeRTOS\Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1263:..\FreeRTOS\Source/tasks.c **** 			}
1264:..\FreeRTOS\Source/tasks.c **** 			else
1265:..\FreeRTOS\Source/tasks.c **** 			{
1266:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1267:..\FreeRTOS\Source/tasks.c **** 			}
1268:..\FreeRTOS\Source/tasks.c **** 		}
1269:..\FreeRTOS\Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1270:..\FreeRTOS\Source/tasks.c **** 
1271:..\FreeRTOS\Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1272:..\FreeRTOS\Source/tasks.c **** 		have put ourselves to sleep. */
1273:..\FreeRTOS\Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1274:..\FreeRTOS\Source/tasks.c **** 		{
1275:..\FreeRTOS\Source/tasks.c **** 			portYIELD_WITHIN_API();
1276:..\FreeRTOS\Source/tasks.c **** 		}
1277:..\FreeRTOS\Source/tasks.c **** 		else
1278:..\FreeRTOS\Source/tasks.c **** 		{
1279:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1280:..\FreeRTOS\Source/tasks.c **** 		}
1281:..\FreeRTOS\Source/tasks.c **** 	}
1282:..\FreeRTOS\Source/tasks.c **** 
1283:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1284:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1285:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 24


1286:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1287:..\FreeRTOS\Source/tasks.c **** 
1288:..\FreeRTOS\Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1289:..\FreeRTOS\Source/tasks.c **** 	{
1290:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1291:..\FreeRTOS\Source/tasks.c **** 
1292:..\FreeRTOS\Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1293:..\FreeRTOS\Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1294:..\FreeRTOS\Source/tasks.c **** 		{
1295:..\FreeRTOS\Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1296:..\FreeRTOS\Source/tasks.c **** 			vTaskSuspendAll();
1297:..\FreeRTOS\Source/tasks.c **** 			{
1298:..\FreeRTOS\Source/tasks.c **** 				traceTASK_DELAY();
1299:..\FreeRTOS\Source/tasks.c **** 
1300:..\FreeRTOS\Source/tasks.c **** 				/* A task that is removed from the event list while the
1301:..\FreeRTOS\Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1302:..\FreeRTOS\Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1303:..\FreeRTOS\Source/tasks.c **** 				is resumed.
1304:..\FreeRTOS\Source/tasks.c **** 
1305:..\FreeRTOS\Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1306:..\FreeRTOS\Source/tasks.c **** 				executing task. */
1307:..\FreeRTOS\Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1308:..\FreeRTOS\Source/tasks.c **** 			}
1309:..\FreeRTOS\Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1310:..\FreeRTOS\Source/tasks.c **** 		}
1311:..\FreeRTOS\Source/tasks.c **** 		else
1312:..\FreeRTOS\Source/tasks.c **** 		{
1313:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1314:..\FreeRTOS\Source/tasks.c **** 		}
1315:..\FreeRTOS\Source/tasks.c **** 
1316:..\FreeRTOS\Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1317:..\FreeRTOS\Source/tasks.c **** 		have put ourselves to sleep. */
1318:..\FreeRTOS\Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1319:..\FreeRTOS\Source/tasks.c **** 		{
1320:..\FreeRTOS\Source/tasks.c **** 			portYIELD_WITHIN_API();
1321:..\FreeRTOS\Source/tasks.c **** 		}
1322:..\FreeRTOS\Source/tasks.c **** 		else
1323:..\FreeRTOS\Source/tasks.c **** 		{
1324:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1325:..\FreeRTOS\Source/tasks.c **** 		}
1326:..\FreeRTOS\Source/tasks.c **** 	}
1327:..\FreeRTOS\Source/tasks.c **** 
1328:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1329:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1330:..\FreeRTOS\Source/tasks.c **** 
1331:..\FreeRTOS\Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1332:..\FreeRTOS\Source/tasks.c **** 
1333:..\FreeRTOS\Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1334:..\FreeRTOS\Source/tasks.c **** 	{
1335:..\FreeRTOS\Source/tasks.c **** 	eTaskState eReturn;
1336:..\FreeRTOS\Source/tasks.c **** 	List_t *pxStateList;
1337:..\FreeRTOS\Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1338:..\FreeRTOS\Source/tasks.c **** 
1339:..\FreeRTOS\Source/tasks.c **** 		configASSERT( pxTCB );
1340:..\FreeRTOS\Source/tasks.c **** 
1341:..\FreeRTOS\Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1342:..\FreeRTOS\Source/tasks.c **** 		{
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 25


1343:..\FreeRTOS\Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1344:..\FreeRTOS\Source/tasks.c **** 			eReturn = eRunning;
1345:..\FreeRTOS\Source/tasks.c **** 		}
1346:..\FreeRTOS\Source/tasks.c **** 		else
1347:..\FreeRTOS\Source/tasks.c **** 		{
1348:..\FreeRTOS\Source/tasks.c **** 			taskENTER_CRITICAL();
1349:..\FreeRTOS\Source/tasks.c **** 			{
1350:..\FreeRTOS\Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1351:..\FreeRTOS\Source/tasks.c **** 			}
1352:..\FreeRTOS\Source/tasks.c **** 			taskEXIT_CRITICAL();
1353:..\FreeRTOS\Source/tasks.c **** 
1354:..\FreeRTOS\Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1355:..\FreeRTOS\Source/tasks.c **** 			{
1356:..\FreeRTOS\Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1357:..\FreeRTOS\Source/tasks.c **** 				lists. */
1358:..\FreeRTOS\Source/tasks.c **** 				eReturn = eBlocked;
1359:..\FreeRTOS\Source/tasks.c **** 			}
1360:..\FreeRTOS\Source/tasks.c **** 
1361:..\FreeRTOS\Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1362:..\FreeRTOS\Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1363:..\FreeRTOS\Source/tasks.c **** 				{
1364:..\FreeRTOS\Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1365:..\FreeRTOS\Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1366:..\FreeRTOS\Source/tasks.c **** 					indefinitely? */
1367:..\FreeRTOS\Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1368:..\FreeRTOS\Source/tasks.c **** 					{
1369:..\FreeRTOS\Source/tasks.c **** 						eReturn = eSuspended;
1370:..\FreeRTOS\Source/tasks.c **** 					}
1371:..\FreeRTOS\Source/tasks.c **** 					else
1372:..\FreeRTOS\Source/tasks.c **** 					{
1373:..\FreeRTOS\Source/tasks.c **** 						eReturn = eBlocked;
1374:..\FreeRTOS\Source/tasks.c **** 					}
1375:..\FreeRTOS\Source/tasks.c **** 				}
1376:..\FreeRTOS\Source/tasks.c **** 			#endif
1377:..\FreeRTOS\Source/tasks.c **** 
1378:..\FreeRTOS\Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1379:..\FreeRTOS\Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1380:..\FreeRTOS\Source/tasks.c **** 				{
1381:..\FreeRTOS\Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1382:..\FreeRTOS\Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1383:..\FreeRTOS\Source/tasks.c **** 					all. */
1384:..\FreeRTOS\Source/tasks.c **** 					eReturn = eDeleted;
1385:..\FreeRTOS\Source/tasks.c **** 				}
1386:..\FreeRTOS\Source/tasks.c **** 			#endif
1387:..\FreeRTOS\Source/tasks.c **** 
1388:..\FreeRTOS\Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1389:..\FreeRTOS\Source/tasks.c **** 			{
1390:..\FreeRTOS\Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1391:..\FreeRTOS\Source/tasks.c **** 				Ready (including pending ready) state. */
1392:..\FreeRTOS\Source/tasks.c **** 				eReturn = eReady;
1393:..\FreeRTOS\Source/tasks.c **** 			}
1394:..\FreeRTOS\Source/tasks.c **** 		}
1395:..\FreeRTOS\Source/tasks.c **** 
1396:..\FreeRTOS\Source/tasks.c **** 		return eReturn;
1397:..\FreeRTOS\Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1398:..\FreeRTOS\Source/tasks.c **** 
1399:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 26


1400:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1401:..\FreeRTOS\Source/tasks.c **** 
1402:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1403:..\FreeRTOS\Source/tasks.c **** 
1404:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1405:..\FreeRTOS\Source/tasks.c **** 	{
1406:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
1407:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxReturn;
1408:..\FreeRTOS\Source/tasks.c **** 
1409:..\FreeRTOS\Source/tasks.c **** 		taskENTER_CRITICAL();
1410:..\FreeRTOS\Source/tasks.c **** 		{
1411:..\FreeRTOS\Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1412:..\FreeRTOS\Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1413:..\FreeRTOS\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1414:..\FreeRTOS\Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1415:..\FreeRTOS\Source/tasks.c **** 		}
1416:..\FreeRTOS\Source/tasks.c **** 		taskEXIT_CRITICAL();
1417:..\FreeRTOS\Source/tasks.c **** 
1418:..\FreeRTOS\Source/tasks.c **** 		return uxReturn;
1419:..\FreeRTOS\Source/tasks.c **** 	}
1420:..\FreeRTOS\Source/tasks.c **** 
1421:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1422:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1423:..\FreeRTOS\Source/tasks.c **** 
1424:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1425:..\FreeRTOS\Source/tasks.c **** 
1426:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1427:..\FreeRTOS\Source/tasks.c **** 	{
1428:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
1429:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1430:..\FreeRTOS\Source/tasks.c **** 
1431:..\FreeRTOS\Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1432:..\FreeRTOS\Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1433:..\FreeRTOS\Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1434:..\FreeRTOS\Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1435:..\FreeRTOS\Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1436:..\FreeRTOS\Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1437:..\FreeRTOS\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1438:..\FreeRTOS\Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1439:..\FreeRTOS\Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1440:..\FreeRTOS\Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1441:..\FreeRTOS\Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1442:..\FreeRTOS\Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1443:..\FreeRTOS\Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1444:..\FreeRTOS\Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1445:..\FreeRTOS\Source/tasks.c **** 		provided on the following link:
1446:..\FreeRTOS\Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1447:..\FreeRTOS\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1448:..\FreeRTOS\Source/tasks.c **** 
1449:..\FreeRTOS\Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1450:..\FreeRTOS\Source/tasks.c **** 		{
1451:..\FreeRTOS\Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1452:..\FreeRTOS\Source/tasks.c **** 			task that is being queried. */
1453:..\FreeRTOS\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1454:..\FreeRTOS\Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1455:..\FreeRTOS\Source/tasks.c **** 		}
1456:..\FreeRTOS\Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 27


1457:..\FreeRTOS\Source/tasks.c **** 
1458:..\FreeRTOS\Source/tasks.c **** 		return uxReturn;
1459:..\FreeRTOS\Source/tasks.c **** 	}
1460:..\FreeRTOS\Source/tasks.c **** 
1461:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1462:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1463:..\FreeRTOS\Source/tasks.c **** 
1464:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1465:..\FreeRTOS\Source/tasks.c **** 
1466:..\FreeRTOS\Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1467:..\FreeRTOS\Source/tasks.c **** 	{
1468:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
1469:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1470:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1471:..\FreeRTOS\Source/tasks.c **** 
1472:..\FreeRTOS\Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1473:..\FreeRTOS\Source/tasks.c **** 
1474:..\FreeRTOS\Source/tasks.c **** 		/* Ensure the new priority is valid. */
1475:..\FreeRTOS\Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1476:..\FreeRTOS\Source/tasks.c **** 		{
1477:..\FreeRTOS\Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1478:..\FreeRTOS\Source/tasks.c **** 		}
1479:..\FreeRTOS\Source/tasks.c **** 		else
1480:..\FreeRTOS\Source/tasks.c **** 		{
1481:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1482:..\FreeRTOS\Source/tasks.c **** 		}
1483:..\FreeRTOS\Source/tasks.c **** 
1484:..\FreeRTOS\Source/tasks.c **** 		taskENTER_CRITICAL();
1485:..\FreeRTOS\Source/tasks.c **** 		{
1486:..\FreeRTOS\Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1487:..\FreeRTOS\Source/tasks.c **** 			task that is being changed. */
1488:..\FreeRTOS\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1489:..\FreeRTOS\Source/tasks.c **** 
1490:..\FreeRTOS\Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1491:..\FreeRTOS\Source/tasks.c **** 
1492:..\FreeRTOS\Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1493:..\FreeRTOS\Source/tasks.c **** 			{
1494:..\FreeRTOS\Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1495:..\FreeRTOS\Source/tasks.c **** 			}
1496:..\FreeRTOS\Source/tasks.c **** 			#else
1497:..\FreeRTOS\Source/tasks.c **** 			{
1498:..\FreeRTOS\Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1499:..\FreeRTOS\Source/tasks.c **** 			}
1500:..\FreeRTOS\Source/tasks.c **** 			#endif
1501:..\FreeRTOS\Source/tasks.c **** 
1502:..\FreeRTOS\Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1503:..\FreeRTOS\Source/tasks.c **** 			{
1504:..\FreeRTOS\Source/tasks.c **** 				/* The priority change may have readied a task of higher
1505:..\FreeRTOS\Source/tasks.c **** 				priority than the calling task. */
1506:..\FreeRTOS\Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1507:..\FreeRTOS\Source/tasks.c **** 				{
1508:..\FreeRTOS\Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1509:..\FreeRTOS\Source/tasks.c **** 					{
1510:..\FreeRTOS\Source/tasks.c **** 						/* The priority of a task other than the currently
1511:..\FreeRTOS\Source/tasks.c **** 						running task is being raised.  Is the priority being
1512:..\FreeRTOS\Source/tasks.c **** 						raised above that of the running task? */
1513:..\FreeRTOS\Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 28


1514:..\FreeRTOS\Source/tasks.c **** 						{
1515:..\FreeRTOS\Source/tasks.c **** 							xYieldRequired = pdTRUE;
1516:..\FreeRTOS\Source/tasks.c **** 						}
1517:..\FreeRTOS\Source/tasks.c **** 						else
1518:..\FreeRTOS\Source/tasks.c **** 						{
1519:..\FreeRTOS\Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1520:..\FreeRTOS\Source/tasks.c **** 						}
1521:..\FreeRTOS\Source/tasks.c **** 					}
1522:..\FreeRTOS\Source/tasks.c **** 					else
1523:..\FreeRTOS\Source/tasks.c **** 					{
1524:..\FreeRTOS\Source/tasks.c **** 						/* The priority of the running task is being raised,
1525:..\FreeRTOS\Source/tasks.c **** 						but the running task must already be the highest
1526:..\FreeRTOS\Source/tasks.c **** 						priority task able to run so no yield is required. */
1527:..\FreeRTOS\Source/tasks.c **** 					}
1528:..\FreeRTOS\Source/tasks.c **** 				}
1529:..\FreeRTOS\Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1530:..\FreeRTOS\Source/tasks.c **** 				{
1531:..\FreeRTOS\Source/tasks.c **** 					/* Setting the priority of the running task down means
1532:..\FreeRTOS\Source/tasks.c **** 					there may now be another task of higher priority that
1533:..\FreeRTOS\Source/tasks.c **** 					is ready to execute. */
1534:..\FreeRTOS\Source/tasks.c **** 					xYieldRequired = pdTRUE;
1535:..\FreeRTOS\Source/tasks.c **** 				}
1536:..\FreeRTOS\Source/tasks.c **** 				else
1537:..\FreeRTOS\Source/tasks.c **** 				{
1538:..\FreeRTOS\Source/tasks.c **** 					/* Setting the priority of any other task down does not
1539:..\FreeRTOS\Source/tasks.c **** 					require a yield as the running task must be above the
1540:..\FreeRTOS\Source/tasks.c **** 					new priority of the task being modified. */
1541:..\FreeRTOS\Source/tasks.c **** 				}
1542:..\FreeRTOS\Source/tasks.c **** 
1543:..\FreeRTOS\Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1544:..\FreeRTOS\Source/tasks.c **** 				before its uxPriority member is changed so the
1545:..\FreeRTOS\Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1546:..\FreeRTOS\Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1547:..\FreeRTOS\Source/tasks.c **** 
1548:..\FreeRTOS\Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1549:..\FreeRTOS\Source/tasks.c **** 				{
1550:..\FreeRTOS\Source/tasks.c **** 					/* Only change the priority being used if the task is not
1551:..\FreeRTOS\Source/tasks.c **** 					currently using an inherited priority. */
1552:..\FreeRTOS\Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1553:..\FreeRTOS\Source/tasks.c **** 					{
1554:..\FreeRTOS\Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1555:..\FreeRTOS\Source/tasks.c **** 					}
1556:..\FreeRTOS\Source/tasks.c **** 					else
1557:..\FreeRTOS\Source/tasks.c **** 					{
1558:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1559:..\FreeRTOS\Source/tasks.c **** 					}
1560:..\FreeRTOS\Source/tasks.c **** 
1561:..\FreeRTOS\Source/tasks.c **** 					/* The base priority gets set whatever. */
1562:..\FreeRTOS\Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1563:..\FreeRTOS\Source/tasks.c **** 				}
1564:..\FreeRTOS\Source/tasks.c **** 				#else
1565:..\FreeRTOS\Source/tasks.c **** 				{
1566:..\FreeRTOS\Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1567:..\FreeRTOS\Source/tasks.c **** 				}
1568:..\FreeRTOS\Source/tasks.c **** 				#endif
1569:..\FreeRTOS\Source/tasks.c **** 
1570:..\FreeRTOS\Source/tasks.c **** 				/* Only reset the event list item value if the value is not
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 29


1571:..\FreeRTOS\Source/tasks.c **** 				being used for anything else. */
1572:..\FreeRTOS\Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1573:..\FreeRTOS\Source/tasks.c **** 				{
1574:..\FreeRTOS\Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1575:..\FreeRTOS\Source/tasks.c **** 				}
1576:..\FreeRTOS\Source/tasks.c **** 				else
1577:..\FreeRTOS\Source/tasks.c **** 				{
1578:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1579:..\FreeRTOS\Source/tasks.c **** 				}
1580:..\FreeRTOS\Source/tasks.c **** 
1581:..\FreeRTOS\Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1582:..\FreeRTOS\Source/tasks.c **** 				nothing more than change its priority variable. However, if
1583:..\FreeRTOS\Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1584:..\FreeRTOS\Source/tasks.c **** 				in the list appropriate to its new priority. */
1585:..\FreeRTOS\Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1586:..\FreeRTOS\Source/tasks.c **** 				{
1587:..\FreeRTOS\Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1588:..\FreeRTOS\Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1589:..\FreeRTOS\Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1590:..\FreeRTOS\Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1591:..\FreeRTOS\Source/tasks.c **** 					{
1592:..\FreeRTOS\Source/tasks.c **** 						/* It is known that the task is in its ready list so
1593:..\FreeRTOS\Source/tasks.c **** 						there is no need to check again and the port level
1594:..\FreeRTOS\Source/tasks.c **** 						reset macro can be called directly. */
1595:..\FreeRTOS\Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1596:..\FreeRTOS\Source/tasks.c **** 					}
1597:..\FreeRTOS\Source/tasks.c **** 					else
1598:..\FreeRTOS\Source/tasks.c **** 					{
1599:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1600:..\FreeRTOS\Source/tasks.c **** 					}
1601:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1602:..\FreeRTOS\Source/tasks.c **** 				}
1603:..\FreeRTOS\Source/tasks.c **** 				else
1604:..\FreeRTOS\Source/tasks.c **** 				{
1605:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1606:..\FreeRTOS\Source/tasks.c **** 				}
1607:..\FreeRTOS\Source/tasks.c **** 
1608:..\FreeRTOS\Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1609:..\FreeRTOS\Source/tasks.c **** 				{
1610:..\FreeRTOS\Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1611:..\FreeRTOS\Source/tasks.c **** 				}
1612:..\FreeRTOS\Source/tasks.c **** 				else
1613:..\FreeRTOS\Source/tasks.c **** 				{
1614:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1615:..\FreeRTOS\Source/tasks.c **** 				}
1616:..\FreeRTOS\Source/tasks.c **** 
1617:..\FreeRTOS\Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1618:..\FreeRTOS\Source/tasks.c **** 				optimised task selection is not being used. */
1619:..\FreeRTOS\Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1620:..\FreeRTOS\Source/tasks.c **** 			}
1621:..\FreeRTOS\Source/tasks.c **** 		}
1622:..\FreeRTOS\Source/tasks.c **** 		taskEXIT_CRITICAL();
1623:..\FreeRTOS\Source/tasks.c **** 	}
1624:..\FreeRTOS\Source/tasks.c **** 
1625:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1626:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1627:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 30


1628:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1629:..\FreeRTOS\Source/tasks.c **** 
1630:..\FreeRTOS\Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1631:..\FreeRTOS\Source/tasks.c **** 	{
1632:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
1633:..\FreeRTOS\Source/tasks.c **** 
1634:..\FreeRTOS\Source/tasks.c **** 		taskENTER_CRITICAL();
1635:..\FreeRTOS\Source/tasks.c **** 		{
1636:..\FreeRTOS\Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1637:..\FreeRTOS\Source/tasks.c **** 			being suspended. */
1638:..\FreeRTOS\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1639:..\FreeRTOS\Source/tasks.c **** 
1640:..\FreeRTOS\Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1641:..\FreeRTOS\Source/tasks.c **** 
1642:..\FreeRTOS\Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1643:..\FreeRTOS\Source/tasks.c **** 			suspended list. */
1644:..\FreeRTOS\Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1645:..\FreeRTOS\Source/tasks.c **** 			{
1646:..\FreeRTOS\Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1647:..\FreeRTOS\Source/tasks.c **** 			}
1648:..\FreeRTOS\Source/tasks.c **** 			else
1649:..\FreeRTOS\Source/tasks.c **** 			{
1650:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1651:..\FreeRTOS\Source/tasks.c **** 			}
1652:..\FreeRTOS\Source/tasks.c **** 
1653:..\FreeRTOS\Source/tasks.c **** 			/* Is the task waiting on an event also? */
1654:..\FreeRTOS\Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1655:..\FreeRTOS\Source/tasks.c **** 			{
1656:..\FreeRTOS\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1657:..\FreeRTOS\Source/tasks.c **** 			}
1658:..\FreeRTOS\Source/tasks.c **** 			else
1659:..\FreeRTOS\Source/tasks.c **** 			{
1660:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1661:..\FreeRTOS\Source/tasks.c **** 			}
1662:..\FreeRTOS\Source/tasks.c **** 
1663:..\FreeRTOS\Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1664:..\FreeRTOS\Source/tasks.c **** 
1665:..\FreeRTOS\Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1666:..\FreeRTOS\Source/tasks.c **** 			{
1667:..\FreeRTOS\Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1668:..\FreeRTOS\Source/tasks.c **** 				{
1669:..\FreeRTOS\Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1670:..\FreeRTOS\Source/tasks.c **** 					now suspended, so no notification was received. */
1671:..\FreeRTOS\Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1672:..\FreeRTOS\Source/tasks.c **** 				}
1673:..\FreeRTOS\Source/tasks.c **** 			}
1674:..\FreeRTOS\Source/tasks.c **** 			#endif
1675:..\FreeRTOS\Source/tasks.c **** 		}
1676:..\FreeRTOS\Source/tasks.c **** 		taskEXIT_CRITICAL();
1677:..\FreeRTOS\Source/tasks.c **** 
1678:..\FreeRTOS\Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1679:..\FreeRTOS\Source/tasks.c **** 		{
1680:..\FreeRTOS\Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1681:..\FreeRTOS\Source/tasks.c **** 			task that is now in the Suspended state. */
1682:..\FreeRTOS\Source/tasks.c **** 			taskENTER_CRITICAL();
1683:..\FreeRTOS\Source/tasks.c **** 			{
1684:..\FreeRTOS\Source/tasks.c **** 				prvResetNextTaskUnblockTime();
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 31


1685:..\FreeRTOS\Source/tasks.c **** 			}
1686:..\FreeRTOS\Source/tasks.c **** 			taskEXIT_CRITICAL();
1687:..\FreeRTOS\Source/tasks.c **** 		}
1688:..\FreeRTOS\Source/tasks.c **** 		else
1689:..\FreeRTOS\Source/tasks.c **** 		{
1690:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1691:..\FreeRTOS\Source/tasks.c **** 		}
1692:..\FreeRTOS\Source/tasks.c **** 
1693:..\FreeRTOS\Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1694:..\FreeRTOS\Source/tasks.c **** 		{
1695:..\FreeRTOS\Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1696:..\FreeRTOS\Source/tasks.c **** 			{
1697:..\FreeRTOS\Source/tasks.c **** 				/* The current task has just been suspended. */
1698:..\FreeRTOS\Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1699:..\FreeRTOS\Source/tasks.c **** 				portYIELD_WITHIN_API();
1700:..\FreeRTOS\Source/tasks.c **** 			}
1701:..\FreeRTOS\Source/tasks.c **** 			else
1702:..\FreeRTOS\Source/tasks.c **** 			{
1703:..\FreeRTOS\Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1704:..\FreeRTOS\Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1705:..\FreeRTOS\Source/tasks.c **** 				must be adjusted to point to a different task. */
1706:..\FreeRTOS\Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1707:..\FreeRTOS\Source/tasks.c **** 				{
1708:..\FreeRTOS\Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1709:..\FreeRTOS\Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1710:..\FreeRTOS\Source/tasks.c **** 					be set to point to it no matter what its relative priority
1711:..\FreeRTOS\Source/tasks.c **** 					is. */
1712:..\FreeRTOS\Source/tasks.c **** 					pxCurrentTCB = NULL;
1713:..\FreeRTOS\Source/tasks.c **** 				}
1714:..\FreeRTOS\Source/tasks.c **** 				else
1715:..\FreeRTOS\Source/tasks.c **** 				{
1716:..\FreeRTOS\Source/tasks.c **** 					vTaskSwitchContext();
1717:..\FreeRTOS\Source/tasks.c **** 				}
1718:..\FreeRTOS\Source/tasks.c **** 			}
1719:..\FreeRTOS\Source/tasks.c **** 		}
1720:..\FreeRTOS\Source/tasks.c **** 		else
1721:..\FreeRTOS\Source/tasks.c **** 		{
1722:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1723:..\FreeRTOS\Source/tasks.c **** 		}
1724:..\FreeRTOS\Source/tasks.c **** 	}
1725:..\FreeRTOS\Source/tasks.c **** 
1726:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1727:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1728:..\FreeRTOS\Source/tasks.c **** 
1729:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1730:..\FreeRTOS\Source/tasks.c **** 
1731:..\FreeRTOS\Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1732:..\FreeRTOS\Source/tasks.c **** 	{
  27              		.loc 1 1732 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1733:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1734:..\FreeRTOS\Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1735:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 32


1736:..\FreeRTOS\Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1737:..\FreeRTOS\Source/tasks.c **** 		section. */
1738:..\FreeRTOS\Source/tasks.c **** 
1739:..\FreeRTOS\Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1740:..\FreeRTOS\Source/tasks.c **** 		configASSERT( xTask );
1741:..\FreeRTOS\Source/tasks.c **** 
1742:..\FreeRTOS\Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1743:..\FreeRTOS\Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  33              		.loc 1 1743 0
  34 0000 4269     		ldr	r2, [r0, #20]
  35 0002 0B4B     		ldr	r3, .L10
  36 0004 9A42     		cmp	r2, r3
  37 0006 01D1     		bne	.L5
  38 0008 0123     		movs	r3, #1
  39 000a 00E0     		b	.L2
  40              	.L5:
  41 000c 0023     		movs	r3, #0
  42              	.L2:
  43              		.loc 1 1743 0 is_stmt 0 discriminator 4
  44 000e 43B1     		cbz	r3, .L6
1744:..\FreeRTOS\Source/tasks.c **** 		{
1745:..\FreeRTOS\Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1746:..\FreeRTOS\Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  45              		.loc 1 1746 0 is_stmt 1
  46 0010 826A     		ldr	r2, [r0, #40]
  47 0012 0849     		ldr	r1, .L10+4
  48 0014 8A42     		cmp	r2, r1
  49 0016 06D0     		beq	.L7
1747:..\FreeRTOS\Source/tasks.c **** 			{
1748:..\FreeRTOS\Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1749:..\FreeRTOS\Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1750:..\FreeRTOS\Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  50              		.loc 1 1750 0
  51 0018 02B1     		cbz	r2, .L4
  52 001a 0023     		movs	r3, #0
  53              	.L4:
  54              		.loc 1 1750 0 is_stmt 0 discriminator 4
  55 001c 2BB9     		cbnz	r3, .L9
1733:..\FreeRTOS\Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  56              		.loc 1 1733 0 is_stmt 1
  57 001e 0020     		movs	r0, #0
  58              	.LVL1:
  59 0020 7047     		bx	lr
  60              	.LVL2:
  61              	.L6:
  62 0022 0020     		movs	r0, #0
  63              	.LVL3:
  64 0024 7047     		bx	lr
  65              	.LVL4:
  66              	.L7:
  67 0026 0020     		movs	r0, #0
  68              	.LVL5:
  69 0028 7047     		bx	lr
  70              	.LVL6:
  71              	.L9:
1751:..\FreeRTOS\Source/tasks.c **** 				{
1752:..\FreeRTOS\Source/tasks.c **** 					xReturn = pdTRUE;
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 33


  72              		.loc 1 1752 0
  73 002a 0120     		movs	r0, #1
  74              	.LVL7:
1753:..\FreeRTOS\Source/tasks.c **** 				}
1754:..\FreeRTOS\Source/tasks.c **** 				else
1755:..\FreeRTOS\Source/tasks.c **** 				{
1756:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1757:..\FreeRTOS\Source/tasks.c **** 				}
1758:..\FreeRTOS\Source/tasks.c **** 			}
1759:..\FreeRTOS\Source/tasks.c **** 			else
1760:..\FreeRTOS\Source/tasks.c **** 			{
1761:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1762:..\FreeRTOS\Source/tasks.c **** 			}
1763:..\FreeRTOS\Source/tasks.c **** 		}
1764:..\FreeRTOS\Source/tasks.c **** 		else
1765:..\FreeRTOS\Source/tasks.c **** 		{
1766:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1767:..\FreeRTOS\Source/tasks.c **** 		}
1768:..\FreeRTOS\Source/tasks.c **** 
1769:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
1770:..\FreeRTOS\Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  75              		.loc 1 1770 0
  76 002c 7047     		bx	lr
  77              	.L11:
  78 002e 00BF     		.align	2
  79              	.L10:
  80 0030 00000000 		.word	.LANCHOR0
  81 0034 14000000 		.word	.LANCHOR0+20
  82              		.cfi_endproc
  83              	.LFE80:
  84              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
  85              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
  86              		.align	2
  87              		.thumb
  88              		.thumb_func
  89              		.type	prvTaskCheckFreeStackSpace, %function
  90              	prvTaskCheckFreeStackSpace:
  91              	.LFB109:
1771:..\FreeRTOS\Source/tasks.c **** 
1772:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1773:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1774:..\FreeRTOS\Source/tasks.c **** 
1775:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1776:..\FreeRTOS\Source/tasks.c **** 
1777:..\FreeRTOS\Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1778:..\FreeRTOS\Source/tasks.c **** 	{
1779:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1780:..\FreeRTOS\Source/tasks.c **** 
1781:..\FreeRTOS\Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1782:..\FreeRTOS\Source/tasks.c **** 		configASSERT( xTaskToResume );
1783:..\FreeRTOS\Source/tasks.c **** 
1784:..\FreeRTOS\Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1785:..\FreeRTOS\Source/tasks.c **** 		currently executing task. */
1786:..\FreeRTOS\Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1787:..\FreeRTOS\Source/tasks.c **** 		{
1788:..\FreeRTOS\Source/tasks.c **** 			taskENTER_CRITICAL();
1789:..\FreeRTOS\Source/tasks.c **** 			{
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 34


1790:..\FreeRTOS\Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1791:..\FreeRTOS\Source/tasks.c **** 				{
1792:..\FreeRTOS\Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1793:..\FreeRTOS\Source/tasks.c **** 
1794:..\FreeRTOS\Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1795:..\FreeRTOS\Source/tasks.c **** 					suspended because this is inside a critical section. */
1796:..\FreeRTOS\Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1797:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1798:..\FreeRTOS\Source/tasks.c **** 
1799:..\FreeRTOS\Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1800:..\FreeRTOS\Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1801:..\FreeRTOS\Source/tasks.c **** 					{
1802:..\FreeRTOS\Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1803:..\FreeRTOS\Source/tasks.c **** 						but will leave the lists in the correct state for the
1804:..\FreeRTOS\Source/tasks.c **** 						next yield. */
1805:..\FreeRTOS\Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1806:..\FreeRTOS\Source/tasks.c **** 					}
1807:..\FreeRTOS\Source/tasks.c **** 					else
1808:..\FreeRTOS\Source/tasks.c **** 					{
1809:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1810:..\FreeRTOS\Source/tasks.c **** 					}
1811:..\FreeRTOS\Source/tasks.c **** 				}
1812:..\FreeRTOS\Source/tasks.c **** 				else
1813:..\FreeRTOS\Source/tasks.c **** 				{
1814:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1815:..\FreeRTOS\Source/tasks.c **** 				}
1816:..\FreeRTOS\Source/tasks.c **** 			}
1817:..\FreeRTOS\Source/tasks.c **** 			taskEXIT_CRITICAL();
1818:..\FreeRTOS\Source/tasks.c **** 		}
1819:..\FreeRTOS\Source/tasks.c **** 		else
1820:..\FreeRTOS\Source/tasks.c **** 		{
1821:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1822:..\FreeRTOS\Source/tasks.c **** 		}
1823:..\FreeRTOS\Source/tasks.c **** 	}
1824:..\FreeRTOS\Source/tasks.c **** 
1825:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1826:..\FreeRTOS\Source/tasks.c **** 
1827:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1828:..\FreeRTOS\Source/tasks.c **** 
1829:..\FreeRTOS\Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1830:..\FreeRTOS\Source/tasks.c **** 
1831:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1832:..\FreeRTOS\Source/tasks.c **** 	{
1833:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1834:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1835:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1836:..\FreeRTOS\Source/tasks.c **** 
1837:..\FreeRTOS\Source/tasks.c **** 		configASSERT( xTaskToResume );
1838:..\FreeRTOS\Source/tasks.c **** 
1839:..\FreeRTOS\Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1840:..\FreeRTOS\Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1841:..\FreeRTOS\Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1842:..\FreeRTOS\Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1843:..\FreeRTOS\Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1844:..\FreeRTOS\Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1845:..\FreeRTOS\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1846:..\FreeRTOS\Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 35


1847:..\FreeRTOS\Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1848:..\FreeRTOS\Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1849:..\FreeRTOS\Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1850:..\FreeRTOS\Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1851:..\FreeRTOS\Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1852:..\FreeRTOS\Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1853:..\FreeRTOS\Source/tasks.c **** 		provided on the following link:
1854:..\FreeRTOS\Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1855:..\FreeRTOS\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1856:..\FreeRTOS\Source/tasks.c **** 
1857:..\FreeRTOS\Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1858:..\FreeRTOS\Source/tasks.c **** 		{
1859:..\FreeRTOS\Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1860:..\FreeRTOS\Source/tasks.c **** 			{
1861:..\FreeRTOS\Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1862:..\FreeRTOS\Source/tasks.c **** 
1863:..\FreeRTOS\Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1864:..\FreeRTOS\Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1865:..\FreeRTOS\Source/tasks.c **** 				{
1866:..\FreeRTOS\Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1867:..\FreeRTOS\Source/tasks.c **** 					suspended list to the ready list directly. */
1868:..\FreeRTOS\Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1869:..\FreeRTOS\Source/tasks.c **** 					{
1870:..\FreeRTOS\Source/tasks.c **** 						xYieldRequired = pdTRUE;
1871:..\FreeRTOS\Source/tasks.c **** 					}
1872:..\FreeRTOS\Source/tasks.c **** 					else
1873:..\FreeRTOS\Source/tasks.c **** 					{
1874:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1875:..\FreeRTOS\Source/tasks.c **** 					}
1876:..\FreeRTOS\Source/tasks.c **** 
1877:..\FreeRTOS\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1878:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1879:..\FreeRTOS\Source/tasks.c **** 				}
1880:..\FreeRTOS\Source/tasks.c **** 				else
1881:..\FreeRTOS\Source/tasks.c **** 				{
1882:..\FreeRTOS\Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1883:..\FreeRTOS\Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1884:..\FreeRTOS\Source/tasks.c **** 					unsuspended. */
1885:..\FreeRTOS\Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1886:..\FreeRTOS\Source/tasks.c **** 				}
1887:..\FreeRTOS\Source/tasks.c **** 			}
1888:..\FreeRTOS\Source/tasks.c **** 			else
1889:..\FreeRTOS\Source/tasks.c **** 			{
1890:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1891:..\FreeRTOS\Source/tasks.c **** 			}
1892:..\FreeRTOS\Source/tasks.c **** 		}
1893:..\FreeRTOS\Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1894:..\FreeRTOS\Source/tasks.c **** 
1895:..\FreeRTOS\Source/tasks.c **** 		return xYieldRequired;
1896:..\FreeRTOS\Source/tasks.c **** 	}
1897:..\FreeRTOS\Source/tasks.c **** 
1898:..\FreeRTOS\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1899:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1900:..\FreeRTOS\Source/tasks.c **** 
1901:..\FreeRTOS\Source/tasks.c **** void vTaskStartScheduler( void )
1902:..\FreeRTOS\Source/tasks.c **** {
1903:..\FreeRTOS\Source/tasks.c **** BaseType_t xReturn;
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 36


1904:..\FreeRTOS\Source/tasks.c **** 
1905:..\FreeRTOS\Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1906:..\FreeRTOS\Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1907:..\FreeRTOS\Source/tasks.c **** 	{
1908:..\FreeRTOS\Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1909:..\FreeRTOS\Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1910:..\FreeRTOS\Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1911:..\FreeRTOS\Source/tasks.c **** 
1912:..\FreeRTOS\Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1913:..\FreeRTOS\Source/tasks.c **** 		address of the RAM then create the idle task. */
1914:..\FreeRTOS\Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1915:..\FreeRTOS\Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1916:..\FreeRTOS\Source/tasks.c **** 												configIDLE_TASK_NAME,
1917:..\FreeRTOS\Source/tasks.c **** 												ulIdleTaskStackSize,
1918:..\FreeRTOS\Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1919:..\FreeRTOS\Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1920:..\FreeRTOS\Source/tasks.c **** 												pxIdleTaskStackBuffer,
1921:..\FreeRTOS\Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1922:..\FreeRTOS\Source/tasks.c **** 
1923:..\FreeRTOS\Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1924:..\FreeRTOS\Source/tasks.c **** 		{
1925:..\FreeRTOS\Source/tasks.c **** 			xReturn = pdPASS;
1926:..\FreeRTOS\Source/tasks.c **** 		}
1927:..\FreeRTOS\Source/tasks.c **** 		else
1928:..\FreeRTOS\Source/tasks.c **** 		{
1929:..\FreeRTOS\Source/tasks.c **** 			xReturn = pdFAIL;
1930:..\FreeRTOS\Source/tasks.c **** 		}
1931:..\FreeRTOS\Source/tasks.c **** 	}
1932:..\FreeRTOS\Source/tasks.c **** 	#else
1933:..\FreeRTOS\Source/tasks.c **** 	{
1934:..\FreeRTOS\Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1935:..\FreeRTOS\Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1936:..\FreeRTOS\Source/tasks.c **** 								configIDLE_TASK_NAME,
1937:..\FreeRTOS\Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
1938:..\FreeRTOS\Source/tasks.c **** 								( void * ) NULL,
1939:..\FreeRTOS\Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1940:..\FreeRTOS\Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1941:..\FreeRTOS\Source/tasks.c **** 	}
1942:..\FreeRTOS\Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1943:..\FreeRTOS\Source/tasks.c **** 
1944:..\FreeRTOS\Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1945:..\FreeRTOS\Source/tasks.c **** 	{
1946:..\FreeRTOS\Source/tasks.c **** 		if( xReturn == pdPASS )
1947:..\FreeRTOS\Source/tasks.c **** 		{
1948:..\FreeRTOS\Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1949:..\FreeRTOS\Source/tasks.c **** 		}
1950:..\FreeRTOS\Source/tasks.c **** 		else
1951:..\FreeRTOS\Source/tasks.c **** 		{
1952:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1953:..\FreeRTOS\Source/tasks.c **** 		}
1954:..\FreeRTOS\Source/tasks.c **** 	}
1955:..\FreeRTOS\Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1956:..\FreeRTOS\Source/tasks.c **** 
1957:..\FreeRTOS\Source/tasks.c **** 	if( xReturn == pdPASS )
1958:..\FreeRTOS\Source/tasks.c **** 	{
1959:..\FreeRTOS\Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
1960:..\FreeRTOS\Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 37


1961:..\FreeRTOS\Source/tasks.c **** 		the only macro called by the function. */
1962:..\FreeRTOS\Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
1963:..\FreeRTOS\Source/tasks.c **** 		{
1964:..\FreeRTOS\Source/tasks.c **** 			freertos_tasks_c_additions_init();
1965:..\FreeRTOS\Source/tasks.c **** 		}
1966:..\FreeRTOS\Source/tasks.c **** 		#endif
1967:..\FreeRTOS\Source/tasks.c **** 
1968:..\FreeRTOS\Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1969:..\FreeRTOS\Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1970:..\FreeRTOS\Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1971:..\FreeRTOS\Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1972:..\FreeRTOS\Source/tasks.c **** 		starts to run. */
1973:..\FreeRTOS\Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1974:..\FreeRTOS\Source/tasks.c **** 
1975:..\FreeRTOS\Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1976:..\FreeRTOS\Source/tasks.c **** 		{
1977:..\FreeRTOS\Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1978:..\FreeRTOS\Source/tasks.c **** 			structure specific to the task that will run first. */
1979:..\FreeRTOS\Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1980:..\FreeRTOS\Source/tasks.c **** 		}
1981:..\FreeRTOS\Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1982:..\FreeRTOS\Source/tasks.c **** 
1983:..\FreeRTOS\Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1984:..\FreeRTOS\Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1985:..\FreeRTOS\Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1986:..\FreeRTOS\Source/tasks.c **** 
1987:..\FreeRTOS\Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1988:..\FreeRTOS\Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1989:..\FreeRTOS\Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
1990:..\FreeRTOS\Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
1991:..\FreeRTOS\Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
1992:..\FreeRTOS\Source/tasks.c **** 		FreeRTOSConfig.h file. */
1993:..\FreeRTOS\Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1994:..\FreeRTOS\Source/tasks.c **** 
1995:..\FreeRTOS\Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1996:..\FreeRTOS\Source/tasks.c **** 		portable interface. */
1997:..\FreeRTOS\Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1998:..\FreeRTOS\Source/tasks.c **** 		{
1999:..\FreeRTOS\Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2000:..\FreeRTOS\Source/tasks.c **** 			function will not return. */
2001:..\FreeRTOS\Source/tasks.c **** 		}
2002:..\FreeRTOS\Source/tasks.c **** 		else
2003:..\FreeRTOS\Source/tasks.c **** 		{
2004:..\FreeRTOS\Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2005:..\FreeRTOS\Source/tasks.c **** 		}
2006:..\FreeRTOS\Source/tasks.c **** 	}
2007:..\FreeRTOS\Source/tasks.c **** 	else
2008:..\FreeRTOS\Source/tasks.c **** 	{
2009:..\FreeRTOS\Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2010:..\FreeRTOS\Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2011:..\FreeRTOS\Source/tasks.c **** 		or the timer task. */
2012:..\FreeRTOS\Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2013:..\FreeRTOS\Source/tasks.c **** 	}
2014:..\FreeRTOS\Source/tasks.c **** 
2015:..\FreeRTOS\Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2016:..\FreeRTOS\Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2017:..\FreeRTOS\Source/tasks.c **** 	( void ) xIdleTaskHandle;
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 38


2018:..\FreeRTOS\Source/tasks.c **** }
2019:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2020:..\FreeRTOS\Source/tasks.c **** 
2021:..\FreeRTOS\Source/tasks.c **** void vTaskEndScheduler( void )
2022:..\FreeRTOS\Source/tasks.c **** {
2023:..\FreeRTOS\Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2024:..\FreeRTOS\Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2025:..\FreeRTOS\Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2026:..\FreeRTOS\Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2027:..\FreeRTOS\Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2028:..\FreeRTOS\Source/tasks.c **** 	vPortEndScheduler();
2029:..\FreeRTOS\Source/tasks.c **** }
2030:..\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2031:..\FreeRTOS\Source/tasks.c **** 
2032:..\FreeRTOS\Source/tasks.c **** void vTaskSuspendAll( void )
2033:..\FreeRTOS\Source/tasks.c **** {
2034:..\FreeRTOS\Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2035:..\FreeRTOS\Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2036:..\FreeRTOS\Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2037:..\FreeRTOS\Source/tasks.c **** 	http://goo.gl/wu4acr */
2038:..\FreeRTOS\Source/tasks.c **** 	++uxSchedulerSuspended;
2039:..\FreeRTOS\Source/tasks.c **** }
2040:..\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2041:..\FreeRTOS\Source/tasks.c **** 
2042:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2043:..\FreeRTOS\Source/tasks.c **** 
2044:..\FreeRTOS\Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2045:..\FreeRTOS\Source/tasks.c **** 	{
2046:..\FreeRTOS\Source/tasks.c **** 	TickType_t xReturn;
2047:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2048:..\FreeRTOS\Source/tasks.c **** 
2049:..\FreeRTOS\Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2050:..\FreeRTOS\Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2051:..\FreeRTOS\Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2052:..\FreeRTOS\Source/tasks.c **** 		running. */
2053:..\FreeRTOS\Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2054:..\FreeRTOS\Source/tasks.c **** 		{
2055:..\FreeRTOS\Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2056:..\FreeRTOS\Source/tasks.c **** 			{
2057:..\FreeRTOS\Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2058:..\FreeRTOS\Source/tasks.c **** 			}
2059:..\FreeRTOS\Source/tasks.c **** 		}
2060:..\FreeRTOS\Source/tasks.c **** 		#else
2061:..\FreeRTOS\Source/tasks.c **** 		{
2062:..\FreeRTOS\Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2063:..\FreeRTOS\Source/tasks.c **** 
2064:..\FreeRTOS\Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2065:..\FreeRTOS\Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2066:..\FreeRTOS\Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2067:..\FreeRTOS\Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2068:..\FreeRTOS\Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2069:..\FreeRTOS\Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2070:..\FreeRTOS\Source/tasks.c **** 			{
2071:..\FreeRTOS\Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2072:..\FreeRTOS\Source/tasks.c **** 			}
2073:..\FreeRTOS\Source/tasks.c **** 		}
2074:..\FreeRTOS\Source/tasks.c **** 		#endif
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 39


2075:..\FreeRTOS\Source/tasks.c **** 
2076:..\FreeRTOS\Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2077:..\FreeRTOS\Source/tasks.c **** 		{
2078:..\FreeRTOS\Source/tasks.c **** 			xReturn = 0;
2079:..\FreeRTOS\Source/tasks.c **** 		}
2080:..\FreeRTOS\Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2081:..\FreeRTOS\Source/tasks.c **** 		{
2082:..\FreeRTOS\Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2083:..\FreeRTOS\Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2084:..\FreeRTOS\Source/tasks.c **** 			processed. */
2085:..\FreeRTOS\Source/tasks.c **** 			xReturn = 0;
2086:..\FreeRTOS\Source/tasks.c **** 		}
2087:..\FreeRTOS\Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2088:..\FreeRTOS\Source/tasks.c **** 		{
2089:..\FreeRTOS\Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2090:..\FreeRTOS\Source/tasks.c **** 			idle priority.  This path can only be reached if
2091:..\FreeRTOS\Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2092:..\FreeRTOS\Source/tasks.c **** 			xReturn = 0;
2093:..\FreeRTOS\Source/tasks.c **** 		}
2094:..\FreeRTOS\Source/tasks.c **** 		else
2095:..\FreeRTOS\Source/tasks.c **** 		{
2096:..\FreeRTOS\Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2097:..\FreeRTOS\Source/tasks.c **** 		}
2098:..\FreeRTOS\Source/tasks.c **** 
2099:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
2100:..\FreeRTOS\Source/tasks.c **** 	}
2101:..\FreeRTOS\Source/tasks.c **** 
2102:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2103:..\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2104:..\FreeRTOS\Source/tasks.c **** 
2105:..\FreeRTOS\Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2106:..\FreeRTOS\Source/tasks.c **** {
2107:..\FreeRTOS\Source/tasks.c **** TCB_t *pxTCB = NULL;
2108:..\FreeRTOS\Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2109:..\FreeRTOS\Source/tasks.c **** 
2110:..\FreeRTOS\Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2111:..\FreeRTOS\Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2112:..\FreeRTOS\Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2113:..\FreeRTOS\Source/tasks.c **** 
2114:..\FreeRTOS\Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2115:..\FreeRTOS\Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2116:..\FreeRTOS\Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2117:..\FreeRTOS\Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2118:..\FreeRTOS\Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2119:..\FreeRTOS\Source/tasks.c **** 	taskENTER_CRITICAL();
2120:..\FreeRTOS\Source/tasks.c **** 	{
2121:..\FreeRTOS\Source/tasks.c **** 		--uxSchedulerSuspended;
2122:..\FreeRTOS\Source/tasks.c **** 
2123:..\FreeRTOS\Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2124:..\FreeRTOS\Source/tasks.c **** 		{
2125:..\FreeRTOS\Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2126:..\FreeRTOS\Source/tasks.c **** 			{
2127:..\FreeRTOS\Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2128:..\FreeRTOS\Source/tasks.c **** 				appropriate ready list. */
2129:..\FreeRTOS\Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2130:..\FreeRTOS\Source/tasks.c **** 				{
2131:..\FreeRTOS\Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 40


2132:..\FreeRTOS\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2133:..\FreeRTOS\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2134:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2135:..\FreeRTOS\Source/tasks.c **** 
2136:..\FreeRTOS\Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2137:..\FreeRTOS\Source/tasks.c **** 					task then a yield must be performed. */
2138:..\FreeRTOS\Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2139:..\FreeRTOS\Source/tasks.c **** 					{
2140:..\FreeRTOS\Source/tasks.c **** 						xYieldPending = pdTRUE;
2141:..\FreeRTOS\Source/tasks.c **** 					}
2142:..\FreeRTOS\Source/tasks.c **** 					else
2143:..\FreeRTOS\Source/tasks.c **** 					{
2144:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2145:..\FreeRTOS\Source/tasks.c **** 					}
2146:..\FreeRTOS\Source/tasks.c **** 				}
2147:..\FreeRTOS\Source/tasks.c **** 
2148:..\FreeRTOS\Source/tasks.c **** 				if( pxTCB != NULL )
2149:..\FreeRTOS\Source/tasks.c **** 				{
2150:..\FreeRTOS\Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2151:..\FreeRTOS\Source/tasks.c **** 					which may have prevented the next unblock time from being
2152:..\FreeRTOS\Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2153:..\FreeRTOS\Source/tasks.c **** 					important for low power tickless implementations, where
2154:..\FreeRTOS\Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2155:..\FreeRTOS\Source/tasks.c **** 					state. */
2156:..\FreeRTOS\Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2157:..\FreeRTOS\Source/tasks.c **** 				}
2158:..\FreeRTOS\Source/tasks.c **** 
2159:..\FreeRTOS\Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2160:..\FreeRTOS\Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2161:..\FreeRTOS\Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2162:..\FreeRTOS\Source/tasks.c **** 				time. */
2163:..\FreeRTOS\Source/tasks.c **** 				{
2164:..\FreeRTOS\Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2165:..\FreeRTOS\Source/tasks.c **** 
2166:..\FreeRTOS\Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2167:..\FreeRTOS\Source/tasks.c **** 					{
2168:..\FreeRTOS\Source/tasks.c **** 						do
2169:..\FreeRTOS\Source/tasks.c **** 						{
2170:..\FreeRTOS\Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2171:..\FreeRTOS\Source/tasks.c **** 							{
2172:..\FreeRTOS\Source/tasks.c **** 								xYieldPending = pdTRUE;
2173:..\FreeRTOS\Source/tasks.c **** 							}
2174:..\FreeRTOS\Source/tasks.c **** 							else
2175:..\FreeRTOS\Source/tasks.c **** 							{
2176:..\FreeRTOS\Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2177:..\FreeRTOS\Source/tasks.c **** 							}
2178:..\FreeRTOS\Source/tasks.c **** 							--uxPendedCounts;
2179:..\FreeRTOS\Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2180:..\FreeRTOS\Source/tasks.c **** 
2181:..\FreeRTOS\Source/tasks.c **** 						uxPendedTicks = 0;
2182:..\FreeRTOS\Source/tasks.c **** 					}
2183:..\FreeRTOS\Source/tasks.c **** 					else
2184:..\FreeRTOS\Source/tasks.c **** 					{
2185:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2186:..\FreeRTOS\Source/tasks.c **** 					}
2187:..\FreeRTOS\Source/tasks.c **** 				}
2188:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 41


2189:..\FreeRTOS\Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2190:..\FreeRTOS\Source/tasks.c **** 				{
2191:..\FreeRTOS\Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2192:..\FreeRTOS\Source/tasks.c **** 					{
2193:..\FreeRTOS\Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2194:..\FreeRTOS\Source/tasks.c **** 					}
2195:..\FreeRTOS\Source/tasks.c **** 					#endif
2196:..\FreeRTOS\Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2197:..\FreeRTOS\Source/tasks.c **** 				}
2198:..\FreeRTOS\Source/tasks.c **** 				else
2199:..\FreeRTOS\Source/tasks.c **** 				{
2200:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2201:..\FreeRTOS\Source/tasks.c **** 				}
2202:..\FreeRTOS\Source/tasks.c **** 			}
2203:..\FreeRTOS\Source/tasks.c **** 		}
2204:..\FreeRTOS\Source/tasks.c **** 		else
2205:..\FreeRTOS\Source/tasks.c **** 		{
2206:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2207:..\FreeRTOS\Source/tasks.c **** 		}
2208:..\FreeRTOS\Source/tasks.c **** 	}
2209:..\FreeRTOS\Source/tasks.c **** 	taskEXIT_CRITICAL();
2210:..\FreeRTOS\Source/tasks.c **** 
2211:..\FreeRTOS\Source/tasks.c **** 	return xAlreadyYielded;
2212:..\FreeRTOS\Source/tasks.c **** }
2213:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2214:..\FreeRTOS\Source/tasks.c **** 
2215:..\FreeRTOS\Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2216:..\FreeRTOS\Source/tasks.c **** {
2217:..\FreeRTOS\Source/tasks.c **** TickType_t xTicks;
2218:..\FreeRTOS\Source/tasks.c **** 
2219:..\FreeRTOS\Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2220:..\FreeRTOS\Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2221:..\FreeRTOS\Source/tasks.c **** 	{
2222:..\FreeRTOS\Source/tasks.c **** 		xTicks = xTickCount;
2223:..\FreeRTOS\Source/tasks.c **** 	}
2224:..\FreeRTOS\Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2225:..\FreeRTOS\Source/tasks.c **** 
2226:..\FreeRTOS\Source/tasks.c **** 	return xTicks;
2227:..\FreeRTOS\Source/tasks.c **** }
2228:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2229:..\FreeRTOS\Source/tasks.c **** 
2230:..\FreeRTOS\Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2231:..\FreeRTOS\Source/tasks.c **** {
2232:..\FreeRTOS\Source/tasks.c **** TickType_t xReturn;
2233:..\FreeRTOS\Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2234:..\FreeRTOS\Source/tasks.c **** 
2235:..\FreeRTOS\Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2236:..\FreeRTOS\Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2237:..\FreeRTOS\Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2238:..\FreeRTOS\Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2239:..\FreeRTOS\Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2240:..\FreeRTOS\Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2241:..\FreeRTOS\Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2242:..\FreeRTOS\Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2243:..\FreeRTOS\Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2244:..\FreeRTOS\Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2245:..\FreeRTOS\Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 42


2246:..\FreeRTOS\Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2247:..\FreeRTOS\Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2248:..\FreeRTOS\Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2249:..\FreeRTOS\Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2250:..\FreeRTOS\Source/tasks.c **** 
2251:..\FreeRTOS\Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2252:..\FreeRTOS\Source/tasks.c **** 	{
2253:..\FreeRTOS\Source/tasks.c **** 		xReturn = xTickCount;
2254:..\FreeRTOS\Source/tasks.c **** 	}
2255:..\FreeRTOS\Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2256:..\FreeRTOS\Source/tasks.c **** 
2257:..\FreeRTOS\Source/tasks.c **** 	return xReturn;
2258:..\FreeRTOS\Source/tasks.c **** }
2259:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2260:..\FreeRTOS\Source/tasks.c **** 
2261:..\FreeRTOS\Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2262:..\FreeRTOS\Source/tasks.c **** {
2263:..\FreeRTOS\Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2264:..\FreeRTOS\Source/tasks.c **** 	BaseType_t. */
2265:..\FreeRTOS\Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2266:..\FreeRTOS\Source/tasks.c **** }
2267:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2268:..\FreeRTOS\Source/tasks.c **** 
2269:..\FreeRTOS\Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2270:..\FreeRTOS\Source/tasks.c **** {
2271:..\FreeRTOS\Source/tasks.c **** TCB_t *pxTCB;
2272:..\FreeRTOS\Source/tasks.c **** 
2273:..\FreeRTOS\Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2274:..\FreeRTOS\Source/tasks.c **** 	queried. */
2275:..\FreeRTOS\Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2276:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxTCB );
2277:..\FreeRTOS\Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2278:..\FreeRTOS\Source/tasks.c **** }
2279:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2280:..\FreeRTOS\Source/tasks.c **** 
2281:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2282:..\FreeRTOS\Source/tasks.c **** 
2283:..\FreeRTOS\Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2284:..\FreeRTOS\Source/tasks.c **** 	{
2285:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2286:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t x;
2287:..\FreeRTOS\Source/tasks.c **** 	char cNextChar;
2288:..\FreeRTOS\Source/tasks.c **** 
2289:..\FreeRTOS\Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2290:..\FreeRTOS\Source/tasks.c **** 
2291:..\FreeRTOS\Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2292:..\FreeRTOS\Source/tasks.c **** 		{
2293:..\FreeRTOS\Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2294:..\FreeRTOS\Source/tasks.c **** 
2295:..\FreeRTOS\Source/tasks.c **** 			do
2296:..\FreeRTOS\Source/tasks.c **** 			{
2297:..\FreeRTOS\Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2298:..\FreeRTOS\Source/tasks.c **** 
2299:..\FreeRTOS\Source/tasks.c **** 				/* Check each character in the name looking for a match or
2300:..\FreeRTOS\Source/tasks.c **** 				mismatch. */
2301:..\FreeRTOS\Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2302:..\FreeRTOS\Source/tasks.c **** 				{
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 43


2303:..\FreeRTOS\Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2304:..\FreeRTOS\Source/tasks.c **** 
2305:..\FreeRTOS\Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2306:..\FreeRTOS\Source/tasks.c **** 					{
2307:..\FreeRTOS\Source/tasks.c **** 						/* Characters didn't match. */
2308:..\FreeRTOS\Source/tasks.c **** 						break;
2309:..\FreeRTOS\Source/tasks.c **** 					}
2310:..\FreeRTOS\Source/tasks.c **** 					else if( cNextChar == 0x00 )
2311:..\FreeRTOS\Source/tasks.c **** 					{
2312:..\FreeRTOS\Source/tasks.c **** 						/* Both strings terminated, a match must have been
2313:..\FreeRTOS\Source/tasks.c **** 						found. */
2314:..\FreeRTOS\Source/tasks.c **** 						pxReturn = pxNextTCB;
2315:..\FreeRTOS\Source/tasks.c **** 						break;
2316:..\FreeRTOS\Source/tasks.c **** 					}
2317:..\FreeRTOS\Source/tasks.c **** 					else
2318:..\FreeRTOS\Source/tasks.c **** 					{
2319:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2320:..\FreeRTOS\Source/tasks.c **** 					}
2321:..\FreeRTOS\Source/tasks.c **** 				}
2322:..\FreeRTOS\Source/tasks.c **** 
2323:..\FreeRTOS\Source/tasks.c **** 				if( pxReturn != NULL )
2324:..\FreeRTOS\Source/tasks.c **** 				{
2325:..\FreeRTOS\Source/tasks.c **** 					/* The handle has been found. */
2326:..\FreeRTOS\Source/tasks.c **** 					break;
2327:..\FreeRTOS\Source/tasks.c **** 				}
2328:..\FreeRTOS\Source/tasks.c **** 
2329:..\FreeRTOS\Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2330:..\FreeRTOS\Source/tasks.c **** 		}
2331:..\FreeRTOS\Source/tasks.c **** 		else
2332:..\FreeRTOS\Source/tasks.c **** 		{
2333:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2334:..\FreeRTOS\Source/tasks.c **** 		}
2335:..\FreeRTOS\Source/tasks.c **** 
2336:..\FreeRTOS\Source/tasks.c **** 		return pxReturn;
2337:..\FreeRTOS\Source/tasks.c **** 	}
2338:..\FreeRTOS\Source/tasks.c **** 
2339:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2340:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2341:..\FreeRTOS\Source/tasks.c **** 
2342:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2343:..\FreeRTOS\Source/tasks.c **** 
2344:..\FreeRTOS\Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2345:..\FreeRTOS\Source/tasks.c **** 	{
2346:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2347:..\FreeRTOS\Source/tasks.c **** 	TCB_t* pxTCB;
2348:..\FreeRTOS\Source/tasks.c **** 
2349:..\FreeRTOS\Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2350:..\FreeRTOS\Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2351:..\FreeRTOS\Source/tasks.c **** 
2352:..\FreeRTOS\Source/tasks.c **** 		vTaskSuspendAll();
2353:..\FreeRTOS\Source/tasks.c **** 		{
2354:..\FreeRTOS\Source/tasks.c **** 			/* Search the ready lists. */
2355:..\FreeRTOS\Source/tasks.c **** 			do
2356:..\FreeRTOS\Source/tasks.c **** 			{
2357:..\FreeRTOS\Source/tasks.c **** 				uxQueue--;
2358:..\FreeRTOS\Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2359:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 44


2360:..\FreeRTOS\Source/tasks.c **** 				if( pxTCB != NULL )
2361:..\FreeRTOS\Source/tasks.c **** 				{
2362:..\FreeRTOS\Source/tasks.c **** 					/* Found the handle. */
2363:..\FreeRTOS\Source/tasks.c **** 					break;
2364:..\FreeRTOS\Source/tasks.c **** 				}
2365:..\FreeRTOS\Source/tasks.c **** 
2366:..\FreeRTOS\Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2367:..\FreeRTOS\Source/tasks.c **** 
2368:..\FreeRTOS\Source/tasks.c **** 			/* Search the delayed lists. */
2369:..\FreeRTOS\Source/tasks.c **** 			if( pxTCB == NULL )
2370:..\FreeRTOS\Source/tasks.c **** 			{
2371:..\FreeRTOS\Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2372:..\FreeRTOS\Source/tasks.c **** 			}
2373:..\FreeRTOS\Source/tasks.c **** 
2374:..\FreeRTOS\Source/tasks.c **** 			if( pxTCB == NULL )
2375:..\FreeRTOS\Source/tasks.c **** 			{
2376:..\FreeRTOS\Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2377:..\FreeRTOS\Source/tasks.c **** 			}
2378:..\FreeRTOS\Source/tasks.c **** 
2379:..\FreeRTOS\Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2380:..\FreeRTOS\Source/tasks.c **** 			{
2381:..\FreeRTOS\Source/tasks.c **** 				if( pxTCB == NULL )
2382:..\FreeRTOS\Source/tasks.c **** 				{
2383:..\FreeRTOS\Source/tasks.c **** 					/* Search the suspended list. */
2384:..\FreeRTOS\Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2385:..\FreeRTOS\Source/tasks.c **** 				}
2386:..\FreeRTOS\Source/tasks.c **** 			}
2387:..\FreeRTOS\Source/tasks.c **** 			#endif
2388:..\FreeRTOS\Source/tasks.c **** 
2389:..\FreeRTOS\Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2390:..\FreeRTOS\Source/tasks.c **** 			{
2391:..\FreeRTOS\Source/tasks.c **** 				if( pxTCB == NULL )
2392:..\FreeRTOS\Source/tasks.c **** 				{
2393:..\FreeRTOS\Source/tasks.c **** 					/* Search the deleted list. */
2394:..\FreeRTOS\Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2395:..\FreeRTOS\Source/tasks.c **** 				}
2396:..\FreeRTOS\Source/tasks.c **** 			}
2397:..\FreeRTOS\Source/tasks.c **** 			#endif
2398:..\FreeRTOS\Source/tasks.c **** 		}
2399:..\FreeRTOS\Source/tasks.c **** 		( void ) xTaskResumeAll();
2400:..\FreeRTOS\Source/tasks.c **** 
2401:..\FreeRTOS\Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2402:..\FreeRTOS\Source/tasks.c **** 	}
2403:..\FreeRTOS\Source/tasks.c **** 
2404:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2405:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2406:..\FreeRTOS\Source/tasks.c **** 
2407:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2408:..\FreeRTOS\Source/tasks.c **** 
2409:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2410:..\FreeRTOS\Source/tasks.c **** 	{
2411:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2412:..\FreeRTOS\Source/tasks.c **** 
2413:..\FreeRTOS\Source/tasks.c **** 		vTaskSuspendAll();
2414:..\FreeRTOS\Source/tasks.c **** 		{
2415:..\FreeRTOS\Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2416:..\FreeRTOS\Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 45


2417:..\FreeRTOS\Source/tasks.c **** 			{
2418:..\FreeRTOS\Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2419:..\FreeRTOS\Source/tasks.c **** 				task in the Ready state. */
2420:..\FreeRTOS\Source/tasks.c **** 				do
2421:..\FreeRTOS\Source/tasks.c **** 				{
2422:..\FreeRTOS\Source/tasks.c **** 					uxQueue--;
2423:..\FreeRTOS\Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2424:..\FreeRTOS\Source/tasks.c **** 
2425:..\FreeRTOS\Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2426:..\FreeRTOS\Source/tasks.c **** 
2427:..\FreeRTOS\Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2428:..\FreeRTOS\Source/tasks.c **** 				task in the Blocked state. */
2429:..\FreeRTOS\Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2430:..\FreeRTOS\Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2431:..\FreeRTOS\Source/tasks.c **** 
2432:..\FreeRTOS\Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2433:..\FreeRTOS\Source/tasks.c **** 				{
2434:..\FreeRTOS\Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2435:..\FreeRTOS\Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2436:..\FreeRTOS\Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2437:..\FreeRTOS\Source/tasks.c **** 				}
2438:..\FreeRTOS\Source/tasks.c **** 				#endif
2439:..\FreeRTOS\Source/tasks.c **** 
2440:..\FreeRTOS\Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2441:..\FreeRTOS\Source/tasks.c **** 				{
2442:..\FreeRTOS\Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2443:..\FreeRTOS\Source/tasks.c **** 					each task in the Suspended state. */
2444:..\FreeRTOS\Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2445:..\FreeRTOS\Source/tasks.c **** 				}
2446:..\FreeRTOS\Source/tasks.c **** 				#endif
2447:..\FreeRTOS\Source/tasks.c **** 
2448:..\FreeRTOS\Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2449:..\FreeRTOS\Source/tasks.c **** 				{
2450:..\FreeRTOS\Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2451:..\FreeRTOS\Source/tasks.c **** 					{
2452:..\FreeRTOS\Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2453:..\FreeRTOS\Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2454:..\FreeRTOS\Source/tasks.c **** 						#else
2455:..\FreeRTOS\Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2456:..\FreeRTOS\Source/tasks.c **** 						#endif
2457:..\FreeRTOS\Source/tasks.c **** 					}
2458:..\FreeRTOS\Source/tasks.c **** 				}
2459:..\FreeRTOS\Source/tasks.c **** 				#else
2460:..\FreeRTOS\Source/tasks.c **** 				{
2461:..\FreeRTOS\Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2462:..\FreeRTOS\Source/tasks.c **** 					{
2463:..\FreeRTOS\Source/tasks.c **** 						*pulTotalRunTime = 0;
2464:..\FreeRTOS\Source/tasks.c **** 					}
2465:..\FreeRTOS\Source/tasks.c **** 				}
2466:..\FreeRTOS\Source/tasks.c **** 				#endif
2467:..\FreeRTOS\Source/tasks.c **** 			}
2468:..\FreeRTOS\Source/tasks.c **** 			else
2469:..\FreeRTOS\Source/tasks.c **** 			{
2470:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2471:..\FreeRTOS\Source/tasks.c **** 			}
2472:..\FreeRTOS\Source/tasks.c **** 		}
2473:..\FreeRTOS\Source/tasks.c **** 		( void ) xTaskResumeAll();
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 46


2474:..\FreeRTOS\Source/tasks.c **** 
2475:..\FreeRTOS\Source/tasks.c **** 		return uxTask;
2476:..\FreeRTOS\Source/tasks.c **** 	}
2477:..\FreeRTOS\Source/tasks.c **** 
2478:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2479:..\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2480:..\FreeRTOS\Source/tasks.c **** 
2481:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2482:..\FreeRTOS\Source/tasks.c **** 
2483:..\FreeRTOS\Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2484:..\FreeRTOS\Source/tasks.c **** 	{
2485:..\FreeRTOS\Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2486:..\FreeRTOS\Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2487:..\FreeRTOS\Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2488:..\FreeRTOS\Source/tasks.c **** 		return xIdleTaskHandle;
2489:..\FreeRTOS\Source/tasks.c **** 	}
2490:..\FreeRTOS\Source/tasks.c **** 
2491:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2492:..\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2493:..\FreeRTOS\Source/tasks.c **** 
2494:..\FreeRTOS\Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2495:..\FreeRTOS\Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2496:..\FreeRTOS\Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2497:..\FreeRTOS\Source/tasks.c **** 1. */
2498:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2499:..\FreeRTOS\Source/tasks.c **** 
2500:..\FreeRTOS\Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2501:..\FreeRTOS\Source/tasks.c **** 	{
2502:..\FreeRTOS\Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2503:..\FreeRTOS\Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2504:..\FreeRTOS\Source/tasks.c **** 		each stepped tick. */
2505:..\FreeRTOS\Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2506:..\FreeRTOS\Source/tasks.c **** 		xTickCount += xTicksToJump;
2507:..\FreeRTOS\Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2508:..\FreeRTOS\Source/tasks.c **** 	}
2509:..\FreeRTOS\Source/tasks.c **** 
2510:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2511:..\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2512:..\FreeRTOS\Source/tasks.c **** 
2513:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2514:..\FreeRTOS\Source/tasks.c **** 
2515:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2516:..\FreeRTOS\Source/tasks.c **** 	{
2517:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2518:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn;
2519:..\FreeRTOS\Source/tasks.c **** 
2520:..\FreeRTOS\Source/tasks.c **** 		configASSERT( pxTCB );
2521:..\FreeRTOS\Source/tasks.c **** 
2522:..\FreeRTOS\Source/tasks.c **** 		vTaskSuspendAll();
2523:..\FreeRTOS\Source/tasks.c **** 		{
2524:..\FreeRTOS\Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2525:..\FreeRTOS\Source/tasks.c **** 			it is actually in the Blocked state. */
2526:..\FreeRTOS\Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2527:..\FreeRTOS\Source/tasks.c **** 			{
2528:..\FreeRTOS\Source/tasks.c **** 				xReturn = pdPASS;
2529:..\FreeRTOS\Source/tasks.c **** 
2530:..\FreeRTOS\Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 47


2531:..\FreeRTOS\Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2532:..\FreeRTOS\Source/tasks.c **** 				scheduler is suspended. */
2533:..\FreeRTOS\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2534:..\FreeRTOS\Source/tasks.c **** 
2535:..\FreeRTOS\Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2536:..\FreeRTOS\Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2537:..\FreeRTOS\Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2538:..\FreeRTOS\Source/tasks.c **** 				is used. */
2539:..\FreeRTOS\Source/tasks.c **** 				taskENTER_CRITICAL();
2540:..\FreeRTOS\Source/tasks.c **** 				{
2541:..\FreeRTOS\Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2542:..\FreeRTOS\Source/tasks.c **** 					{
2543:..\FreeRTOS\Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2544:..\FreeRTOS\Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2545:..\FreeRTOS\Source/tasks.c **** 					}
2546:..\FreeRTOS\Source/tasks.c **** 					else
2547:..\FreeRTOS\Source/tasks.c **** 					{
2548:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2549:..\FreeRTOS\Source/tasks.c **** 					}
2550:..\FreeRTOS\Source/tasks.c **** 				}
2551:..\FreeRTOS\Source/tasks.c **** 				taskEXIT_CRITICAL();
2552:..\FreeRTOS\Source/tasks.c **** 
2553:..\FreeRTOS\Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2554:..\FreeRTOS\Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2555:..\FreeRTOS\Source/tasks.c **** 
2556:..\FreeRTOS\Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2557:..\FreeRTOS\Source/tasks.c **** 				switch if preemption is turned off. */
2558:..\FreeRTOS\Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2559:..\FreeRTOS\Source/tasks.c **** 				{
2560:..\FreeRTOS\Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2561:..\FreeRTOS\Source/tasks.c **** 					performed if the unblocked task has a priority that is
2562:..\FreeRTOS\Source/tasks.c **** 					equal to or higher than the currently executing task. */
2563:..\FreeRTOS\Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2564:..\FreeRTOS\Source/tasks.c **** 					{
2565:..\FreeRTOS\Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2566:..\FreeRTOS\Source/tasks.c **** 						is unsuspended. */
2567:..\FreeRTOS\Source/tasks.c **** 						xYieldPending = pdTRUE;
2568:..\FreeRTOS\Source/tasks.c **** 					}
2569:..\FreeRTOS\Source/tasks.c **** 					else
2570:..\FreeRTOS\Source/tasks.c **** 					{
2571:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2572:..\FreeRTOS\Source/tasks.c **** 					}
2573:..\FreeRTOS\Source/tasks.c **** 				}
2574:..\FreeRTOS\Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2575:..\FreeRTOS\Source/tasks.c **** 			}
2576:..\FreeRTOS\Source/tasks.c **** 			else
2577:..\FreeRTOS\Source/tasks.c **** 			{
2578:..\FreeRTOS\Source/tasks.c **** 				xReturn = pdFAIL;
2579:..\FreeRTOS\Source/tasks.c **** 			}
2580:..\FreeRTOS\Source/tasks.c **** 		}
2581:..\FreeRTOS\Source/tasks.c **** 		( void ) xTaskResumeAll();
2582:..\FreeRTOS\Source/tasks.c **** 
2583:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
2584:..\FreeRTOS\Source/tasks.c **** 	}
2585:..\FreeRTOS\Source/tasks.c **** 
2586:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2587:..\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 48


2588:..\FreeRTOS\Source/tasks.c **** 
2589:..\FreeRTOS\Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2590:..\FreeRTOS\Source/tasks.c **** {
2591:..\FreeRTOS\Source/tasks.c **** TCB_t * pxTCB;
2592:..\FreeRTOS\Source/tasks.c **** TickType_t xItemValue;
2593:..\FreeRTOS\Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2594:..\FreeRTOS\Source/tasks.c **** 
2595:..\FreeRTOS\Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2596:..\FreeRTOS\Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2597:..\FreeRTOS\Source/tasks.c **** 	tasks to be unblocked. */
2598:..\FreeRTOS\Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2599:..\FreeRTOS\Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2600:..\FreeRTOS\Source/tasks.c **** 	{
2601:..\FreeRTOS\Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2602:..\FreeRTOS\Source/tasks.c **** 		block. */
2603:..\FreeRTOS\Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2604:..\FreeRTOS\Source/tasks.c **** 
2605:..\FreeRTOS\Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2606:..\FreeRTOS\Source/tasks.c **** 		delayed lists if it wraps to 0. */
2607:..\FreeRTOS\Source/tasks.c **** 		xTickCount = xConstTickCount;
2608:..\FreeRTOS\Source/tasks.c **** 
2609:..\FreeRTOS\Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2610:..\FreeRTOS\Source/tasks.c **** 		{
2611:..\FreeRTOS\Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2612:..\FreeRTOS\Source/tasks.c **** 		}
2613:..\FreeRTOS\Source/tasks.c **** 		else
2614:..\FreeRTOS\Source/tasks.c **** 		{
2615:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2616:..\FreeRTOS\Source/tasks.c **** 		}
2617:..\FreeRTOS\Source/tasks.c **** 
2618:..\FreeRTOS\Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2619:..\FreeRTOS\Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2620:..\FreeRTOS\Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2621:..\FreeRTOS\Source/tasks.c **** 		look any further down the list. */
2622:..\FreeRTOS\Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2623:..\FreeRTOS\Source/tasks.c **** 		{
2624:..\FreeRTOS\Source/tasks.c **** 			for( ;; )
2625:..\FreeRTOS\Source/tasks.c **** 			{
2626:..\FreeRTOS\Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2627:..\FreeRTOS\Source/tasks.c **** 				{
2628:..\FreeRTOS\Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2629:..\FreeRTOS\Source/tasks.c **** 					to the maximum possible value so it is extremely
2630:..\FreeRTOS\Source/tasks.c **** 					unlikely that the
2631:..\FreeRTOS\Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2632:..\FreeRTOS\Source/tasks.c **** 					next time through. */
2633:..\FreeRTOS\Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2634:..\FreeRTOS\Source/tasks.c **** 					break;
2635:..\FreeRTOS\Source/tasks.c **** 				}
2636:..\FreeRTOS\Source/tasks.c **** 				else
2637:..\FreeRTOS\Source/tasks.c **** 				{
2638:..\FreeRTOS\Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2639:..\FreeRTOS\Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2640:..\FreeRTOS\Source/tasks.c **** 					at which the task at the head of the delayed list must
2641:..\FreeRTOS\Source/tasks.c **** 					be removed from the Blocked state. */
2642:..\FreeRTOS\Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2643:..\FreeRTOS\Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2644:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 49


2645:..\FreeRTOS\Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2646:..\FreeRTOS\Source/tasks.c **** 					{
2647:..\FreeRTOS\Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2648:..\FreeRTOS\Source/tasks.c **** 						item value is the time at which the task at the head
2649:..\FreeRTOS\Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2650:..\FreeRTOS\Source/tasks.c **** 						state -	so record the item value in
2651:..\FreeRTOS\Source/tasks.c **** 						xNextTaskUnblockTime. */
2652:..\FreeRTOS\Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2653:..\FreeRTOS\Source/tasks.c **** 						break;
2654:..\FreeRTOS\Source/tasks.c **** 					}
2655:..\FreeRTOS\Source/tasks.c **** 					else
2656:..\FreeRTOS\Source/tasks.c **** 					{
2657:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2658:..\FreeRTOS\Source/tasks.c **** 					}
2659:..\FreeRTOS\Source/tasks.c **** 
2660:..\FreeRTOS\Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2661:..\FreeRTOS\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2662:..\FreeRTOS\Source/tasks.c **** 
2663:..\FreeRTOS\Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2664:..\FreeRTOS\Source/tasks.c **** 					it from the event list. */
2665:..\FreeRTOS\Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2666:..\FreeRTOS\Source/tasks.c **** 					{
2667:..\FreeRTOS\Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2668:..\FreeRTOS\Source/tasks.c **** 					}
2669:..\FreeRTOS\Source/tasks.c **** 					else
2670:..\FreeRTOS\Source/tasks.c **** 					{
2671:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2672:..\FreeRTOS\Source/tasks.c **** 					}
2673:..\FreeRTOS\Source/tasks.c **** 
2674:..\FreeRTOS\Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2675:..\FreeRTOS\Source/tasks.c **** 					list. */
2676:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2677:..\FreeRTOS\Source/tasks.c **** 
2678:..\FreeRTOS\Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2679:..\FreeRTOS\Source/tasks.c **** 					context switch if preemption is turned off. */
2680:..\FreeRTOS\Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2681:..\FreeRTOS\Source/tasks.c **** 					{
2682:..\FreeRTOS\Source/tasks.c **** 						/* Preemption is on, but a context switch should
2683:..\FreeRTOS\Source/tasks.c **** 						only be performed if the unblocked task has a
2684:..\FreeRTOS\Source/tasks.c **** 						priority that is equal to or higher than the
2685:..\FreeRTOS\Source/tasks.c **** 						currently executing task. */
2686:..\FreeRTOS\Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2687:..\FreeRTOS\Source/tasks.c **** 						{
2688:..\FreeRTOS\Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2689:..\FreeRTOS\Source/tasks.c **** 						}
2690:..\FreeRTOS\Source/tasks.c **** 						else
2691:..\FreeRTOS\Source/tasks.c **** 						{
2692:..\FreeRTOS\Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2693:..\FreeRTOS\Source/tasks.c **** 						}
2694:..\FreeRTOS\Source/tasks.c **** 					}
2695:..\FreeRTOS\Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2696:..\FreeRTOS\Source/tasks.c **** 				}
2697:..\FreeRTOS\Source/tasks.c **** 			}
2698:..\FreeRTOS\Source/tasks.c **** 		}
2699:..\FreeRTOS\Source/tasks.c **** 
2700:..\FreeRTOS\Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2701:..\FreeRTOS\Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 50


2702:..\FreeRTOS\Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2703:..\FreeRTOS\Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2704:..\FreeRTOS\Source/tasks.c **** 		{
2705:..\FreeRTOS\Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2706:..\FreeRTOS\Source/tasks.c **** 			{
2707:..\FreeRTOS\Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2708:..\FreeRTOS\Source/tasks.c **** 			}
2709:..\FreeRTOS\Source/tasks.c **** 			else
2710:..\FreeRTOS\Source/tasks.c **** 			{
2711:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2712:..\FreeRTOS\Source/tasks.c **** 			}
2713:..\FreeRTOS\Source/tasks.c **** 		}
2714:..\FreeRTOS\Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2715:..\FreeRTOS\Source/tasks.c **** 
2716:..\FreeRTOS\Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2717:..\FreeRTOS\Source/tasks.c **** 		{
2718:..\FreeRTOS\Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2719:..\FreeRTOS\Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2720:..\FreeRTOS\Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2721:..\FreeRTOS\Source/tasks.c **** 			{
2722:..\FreeRTOS\Source/tasks.c **** 				vApplicationTickHook();
2723:..\FreeRTOS\Source/tasks.c **** 			}
2724:..\FreeRTOS\Source/tasks.c **** 			else
2725:..\FreeRTOS\Source/tasks.c **** 			{
2726:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2727:..\FreeRTOS\Source/tasks.c **** 			}
2728:..\FreeRTOS\Source/tasks.c **** 		}
2729:..\FreeRTOS\Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2730:..\FreeRTOS\Source/tasks.c **** 	}
2731:..\FreeRTOS\Source/tasks.c **** 	else
2732:..\FreeRTOS\Source/tasks.c **** 	{
2733:..\FreeRTOS\Source/tasks.c **** 		++uxPendedTicks;
2734:..\FreeRTOS\Source/tasks.c **** 
2735:..\FreeRTOS\Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2736:..\FreeRTOS\Source/tasks.c **** 		scheduler is locked. */
2737:..\FreeRTOS\Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2738:..\FreeRTOS\Source/tasks.c **** 		{
2739:..\FreeRTOS\Source/tasks.c **** 			vApplicationTickHook();
2740:..\FreeRTOS\Source/tasks.c **** 		}
2741:..\FreeRTOS\Source/tasks.c **** 		#endif
2742:..\FreeRTOS\Source/tasks.c **** 	}
2743:..\FreeRTOS\Source/tasks.c **** 
2744:..\FreeRTOS\Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2745:..\FreeRTOS\Source/tasks.c **** 	{
2746:..\FreeRTOS\Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2747:..\FreeRTOS\Source/tasks.c **** 		{
2748:..\FreeRTOS\Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2749:..\FreeRTOS\Source/tasks.c **** 		}
2750:..\FreeRTOS\Source/tasks.c **** 		else
2751:..\FreeRTOS\Source/tasks.c **** 		{
2752:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2753:..\FreeRTOS\Source/tasks.c **** 		}
2754:..\FreeRTOS\Source/tasks.c **** 	}
2755:..\FreeRTOS\Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2756:..\FreeRTOS\Source/tasks.c **** 
2757:..\FreeRTOS\Source/tasks.c **** 	return xSwitchRequired;
2758:..\FreeRTOS\Source/tasks.c **** }
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 51


2759:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2760:..\FreeRTOS\Source/tasks.c **** 
2761:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2762:..\FreeRTOS\Source/tasks.c **** 
2763:..\FreeRTOS\Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2764:..\FreeRTOS\Source/tasks.c **** 	{
2765:..\FreeRTOS\Source/tasks.c **** 	TCB_t *xTCB;
2766:..\FreeRTOS\Source/tasks.c **** 
2767:..\FreeRTOS\Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2768:..\FreeRTOS\Source/tasks.c **** 		getting set. */
2769:..\FreeRTOS\Source/tasks.c **** 		if( xTask == NULL )
2770:..\FreeRTOS\Source/tasks.c **** 		{
2771:..\FreeRTOS\Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2772:..\FreeRTOS\Source/tasks.c **** 		}
2773:..\FreeRTOS\Source/tasks.c **** 		else
2774:..\FreeRTOS\Source/tasks.c **** 		{
2775:..\FreeRTOS\Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2776:..\FreeRTOS\Source/tasks.c **** 		}
2777:..\FreeRTOS\Source/tasks.c **** 
2778:..\FreeRTOS\Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2779:..\FreeRTOS\Source/tasks.c **** 		the value can be accessed from an interrupt. */
2780:..\FreeRTOS\Source/tasks.c **** 		taskENTER_CRITICAL();
2781:..\FreeRTOS\Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2782:..\FreeRTOS\Source/tasks.c **** 		taskEXIT_CRITICAL();
2783:..\FreeRTOS\Source/tasks.c **** 	}
2784:..\FreeRTOS\Source/tasks.c **** 
2785:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2786:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2787:..\FreeRTOS\Source/tasks.c **** 
2788:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2789:..\FreeRTOS\Source/tasks.c **** 
2790:..\FreeRTOS\Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2791:..\FreeRTOS\Source/tasks.c **** 	{
2792:..\FreeRTOS\Source/tasks.c **** 	TCB_t *xTCB;
2793:..\FreeRTOS\Source/tasks.c **** 	TaskHookFunction_t xReturn;
2794:..\FreeRTOS\Source/tasks.c **** 
2795:..\FreeRTOS\Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2796:..\FreeRTOS\Source/tasks.c **** 		if( xTask == NULL )
2797:..\FreeRTOS\Source/tasks.c **** 		{
2798:..\FreeRTOS\Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2799:..\FreeRTOS\Source/tasks.c **** 		}
2800:..\FreeRTOS\Source/tasks.c **** 		else
2801:..\FreeRTOS\Source/tasks.c **** 		{
2802:..\FreeRTOS\Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2803:..\FreeRTOS\Source/tasks.c **** 		}
2804:..\FreeRTOS\Source/tasks.c **** 
2805:..\FreeRTOS\Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2806:..\FreeRTOS\Source/tasks.c **** 		the value can be accessed from an interrupt. */
2807:..\FreeRTOS\Source/tasks.c **** 		taskENTER_CRITICAL();
2808:..\FreeRTOS\Source/tasks.c **** 		{
2809:..\FreeRTOS\Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2810:..\FreeRTOS\Source/tasks.c **** 		}
2811:..\FreeRTOS\Source/tasks.c **** 		taskEXIT_CRITICAL();
2812:..\FreeRTOS\Source/tasks.c **** 
2813:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
2814:..\FreeRTOS\Source/tasks.c **** 	}
2815:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 52


2816:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2817:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2818:..\FreeRTOS\Source/tasks.c **** 
2819:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2820:..\FreeRTOS\Source/tasks.c **** 
2821:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2822:..\FreeRTOS\Source/tasks.c **** 	{
2823:..\FreeRTOS\Source/tasks.c **** 	TCB_t *xTCB;
2824:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn;
2825:..\FreeRTOS\Source/tasks.c **** 
2826:..\FreeRTOS\Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2827:..\FreeRTOS\Source/tasks.c **** 		if( xTask == NULL )
2828:..\FreeRTOS\Source/tasks.c **** 		{
2829:..\FreeRTOS\Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2830:..\FreeRTOS\Source/tasks.c **** 		}
2831:..\FreeRTOS\Source/tasks.c **** 		else
2832:..\FreeRTOS\Source/tasks.c **** 		{
2833:..\FreeRTOS\Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2834:..\FreeRTOS\Source/tasks.c **** 		}
2835:..\FreeRTOS\Source/tasks.c **** 
2836:..\FreeRTOS\Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2837:..\FreeRTOS\Source/tasks.c **** 		{
2838:..\FreeRTOS\Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2839:..\FreeRTOS\Source/tasks.c **** 		}
2840:..\FreeRTOS\Source/tasks.c **** 		else
2841:..\FreeRTOS\Source/tasks.c **** 		{
2842:..\FreeRTOS\Source/tasks.c **** 			xReturn = pdFAIL;
2843:..\FreeRTOS\Source/tasks.c **** 		}
2844:..\FreeRTOS\Source/tasks.c **** 
2845:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
2846:..\FreeRTOS\Source/tasks.c **** 	}
2847:..\FreeRTOS\Source/tasks.c **** 
2848:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2849:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2850:..\FreeRTOS\Source/tasks.c **** 
2851:..\FreeRTOS\Source/tasks.c **** void vTaskSwitchContext( void )
2852:..\FreeRTOS\Source/tasks.c **** {
2853:..\FreeRTOS\Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2854:..\FreeRTOS\Source/tasks.c **** 	{
2855:..\FreeRTOS\Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2856:..\FreeRTOS\Source/tasks.c **** 		switch. */
2857:..\FreeRTOS\Source/tasks.c **** 		xYieldPending = pdTRUE;
2858:..\FreeRTOS\Source/tasks.c **** 	}
2859:..\FreeRTOS\Source/tasks.c **** 	else
2860:..\FreeRTOS\Source/tasks.c **** 	{
2861:..\FreeRTOS\Source/tasks.c **** 		xYieldPending = pdFALSE;
2862:..\FreeRTOS\Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2863:..\FreeRTOS\Source/tasks.c **** 
2864:..\FreeRTOS\Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2865:..\FreeRTOS\Source/tasks.c **** 		{
2866:..\FreeRTOS\Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2867:..\FreeRTOS\Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2868:..\FreeRTOS\Source/tasks.c **** 				#else
2869:..\FreeRTOS\Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2870:..\FreeRTOS\Source/tasks.c **** 				#endif
2871:..\FreeRTOS\Source/tasks.c **** 
2872:..\FreeRTOS\Source/tasks.c **** 				/* Add the amount of time the task has been running to the
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 53


2873:..\FreeRTOS\Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2874:..\FreeRTOS\Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2875:..\FreeRTOS\Source/tasks.c **** 				protection here so count values are only valid until the timer
2876:..\FreeRTOS\Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2877:..\FreeRTOS\Source/tasks.c **** 				against suspect run time stat counter implementations - which
2878:..\FreeRTOS\Source/tasks.c **** 				are provided by the application, not the kernel. */
2879:..\FreeRTOS\Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2880:..\FreeRTOS\Source/tasks.c **** 				{
2881:..\FreeRTOS\Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2882:..\FreeRTOS\Source/tasks.c **** 				}
2883:..\FreeRTOS\Source/tasks.c **** 				else
2884:..\FreeRTOS\Source/tasks.c **** 				{
2885:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2886:..\FreeRTOS\Source/tasks.c **** 				}
2887:..\FreeRTOS\Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2888:..\FreeRTOS\Source/tasks.c **** 		}
2889:..\FreeRTOS\Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2890:..\FreeRTOS\Source/tasks.c **** 
2891:..\FreeRTOS\Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2892:..\FreeRTOS\Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2893:..\FreeRTOS\Source/tasks.c **** 
2894:..\FreeRTOS\Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2895:..\FreeRTOS\Source/tasks.c **** 		optimised asm code. */
2896:..\FreeRTOS\Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2897:..\FreeRTOS\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2898:..\FreeRTOS\Source/tasks.c **** 
2899:..\FreeRTOS\Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2900:..\FreeRTOS\Source/tasks.c **** 		{
2901:..\FreeRTOS\Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2902:..\FreeRTOS\Source/tasks.c **** 			structure specific to this task. */
2903:..\FreeRTOS\Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2904:..\FreeRTOS\Source/tasks.c **** 		}
2905:..\FreeRTOS\Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2906:..\FreeRTOS\Source/tasks.c **** 	}
2907:..\FreeRTOS\Source/tasks.c **** }
2908:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2909:..\FreeRTOS\Source/tasks.c **** 
2910:..\FreeRTOS\Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2911:..\FreeRTOS\Source/tasks.c **** {
2912:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxEventList );
2913:..\FreeRTOS\Source/tasks.c **** 
2914:..\FreeRTOS\Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2915:..\FreeRTOS\Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2916:..\FreeRTOS\Source/tasks.c **** 
2917:..\FreeRTOS\Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2918:..\FreeRTOS\Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2919:..\FreeRTOS\Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2920:..\FreeRTOS\Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2921:..\FreeRTOS\Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2922:..\FreeRTOS\Source/tasks.c **** 
2923:..\FreeRTOS\Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2924:..\FreeRTOS\Source/tasks.c **** }
2925:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2926:..\FreeRTOS\Source/tasks.c **** 
2927:..\FreeRTOS\Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2928:..\FreeRTOS\Source/tasks.c **** {
2929:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxEventList );
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 54


2930:..\FreeRTOS\Source/tasks.c **** 
2931:..\FreeRTOS\Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2932:..\FreeRTOS\Source/tasks.c **** 	the event groups implementation. */
2933:..\FreeRTOS\Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2934:..\FreeRTOS\Source/tasks.c **** 
2935:..\FreeRTOS\Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2936:..\FreeRTOS\Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2937:..\FreeRTOS\Source/tasks.c **** 	task that is not in the Blocked state. */
2938:..\FreeRTOS\Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2939:..\FreeRTOS\Source/tasks.c **** 
2940:..\FreeRTOS\Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2941:..\FreeRTOS\Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2942:..\FreeRTOS\Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2943:..\FreeRTOS\Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2944:..\FreeRTOS\Source/tasks.c **** 	the task level). */
2945:..\FreeRTOS\Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2946:..\FreeRTOS\Source/tasks.c **** 
2947:..\FreeRTOS\Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2948:..\FreeRTOS\Source/tasks.c **** }
2949:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2950:..\FreeRTOS\Source/tasks.c **** 
2951:..\FreeRTOS\Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2952:..\FreeRTOS\Source/tasks.c **** 
2953:..\FreeRTOS\Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2954:..\FreeRTOS\Source/tasks.c **** 	{
2955:..\FreeRTOS\Source/tasks.c **** 		configASSERT( pxEventList );
2956:..\FreeRTOS\Source/tasks.c **** 
2957:..\FreeRTOS\Source/tasks.c **** 		/* This function should not be called by application code hence the
2958:..\FreeRTOS\Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2959:..\FreeRTOS\Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2960:..\FreeRTOS\Source/tasks.c **** 		it should be called with the scheduler suspended. */
2961:..\FreeRTOS\Source/tasks.c **** 
2962:..\FreeRTOS\Source/tasks.c **** 
2963:..\FreeRTOS\Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2964:..\FreeRTOS\Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2965:..\FreeRTOS\Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2966:..\FreeRTOS\Source/tasks.c **** 		can be used in place of vListInsert. */
2967:..\FreeRTOS\Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2968:..\FreeRTOS\Source/tasks.c **** 
2969:..\FreeRTOS\Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2970:..\FreeRTOS\Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2971:..\FreeRTOS\Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2972:..\FreeRTOS\Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2973:..\FreeRTOS\Source/tasks.c **** 		{
2974:..\FreeRTOS\Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2975:..\FreeRTOS\Source/tasks.c **** 		}
2976:..\FreeRTOS\Source/tasks.c **** 
2977:..\FreeRTOS\Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2978:..\FreeRTOS\Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2979:..\FreeRTOS\Source/tasks.c **** 	}
2980:..\FreeRTOS\Source/tasks.c **** 
2981:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TIMERS */
2982:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2983:..\FreeRTOS\Source/tasks.c **** 
2984:..\FreeRTOS\Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2985:..\FreeRTOS\Source/tasks.c **** {
2986:..\FreeRTOS\Source/tasks.c **** TCB_t *pxUnblockedTCB;
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 55


2987:..\FreeRTOS\Source/tasks.c **** BaseType_t xReturn;
2988:..\FreeRTOS\Source/tasks.c **** 
2989:..\FreeRTOS\Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2990:..\FreeRTOS\Source/tasks.c **** 	called from a critical section within an ISR. */
2991:..\FreeRTOS\Source/tasks.c **** 
2992:..\FreeRTOS\Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2993:..\FreeRTOS\Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2994:..\FreeRTOS\Source/tasks.c **** 	the delayed list, and add it to the ready list.
2995:..\FreeRTOS\Source/tasks.c **** 
2996:..\FreeRTOS\Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2997:..\FreeRTOS\Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2998:..\FreeRTOS\Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2999:..\FreeRTOS\Source/tasks.c **** 
3000:..\FreeRTOS\Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3001:..\FreeRTOS\Source/tasks.c **** 	pxEventList is not empty. */
3002:..\FreeRTOS\Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
3003:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3004:..\FreeRTOS\Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3005:..\FreeRTOS\Source/tasks.c **** 
3006:..\FreeRTOS\Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3007:..\FreeRTOS\Source/tasks.c **** 	{
3008:..\FreeRTOS\Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3009:..\FreeRTOS\Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3010:..\FreeRTOS\Source/tasks.c **** 	}
3011:..\FreeRTOS\Source/tasks.c **** 	else
3012:..\FreeRTOS\Source/tasks.c **** 	{
3013:..\FreeRTOS\Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3014:..\FreeRTOS\Source/tasks.c **** 		pending until the scheduler is resumed. */
3015:..\FreeRTOS\Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3016:..\FreeRTOS\Source/tasks.c **** 	}
3017:..\FreeRTOS\Source/tasks.c **** 
3018:..\FreeRTOS\Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3019:..\FreeRTOS\Source/tasks.c **** 	{
3020:..\FreeRTOS\Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3021:..\FreeRTOS\Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3022:..\FreeRTOS\Source/tasks.c **** 		it should force a context switch now. */
3023:..\FreeRTOS\Source/tasks.c **** 		xReturn = pdTRUE;
3024:..\FreeRTOS\Source/tasks.c **** 
3025:..\FreeRTOS\Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3026:..\FreeRTOS\Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3027:..\FreeRTOS\Source/tasks.c **** 		xYieldPending = pdTRUE;
3028:..\FreeRTOS\Source/tasks.c **** 	}
3029:..\FreeRTOS\Source/tasks.c **** 	else
3030:..\FreeRTOS\Source/tasks.c **** 	{
3031:..\FreeRTOS\Source/tasks.c **** 		xReturn = pdFALSE;
3032:..\FreeRTOS\Source/tasks.c **** 	}
3033:..\FreeRTOS\Source/tasks.c **** 
3034:..\FreeRTOS\Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3035:..\FreeRTOS\Source/tasks.c **** 	{
3036:..\FreeRTOS\Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3037:..\FreeRTOS\Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3038:..\FreeRTOS\Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3039:..\FreeRTOS\Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3040:..\FreeRTOS\Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3041:..\FreeRTOS\Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3042:..\FreeRTOS\Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3043:..\FreeRTOS\Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 56


3044:..\FreeRTOS\Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3045:..\FreeRTOS\Source/tasks.c **** 	}
3046:..\FreeRTOS\Source/tasks.c **** 	#endif
3047:..\FreeRTOS\Source/tasks.c **** 
3048:..\FreeRTOS\Source/tasks.c **** 	return xReturn;
3049:..\FreeRTOS\Source/tasks.c **** }
3050:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3051:..\FreeRTOS\Source/tasks.c **** 
3052:..\FreeRTOS\Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3053:..\FreeRTOS\Source/tasks.c **** {
3054:..\FreeRTOS\Source/tasks.c **** TCB_t *pxUnblockedTCB;
3055:..\FreeRTOS\Source/tasks.c **** 
3056:..\FreeRTOS\Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3057:..\FreeRTOS\Source/tasks.c **** 	the event flags implementation. */
3058:..\FreeRTOS\Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3059:..\FreeRTOS\Source/tasks.c **** 
3060:..\FreeRTOS\Source/tasks.c **** 	/* Store the new item value in the event list. */
3061:..\FreeRTOS\Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3062:..\FreeRTOS\Source/tasks.c **** 
3063:..\FreeRTOS\Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3064:..\FreeRTOS\Source/tasks.c **** 	event flags. */
3065:..\FreeRTOS\Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
3066:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3067:..\FreeRTOS\Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3068:..\FreeRTOS\Source/tasks.c **** 
3069:..\FreeRTOS\Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3070:..\FreeRTOS\Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3071:..\FreeRTOS\Source/tasks.c **** 	lists. */
3072:..\FreeRTOS\Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3073:..\FreeRTOS\Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3074:..\FreeRTOS\Source/tasks.c **** 
3075:..\FreeRTOS\Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3076:..\FreeRTOS\Source/tasks.c **** 	{
3077:..\FreeRTOS\Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3078:..\FreeRTOS\Source/tasks.c **** 		a context switch is required.  This function is called with the
3079:..\FreeRTOS\Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3080:..\FreeRTOS\Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3081:..\FreeRTOS\Source/tasks.c **** 		xYieldPending = pdTRUE;
3082:..\FreeRTOS\Source/tasks.c **** 	}
3083:..\FreeRTOS\Source/tasks.c **** }
3084:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3085:..\FreeRTOS\Source/tasks.c **** 
3086:..\FreeRTOS\Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3087:..\FreeRTOS\Source/tasks.c **** {
3088:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxTimeOut );
3089:..\FreeRTOS\Source/tasks.c **** 	taskENTER_CRITICAL();
3090:..\FreeRTOS\Source/tasks.c **** 	{
3091:..\FreeRTOS\Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3092:..\FreeRTOS\Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3093:..\FreeRTOS\Source/tasks.c **** 	}
3094:..\FreeRTOS\Source/tasks.c **** 	taskEXIT_CRITICAL();
3095:..\FreeRTOS\Source/tasks.c **** }
3096:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3097:..\FreeRTOS\Source/tasks.c **** 
3098:..\FreeRTOS\Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3099:..\FreeRTOS\Source/tasks.c **** {
3100:..\FreeRTOS\Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 57


3101:..\FreeRTOS\Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3102:..\FreeRTOS\Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3103:..\FreeRTOS\Source/tasks.c **** }
3104:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3105:..\FreeRTOS\Source/tasks.c **** 
3106:..\FreeRTOS\Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3107:..\FreeRTOS\Source/tasks.c **** {
3108:..\FreeRTOS\Source/tasks.c **** BaseType_t xReturn;
3109:..\FreeRTOS\Source/tasks.c **** 
3110:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxTimeOut );
3111:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxTicksToWait );
3112:..\FreeRTOS\Source/tasks.c **** 
3113:..\FreeRTOS\Source/tasks.c **** 	taskENTER_CRITICAL();
3114:..\FreeRTOS\Source/tasks.c **** 	{
3115:..\FreeRTOS\Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3116:..\FreeRTOS\Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3117:..\FreeRTOS\Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3118:..\FreeRTOS\Source/tasks.c **** 
3119:..\FreeRTOS\Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3120:..\FreeRTOS\Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3121:..\FreeRTOS\Source/tasks.c **** 			{
3122:..\FreeRTOS\Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3123:..\FreeRTOS\Source/tasks.c **** 				but has the same result. */
3124:..\FreeRTOS\Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3125:..\FreeRTOS\Source/tasks.c **** 				xReturn = pdTRUE;
3126:..\FreeRTOS\Source/tasks.c **** 			}
3127:..\FreeRTOS\Source/tasks.c **** 			else
3128:..\FreeRTOS\Source/tasks.c **** 		#endif
3129:..\FreeRTOS\Source/tasks.c **** 
3130:..\FreeRTOS\Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3131:..\FreeRTOS\Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3132:..\FreeRTOS\Source/tasks.c **** 			{
3133:..\FreeRTOS\Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3134:..\FreeRTOS\Source/tasks.c **** 				specified is the maximum block time then the task should block
3135:..\FreeRTOS\Source/tasks.c **** 				indefinitely, and therefore never time out. */
3136:..\FreeRTOS\Source/tasks.c **** 				xReturn = pdFALSE;
3137:..\FreeRTOS\Source/tasks.c **** 			}
3138:..\FreeRTOS\Source/tasks.c **** 			else
3139:..\FreeRTOS\Source/tasks.c **** 		#endif
3140:..\FreeRTOS\Source/tasks.c **** 
3141:..\FreeRTOS\Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3142:..\FreeRTOS\Source/tasks.c **** 		{
3143:..\FreeRTOS\Source/tasks.c **** 			/* The tick count is greater than the time at which
3144:..\FreeRTOS\Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3145:..\FreeRTOS\Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3146:..\FreeRTOS\Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3147:..\FreeRTOS\Source/tasks.c **** 			was called. */
3148:..\FreeRTOS\Source/tasks.c **** 			xReturn = pdTRUE;
3149:..\FreeRTOS\Source/tasks.c **** 		}
3150:..\FreeRTOS\Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3151:..\FreeRTOS\Source/tasks.c **** 		{
3152:..\FreeRTOS\Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3153:..\FreeRTOS\Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3154:..\FreeRTOS\Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3155:..\FreeRTOS\Source/tasks.c **** 			xReturn = pdFALSE;
3156:..\FreeRTOS\Source/tasks.c **** 		}
3157:..\FreeRTOS\Source/tasks.c **** 		else
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 58


3158:..\FreeRTOS\Source/tasks.c **** 		{
3159:..\FreeRTOS\Source/tasks.c **** 			*pxTicksToWait = 0;
3160:..\FreeRTOS\Source/tasks.c **** 			xReturn = pdTRUE;
3161:..\FreeRTOS\Source/tasks.c **** 		}
3162:..\FreeRTOS\Source/tasks.c **** 	}
3163:..\FreeRTOS\Source/tasks.c **** 	taskEXIT_CRITICAL();
3164:..\FreeRTOS\Source/tasks.c **** 
3165:..\FreeRTOS\Source/tasks.c **** 	return xReturn;
3166:..\FreeRTOS\Source/tasks.c **** }
3167:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3168:..\FreeRTOS\Source/tasks.c **** 
3169:..\FreeRTOS\Source/tasks.c **** void vTaskMissedYield( void )
3170:..\FreeRTOS\Source/tasks.c **** {
3171:..\FreeRTOS\Source/tasks.c **** 	xYieldPending = pdTRUE;
3172:..\FreeRTOS\Source/tasks.c **** }
3173:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3174:..\FreeRTOS\Source/tasks.c **** 
3175:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3176:..\FreeRTOS\Source/tasks.c **** 
3177:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3178:..\FreeRTOS\Source/tasks.c **** 	{
3179:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxReturn;
3180:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
3181:..\FreeRTOS\Source/tasks.c **** 
3182:..\FreeRTOS\Source/tasks.c **** 		if( xTask != NULL )
3183:..\FreeRTOS\Source/tasks.c **** 		{
3184:..\FreeRTOS\Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3185:..\FreeRTOS\Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3186:..\FreeRTOS\Source/tasks.c **** 		}
3187:..\FreeRTOS\Source/tasks.c **** 		else
3188:..\FreeRTOS\Source/tasks.c **** 		{
3189:..\FreeRTOS\Source/tasks.c **** 			uxReturn = 0U;
3190:..\FreeRTOS\Source/tasks.c **** 		}
3191:..\FreeRTOS\Source/tasks.c **** 
3192:..\FreeRTOS\Source/tasks.c **** 		return uxReturn;
3193:..\FreeRTOS\Source/tasks.c **** 	}
3194:..\FreeRTOS\Source/tasks.c **** 
3195:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3196:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3197:..\FreeRTOS\Source/tasks.c **** 
3198:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3199:..\FreeRTOS\Source/tasks.c **** 
3200:..\FreeRTOS\Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3201:..\FreeRTOS\Source/tasks.c **** 	{
3202:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
3203:..\FreeRTOS\Source/tasks.c **** 
3204:..\FreeRTOS\Source/tasks.c **** 		if( xTask != NULL )
3205:..\FreeRTOS\Source/tasks.c **** 		{
3206:..\FreeRTOS\Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3207:..\FreeRTOS\Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3208:..\FreeRTOS\Source/tasks.c **** 		}
3209:..\FreeRTOS\Source/tasks.c **** 	}
3210:..\FreeRTOS\Source/tasks.c **** 
3211:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3212:..\FreeRTOS\Source/tasks.c **** 
3213:..\FreeRTOS\Source/tasks.c **** /*
3214:..\FreeRTOS\Source/tasks.c ****  * -----------------------------------------------------------
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 59


3215:..\FreeRTOS\Source/tasks.c ****  * The Idle task.
3216:..\FreeRTOS\Source/tasks.c ****  * ----------------------------------------------------------
3217:..\FreeRTOS\Source/tasks.c ****  *
3218:..\FreeRTOS\Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3219:..\FreeRTOS\Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3220:..\FreeRTOS\Source/tasks.c ****  *
3221:..\FreeRTOS\Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3222:..\FreeRTOS\Source/tasks.c ****  *
3223:..\FreeRTOS\Source/tasks.c ****  */
3224:..\FreeRTOS\Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3225:..\FreeRTOS\Source/tasks.c **** {
3226:..\FreeRTOS\Source/tasks.c **** 	/* Stop warnings. */
3227:..\FreeRTOS\Source/tasks.c **** 	( void ) pvParameters;
3228:..\FreeRTOS\Source/tasks.c **** 
3229:..\FreeRTOS\Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3230:..\FreeRTOS\Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3231:..\FreeRTOS\Source/tasks.c **** 
3232:..\FreeRTOS\Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3233:..\FreeRTOS\Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3234:..\FreeRTOS\Source/tasks.c **** 	any. */
3235:..\FreeRTOS\Source/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3236:..\FreeRTOS\Source/tasks.c **** 
3237:..\FreeRTOS\Source/tasks.c **** 	for( ;; )
3238:..\FreeRTOS\Source/tasks.c **** 	{
3239:..\FreeRTOS\Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3240:..\FreeRTOS\Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3241:..\FreeRTOS\Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3242:..\FreeRTOS\Source/tasks.c **** 
3243:..\FreeRTOS\Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3244:..\FreeRTOS\Source/tasks.c **** 		{
3245:..\FreeRTOS\Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3246:..\FreeRTOS\Source/tasks.c **** 			see if any other task has become available.  If we are using
3247:..\FreeRTOS\Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3248:..\FreeRTOS\Source/tasks.c **** 			will automatically get the processor anyway. */
3249:..\FreeRTOS\Source/tasks.c **** 			taskYIELD();
3250:..\FreeRTOS\Source/tasks.c **** 		}
3251:..\FreeRTOS\Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3252:..\FreeRTOS\Source/tasks.c **** 
3253:..\FreeRTOS\Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3254:..\FreeRTOS\Source/tasks.c **** 		{
3255:..\FreeRTOS\Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3256:..\FreeRTOS\Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3257:..\FreeRTOS\Source/tasks.c **** 			to run then the idle task should yield before the end of the
3258:..\FreeRTOS\Source/tasks.c **** 			timeslice.
3259:..\FreeRTOS\Source/tasks.c **** 
3260:..\FreeRTOS\Source/tasks.c **** 			A critical region is not required here as we are just reading from
3261:..\FreeRTOS\Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3262:..\FreeRTOS\Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3263:..\FreeRTOS\Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3264:..\FreeRTOS\Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3265:..\FreeRTOS\Source/tasks.c **** 			{
3266:..\FreeRTOS\Source/tasks.c **** 				taskYIELD();
3267:..\FreeRTOS\Source/tasks.c **** 			}
3268:..\FreeRTOS\Source/tasks.c **** 			else
3269:..\FreeRTOS\Source/tasks.c **** 			{
3270:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3271:..\FreeRTOS\Source/tasks.c **** 			}
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 60


3272:..\FreeRTOS\Source/tasks.c **** 		}
3273:..\FreeRTOS\Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3274:..\FreeRTOS\Source/tasks.c **** 
3275:..\FreeRTOS\Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3276:..\FreeRTOS\Source/tasks.c **** 		{
3277:..\FreeRTOS\Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3278:..\FreeRTOS\Source/tasks.c **** 
3279:..\FreeRTOS\Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3280:..\FreeRTOS\Source/tasks.c **** 			allows the application designer to add background functionality
3281:..\FreeRTOS\Source/tasks.c **** 			without the overhead of a separate task.
3282:..\FreeRTOS\Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3283:..\FreeRTOS\Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3284:..\FreeRTOS\Source/tasks.c **** 			vApplicationIdleHook();
3285:..\FreeRTOS\Source/tasks.c **** 		}
3286:..\FreeRTOS\Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3287:..\FreeRTOS\Source/tasks.c **** 
3288:..\FreeRTOS\Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3289:..\FreeRTOS\Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3290:..\FreeRTOS\Source/tasks.c **** 		user defined low power mode	implementations require
3291:..\FreeRTOS\Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3292:..\FreeRTOS\Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3293:..\FreeRTOS\Source/tasks.c **** 		{
3294:..\FreeRTOS\Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3295:..\FreeRTOS\Source/tasks.c **** 
3296:..\FreeRTOS\Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3297:..\FreeRTOS\Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3298:..\FreeRTOS\Source/tasks.c **** 			test of the expected idle time is performed without the
3299:..\FreeRTOS\Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3300:..\FreeRTOS\Source/tasks.c **** 			valid. */
3301:..\FreeRTOS\Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3302:..\FreeRTOS\Source/tasks.c **** 
3303:..\FreeRTOS\Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3304:..\FreeRTOS\Source/tasks.c **** 			{
3305:..\FreeRTOS\Source/tasks.c **** 				vTaskSuspendAll();
3306:..\FreeRTOS\Source/tasks.c **** 				{
3307:..\FreeRTOS\Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3308:..\FreeRTOS\Source/tasks.c **** 					time can be sampled again, and this time its value can
3309:..\FreeRTOS\Source/tasks.c **** 					be used. */
3310:..\FreeRTOS\Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3311:..\FreeRTOS\Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3312:..\FreeRTOS\Source/tasks.c **** 
3313:..\FreeRTOS\Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3314:..\FreeRTOS\Source/tasks.c **** 					if the application does not want
3315:..\FreeRTOS\Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3316:..\FreeRTOS\Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3317:..\FreeRTOS\Source/tasks.c **** 
3318:..\FreeRTOS\Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3319:..\FreeRTOS\Source/tasks.c **** 					{
3320:..\FreeRTOS\Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3321:..\FreeRTOS\Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3322:..\FreeRTOS\Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3323:..\FreeRTOS\Source/tasks.c **** 					}
3324:..\FreeRTOS\Source/tasks.c **** 					else
3325:..\FreeRTOS\Source/tasks.c **** 					{
3326:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3327:..\FreeRTOS\Source/tasks.c **** 					}
3328:..\FreeRTOS\Source/tasks.c **** 				}
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 61


3329:..\FreeRTOS\Source/tasks.c **** 				( void ) xTaskResumeAll();
3330:..\FreeRTOS\Source/tasks.c **** 			}
3331:..\FreeRTOS\Source/tasks.c **** 			else
3332:..\FreeRTOS\Source/tasks.c **** 			{
3333:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3334:..\FreeRTOS\Source/tasks.c **** 			}
3335:..\FreeRTOS\Source/tasks.c **** 		}
3336:..\FreeRTOS\Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3337:..\FreeRTOS\Source/tasks.c **** 	}
3338:..\FreeRTOS\Source/tasks.c **** }
3339:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3340:..\FreeRTOS\Source/tasks.c **** 
3341:..\FreeRTOS\Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3342:..\FreeRTOS\Source/tasks.c **** 
3343:..\FreeRTOS\Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3344:..\FreeRTOS\Source/tasks.c **** 	{
3345:..\FreeRTOS\Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3346:..\FreeRTOS\Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3347:..\FreeRTOS\Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3348:..\FreeRTOS\Source/tasks.c **** 
3349:..\FreeRTOS\Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3350:..\FreeRTOS\Source/tasks.c **** 		{
3351:..\FreeRTOS\Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3352:..\FreeRTOS\Source/tasks.c **** 			eReturn = eAbortSleep;
3353:..\FreeRTOS\Source/tasks.c **** 		}
3354:..\FreeRTOS\Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3355:..\FreeRTOS\Source/tasks.c **** 		{
3356:..\FreeRTOS\Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3357:..\FreeRTOS\Source/tasks.c **** 			eReturn = eAbortSleep;
3358:..\FreeRTOS\Source/tasks.c **** 		}
3359:..\FreeRTOS\Source/tasks.c **** 		else
3360:..\FreeRTOS\Source/tasks.c **** 		{
3361:..\FreeRTOS\Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3362:..\FreeRTOS\Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3363:..\FreeRTOS\Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3364:..\FreeRTOS\Source/tasks.c **** 			interrupts. */
3365:..\FreeRTOS\Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3366:..\FreeRTOS\Source/tasks.c **** 			{
3367:..\FreeRTOS\Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3368:..\FreeRTOS\Source/tasks.c **** 			}
3369:..\FreeRTOS\Source/tasks.c **** 			else
3370:..\FreeRTOS\Source/tasks.c **** 			{
3371:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3372:..\FreeRTOS\Source/tasks.c **** 			}
3373:..\FreeRTOS\Source/tasks.c **** 		}
3374:..\FreeRTOS\Source/tasks.c **** 
3375:..\FreeRTOS\Source/tasks.c **** 		return eReturn;
3376:..\FreeRTOS\Source/tasks.c **** 	}
3377:..\FreeRTOS\Source/tasks.c **** 
3378:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3379:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3380:..\FreeRTOS\Source/tasks.c **** 
3381:..\FreeRTOS\Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3382:..\FreeRTOS\Source/tasks.c **** 
3383:..\FreeRTOS\Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3384:..\FreeRTOS\Source/tasks.c **** 	{
3385:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 62


3386:..\FreeRTOS\Source/tasks.c **** 
3387:..\FreeRTOS\Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3388:..\FreeRTOS\Source/tasks.c **** 		{
3389:..\FreeRTOS\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3390:..\FreeRTOS\Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3391:..\FreeRTOS\Source/tasks.c **** 		}
3392:..\FreeRTOS\Source/tasks.c **** 	}
3393:..\FreeRTOS\Source/tasks.c **** 
3394:..\FreeRTOS\Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3395:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3396:..\FreeRTOS\Source/tasks.c **** 
3397:..\FreeRTOS\Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3398:..\FreeRTOS\Source/tasks.c **** 
3399:..\FreeRTOS\Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3400:..\FreeRTOS\Source/tasks.c **** 	{
3401:..\FreeRTOS\Source/tasks.c **** 	void *pvReturn = NULL;
3402:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
3403:..\FreeRTOS\Source/tasks.c **** 
3404:..\FreeRTOS\Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3405:..\FreeRTOS\Source/tasks.c **** 		{
3406:..\FreeRTOS\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3407:..\FreeRTOS\Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3408:..\FreeRTOS\Source/tasks.c **** 		}
3409:..\FreeRTOS\Source/tasks.c **** 		else
3410:..\FreeRTOS\Source/tasks.c **** 		{
3411:..\FreeRTOS\Source/tasks.c **** 			pvReturn = NULL;
3412:..\FreeRTOS\Source/tasks.c **** 		}
3413:..\FreeRTOS\Source/tasks.c **** 
3414:..\FreeRTOS\Source/tasks.c **** 		return pvReturn;
3415:..\FreeRTOS\Source/tasks.c **** 	}
3416:..\FreeRTOS\Source/tasks.c **** 
3417:..\FreeRTOS\Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3418:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3419:..\FreeRTOS\Source/tasks.c **** 
3420:..\FreeRTOS\Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3421:..\FreeRTOS\Source/tasks.c **** 
3422:..\FreeRTOS\Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3423:..\FreeRTOS\Source/tasks.c **** 	{
3424:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
3425:..\FreeRTOS\Source/tasks.c **** 
3426:..\FreeRTOS\Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3427:..\FreeRTOS\Source/tasks.c **** 		the calling task. */
3428:..\FreeRTOS\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3429:..\FreeRTOS\Source/tasks.c **** 
3430:..\FreeRTOS\Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3431:..\FreeRTOS\Source/tasks.c **** 	}
3432:..\FreeRTOS\Source/tasks.c **** 
3433:..\FreeRTOS\Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3434:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3435:..\FreeRTOS\Source/tasks.c **** 
3436:..\FreeRTOS\Source/tasks.c **** static void prvInitialiseTaskLists( void )
3437:..\FreeRTOS\Source/tasks.c **** {
3438:..\FreeRTOS\Source/tasks.c **** UBaseType_t uxPriority;
3439:..\FreeRTOS\Source/tasks.c **** 
3440:..\FreeRTOS\Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3441:..\FreeRTOS\Source/tasks.c **** 	{
3442:..\FreeRTOS\Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 63


3443:..\FreeRTOS\Source/tasks.c **** 	}
3444:..\FreeRTOS\Source/tasks.c **** 
3445:..\FreeRTOS\Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3446:..\FreeRTOS\Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3447:..\FreeRTOS\Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3448:..\FreeRTOS\Source/tasks.c **** 
3449:..\FreeRTOS\Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3450:..\FreeRTOS\Source/tasks.c **** 	{
3451:..\FreeRTOS\Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3452:..\FreeRTOS\Source/tasks.c **** 	}
3453:..\FreeRTOS\Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3454:..\FreeRTOS\Source/tasks.c **** 
3455:..\FreeRTOS\Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3456:..\FreeRTOS\Source/tasks.c **** 	{
3457:..\FreeRTOS\Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3458:..\FreeRTOS\Source/tasks.c **** 	}
3459:..\FreeRTOS\Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3460:..\FreeRTOS\Source/tasks.c **** 
3461:..\FreeRTOS\Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3462:..\FreeRTOS\Source/tasks.c **** 	using list2. */
3463:..\FreeRTOS\Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3464:..\FreeRTOS\Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3465:..\FreeRTOS\Source/tasks.c **** }
3466:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3467:..\FreeRTOS\Source/tasks.c **** 
3468:..\FreeRTOS\Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3469:..\FreeRTOS\Source/tasks.c **** {
3470:..\FreeRTOS\Source/tasks.c **** 
3471:..\FreeRTOS\Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3472:..\FreeRTOS\Source/tasks.c **** 
3473:..\FreeRTOS\Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3474:..\FreeRTOS\Source/tasks.c **** 	{
3475:..\FreeRTOS\Source/tasks.c **** 		TCB_t *pxTCB;
3476:..\FreeRTOS\Source/tasks.c **** 
3477:..\FreeRTOS\Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
3478:..\FreeRTOS\Source/tasks.c **** 		being called too often in the idle task. */
3479:..\FreeRTOS\Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3480:..\FreeRTOS\Source/tasks.c **** 		{
3481:..\FreeRTOS\Source/tasks.c **** 			taskENTER_CRITICAL();
3482:..\FreeRTOS\Source/tasks.c **** 			{
3483:..\FreeRTOS\Source/tasks.c **** 				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3484:..\FreeRTOS\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3485:..\FreeRTOS\Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3486:..\FreeRTOS\Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3487:..\FreeRTOS\Source/tasks.c **** 			}
3488:..\FreeRTOS\Source/tasks.c **** 			taskEXIT_CRITICAL();
3489:..\FreeRTOS\Source/tasks.c **** 
3490:..\FreeRTOS\Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3491:..\FreeRTOS\Source/tasks.c **** 		}
3492:..\FreeRTOS\Source/tasks.c **** 	}
3493:..\FreeRTOS\Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3494:..\FreeRTOS\Source/tasks.c **** }
3495:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3496:..\FreeRTOS\Source/tasks.c **** 
3497:..\FreeRTOS\Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3498:..\FreeRTOS\Source/tasks.c **** 
3499:..\FreeRTOS\Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 64


3500:..\FreeRTOS\Source/tasks.c **** 	{
3501:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
3502:..\FreeRTOS\Source/tasks.c **** 
3503:..\FreeRTOS\Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3504:..\FreeRTOS\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3505:..\FreeRTOS\Source/tasks.c **** 
3506:..\FreeRTOS\Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3507:..\FreeRTOS\Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3508:..\FreeRTOS\Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3509:..\FreeRTOS\Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3510:..\FreeRTOS\Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3511:..\FreeRTOS\Source/tasks.c **** 
3512:..\FreeRTOS\Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3513:..\FreeRTOS\Source/tasks.c **** 		{
3514:..\FreeRTOS\Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3515:..\FreeRTOS\Source/tasks.c **** 		}
3516:..\FreeRTOS\Source/tasks.c **** 		#else
3517:..\FreeRTOS\Source/tasks.c **** 		{
3518:..\FreeRTOS\Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3519:..\FreeRTOS\Source/tasks.c **** 		}
3520:..\FreeRTOS\Source/tasks.c **** 		#endif
3521:..\FreeRTOS\Source/tasks.c **** 
3522:..\FreeRTOS\Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3523:..\FreeRTOS\Source/tasks.c **** 		{
3524:..\FreeRTOS\Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3525:..\FreeRTOS\Source/tasks.c **** 		}
3526:..\FreeRTOS\Source/tasks.c **** 		#else
3527:..\FreeRTOS\Source/tasks.c **** 		{
3528:..\FreeRTOS\Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3529:..\FreeRTOS\Source/tasks.c **** 		}
3530:..\FreeRTOS\Source/tasks.c **** 		#endif
3531:..\FreeRTOS\Source/tasks.c **** 
3532:..\FreeRTOS\Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3533:..\FreeRTOS\Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3534:..\FreeRTOS\Source/tasks.c **** 		state is just set to whatever is passed in. */
3535:..\FreeRTOS\Source/tasks.c **** 		if( eState != eInvalid )
3536:..\FreeRTOS\Source/tasks.c **** 		{
3537:..\FreeRTOS\Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3538:..\FreeRTOS\Source/tasks.c **** 			{
3539:..\FreeRTOS\Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3540:..\FreeRTOS\Source/tasks.c **** 			}
3541:..\FreeRTOS\Source/tasks.c **** 			else
3542:..\FreeRTOS\Source/tasks.c **** 			{
3543:..\FreeRTOS\Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3544:..\FreeRTOS\Source/tasks.c **** 
3545:..\FreeRTOS\Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3546:..\FreeRTOS\Source/tasks.c **** 				{
3547:..\FreeRTOS\Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3548:..\FreeRTOS\Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3549:..\FreeRTOS\Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3550:..\FreeRTOS\Source/tasks.c **** 					if( eState == eSuspended )
3551:..\FreeRTOS\Source/tasks.c **** 					{
3552:..\FreeRTOS\Source/tasks.c **** 						vTaskSuspendAll();
3553:..\FreeRTOS\Source/tasks.c **** 						{
3554:..\FreeRTOS\Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3555:..\FreeRTOS\Source/tasks.c **** 							{
3556:..\FreeRTOS\Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 65


3557:..\FreeRTOS\Source/tasks.c **** 							}
3558:..\FreeRTOS\Source/tasks.c **** 						}
3559:..\FreeRTOS\Source/tasks.c **** 						( void ) xTaskResumeAll();
3560:..\FreeRTOS\Source/tasks.c **** 					}
3561:..\FreeRTOS\Source/tasks.c **** 				}
3562:..\FreeRTOS\Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3563:..\FreeRTOS\Source/tasks.c **** 			}
3564:..\FreeRTOS\Source/tasks.c **** 		}
3565:..\FreeRTOS\Source/tasks.c **** 		else
3566:..\FreeRTOS\Source/tasks.c **** 		{
3567:..\FreeRTOS\Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3568:..\FreeRTOS\Source/tasks.c **** 		}
3569:..\FreeRTOS\Source/tasks.c **** 
3570:..\FreeRTOS\Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3571:..\FreeRTOS\Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3572:..\FreeRTOS\Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3573:..\FreeRTOS\Source/tasks.c **** 		{
3574:..\FreeRTOS\Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3575:..\FreeRTOS\Source/tasks.c **** 			{
3576:..\FreeRTOS\Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3577:..\FreeRTOS\Source/tasks.c **** 			}
3578:..\FreeRTOS\Source/tasks.c **** 			#else
3579:..\FreeRTOS\Source/tasks.c **** 			{
3580:..\FreeRTOS\Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3581:..\FreeRTOS\Source/tasks.c **** 			}
3582:..\FreeRTOS\Source/tasks.c **** 			#endif
3583:..\FreeRTOS\Source/tasks.c **** 		}
3584:..\FreeRTOS\Source/tasks.c **** 		else
3585:..\FreeRTOS\Source/tasks.c **** 		{
3586:..\FreeRTOS\Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3587:..\FreeRTOS\Source/tasks.c **** 		}
3588:..\FreeRTOS\Source/tasks.c **** 	}
3589:..\FreeRTOS\Source/tasks.c **** 
3590:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3591:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3592:..\FreeRTOS\Source/tasks.c **** 
3593:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3594:..\FreeRTOS\Source/tasks.c **** 
3595:..\FreeRTOS\Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3596:..\FreeRTOS\Source/tasks.c **** 	{
3597:..\FreeRTOS\Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3598:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxTask = 0;
3599:..\FreeRTOS\Source/tasks.c **** 
3600:..\FreeRTOS\Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3601:..\FreeRTOS\Source/tasks.c **** 		{
3602:..\FreeRTOS\Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3603:..\FreeRTOS\Source/tasks.c **** 
3604:..\FreeRTOS\Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3605:..\FreeRTOS\Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3606:..\FreeRTOS\Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3607:..\FreeRTOS\Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3608:..\FreeRTOS\Source/tasks.c **** 			do
3609:..\FreeRTOS\Source/tasks.c **** 			{
3610:..\FreeRTOS\Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3611:..\FreeRTOS\Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3612:..\FreeRTOS\Source/tasks.c **** 				uxTask++;
3613:..\FreeRTOS\Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 66


3614:..\FreeRTOS\Source/tasks.c **** 		}
3615:..\FreeRTOS\Source/tasks.c **** 		else
3616:..\FreeRTOS\Source/tasks.c **** 		{
3617:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3618:..\FreeRTOS\Source/tasks.c **** 		}
3619:..\FreeRTOS\Source/tasks.c **** 
3620:..\FreeRTOS\Source/tasks.c **** 		return uxTask;
3621:..\FreeRTOS\Source/tasks.c **** 	}
3622:..\FreeRTOS\Source/tasks.c **** 
3623:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3624:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3625:..\FreeRTOS\Source/tasks.c **** 
3626:..\FreeRTOS\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3627:..\FreeRTOS\Source/tasks.c **** 
3628:..\FreeRTOS\Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3629:..\FreeRTOS\Source/tasks.c **** 	{
  92              		.loc 1 3629 0
  93              		.cfi_startproc
  94              		@ args = 0, pretend = 0, frame = 0
  95              		@ frame_needed = 0, uses_anonymous_args = 0
  96              		@ link register save eliminated.
  97              	.LVL8:
3630:..\FreeRTOS\Source/tasks.c **** 	uint32_t ulCount = 0U;
  98              		.loc 1 3630 0
  99 0000 0023     		movs	r3, #0
3631:..\FreeRTOS\Source/tasks.c **** 
3632:..\FreeRTOS\Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 100              		.loc 1 3632 0
 101 0002 01E0     		b	.L13
 102              	.LVL9:
 103              	.L14:
3633:..\FreeRTOS\Source/tasks.c **** 		{
3634:..\FreeRTOS\Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 104              		.loc 1 3634 0
 105 0004 0130     		adds	r0, r0, #1
 106              	.LVL10:
3635:..\FreeRTOS\Source/tasks.c **** 			ulCount++;
 107              		.loc 1 3635 0
 108 0006 0133     		adds	r3, r3, #1
 109              	.LVL11:
 110              	.L13:
3632:..\FreeRTOS\Source/tasks.c **** 		{
 111              		.loc 1 3632 0
 112 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 113 000a A52A     		cmp	r2, #165
 114 000c FAD0     		beq	.L14
 115              	.LVL12:
3636:..\FreeRTOS\Source/tasks.c **** 		}
3637:..\FreeRTOS\Source/tasks.c **** 
3638:..\FreeRTOS\Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3639:..\FreeRTOS\Source/tasks.c **** 
3640:..\FreeRTOS\Source/tasks.c **** 		return ( uint16_t ) ulCount;
3641:..\FreeRTOS\Source/tasks.c **** 	}
 116              		.loc 1 3641 0
 117 000e C3F38F00 		ubfx	r0, r3, #2, #16
 118              	.LVL13:
 119 0012 7047     		bx	lr
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 67


 120              		.cfi_endproc
 121              	.LFE109:
 122              		.size	prvTaskCheckFreeStackSpace, .-prvTaskCheckFreeStackSpace
 123              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 124              		.align	2
 125              		.thumb
 126              		.thumb_func
 127              		.type	prvResetNextTaskUnblockTime, %function
 128              	prvResetNextTaskUnblockTime:
 129              	.LFB112:
3642:..\FreeRTOS\Source/tasks.c **** 
3643:..\FreeRTOS\Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3644:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3645:..\FreeRTOS\Source/tasks.c **** 
3646:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3647:..\FreeRTOS\Source/tasks.c **** 
3648:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3649:..\FreeRTOS\Source/tasks.c **** 	{
3650:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
3651:..\FreeRTOS\Source/tasks.c **** 	uint8_t *pucEndOfStack;
3652:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxReturn;
3653:..\FreeRTOS\Source/tasks.c **** 
3654:..\FreeRTOS\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3655:..\FreeRTOS\Source/tasks.c **** 
3656:..\FreeRTOS\Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3657:..\FreeRTOS\Source/tasks.c **** 		{
3658:..\FreeRTOS\Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3659:..\FreeRTOS\Source/tasks.c **** 		}
3660:..\FreeRTOS\Source/tasks.c **** 		#else
3661:..\FreeRTOS\Source/tasks.c **** 		{
3662:..\FreeRTOS\Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3663:..\FreeRTOS\Source/tasks.c **** 		}
3664:..\FreeRTOS\Source/tasks.c **** 		#endif
3665:..\FreeRTOS\Source/tasks.c **** 
3666:..\FreeRTOS\Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3667:..\FreeRTOS\Source/tasks.c **** 
3668:..\FreeRTOS\Source/tasks.c **** 		return uxReturn;
3669:..\FreeRTOS\Source/tasks.c **** 	}
3670:..\FreeRTOS\Source/tasks.c **** 
3671:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3672:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3673:..\FreeRTOS\Source/tasks.c **** 
3674:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3675:..\FreeRTOS\Source/tasks.c **** 
3676:..\FreeRTOS\Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3677:..\FreeRTOS\Source/tasks.c **** 	{
3678:..\FreeRTOS\Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3679:..\FreeRTOS\Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3680:..\FreeRTOS\Source/tasks.c **** 		want to allocate and clean RAM statically. */
3681:..\FreeRTOS\Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3682:..\FreeRTOS\Source/tasks.c **** 
3683:..\FreeRTOS\Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3684:..\FreeRTOS\Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3685:..\FreeRTOS\Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3686:..\FreeRTOS\Source/tasks.c **** 		{
3687:..\FreeRTOS\Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3688:..\FreeRTOS\Source/tasks.c **** 		}
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 68


3689:..\FreeRTOS\Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3690:..\FreeRTOS\Source/tasks.c **** 
3691:..\FreeRTOS\Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3692:..\FreeRTOS\Source/tasks.c **** 		{
3693:..\FreeRTOS\Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3694:..\FreeRTOS\Source/tasks.c **** 			the stack and TCB. */
3695:..\FreeRTOS\Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3696:..\FreeRTOS\Source/tasks.c **** 			vPortFree( pxTCB );
3697:..\FreeRTOS\Source/tasks.c **** 		}
3698:..\FreeRTOS\Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated 
3699:..\FreeRTOS\Source/tasks.c **** 		{
3700:..\FreeRTOS\Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3701:..\FreeRTOS\Source/tasks.c **** 			check what was statically allocated before trying to free the
3702:..\FreeRTOS\Source/tasks.c **** 			memory. */
3703:..\FreeRTOS\Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3704:..\FreeRTOS\Source/tasks.c **** 			{
3705:..\FreeRTOS\Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3706:..\FreeRTOS\Source/tasks.c **** 				must be freed. */
3707:..\FreeRTOS\Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3708:..\FreeRTOS\Source/tasks.c **** 				vPortFree( pxTCB );
3709:..\FreeRTOS\Source/tasks.c **** 			}
3710:..\FreeRTOS\Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3711:..\FreeRTOS\Source/tasks.c **** 			{
3712:..\FreeRTOS\Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3713:..\FreeRTOS\Source/tasks.c **** 				only memory that must be freed. */
3714:..\FreeRTOS\Source/tasks.c **** 				vPortFree( pxTCB );
3715:..\FreeRTOS\Source/tasks.c **** 			}
3716:..\FreeRTOS\Source/tasks.c **** 			else
3717:..\FreeRTOS\Source/tasks.c **** 			{
3718:..\FreeRTOS\Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3719:..\FreeRTOS\Source/tasks.c **** 				nothing needs to be freed. */
3720:..\FreeRTOS\Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3721:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3722:..\FreeRTOS\Source/tasks.c **** 			}
3723:..\FreeRTOS\Source/tasks.c **** 		}
3724:..\FreeRTOS\Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3725:..\FreeRTOS\Source/tasks.c **** 	}
3726:..\FreeRTOS\Source/tasks.c **** 
3727:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3728:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3729:..\FreeRTOS\Source/tasks.c **** 
3730:..\FreeRTOS\Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3731:..\FreeRTOS\Source/tasks.c **** {
 130              		.loc 1 3731 0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 0
 133              		@ frame_needed = 0, uses_anonymous_args = 0
 134              		@ link register save eliminated.
3732:..\FreeRTOS\Source/tasks.c **** TCB_t *pxTCB;
3733:..\FreeRTOS\Source/tasks.c **** 
3734:..\FreeRTOS\Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 135              		.loc 1 3734 0
 136 0000 094B     		ldr	r3, .L20
 137 0002 9B6A     		ldr	r3, [r3, #40]
 138 0004 1B68     		ldr	r3, [r3]
 139 0006 0BB9     		cbnz	r3, .L19
 140 0008 0123     		movs	r3, #1
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 69


 141 000a 00E0     		b	.L16
 142              	.L19:
 143 000c 0023     		movs	r3, #0
 144              	.L16:
 145              		.loc 1 3734 0 is_stmt 0 discriminator 4
 146 000e 23B1     		cbz	r3, .L17
3735:..\FreeRTOS\Source/tasks.c **** 	{
3736:..\FreeRTOS\Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3737:..\FreeRTOS\Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3738:..\FreeRTOS\Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3739:..\FreeRTOS\Source/tasks.c **** 		there is an item in the delayed list. */
3740:..\FreeRTOS\Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 147              		.loc 1 3740 0 is_stmt 1
 148 0010 4FF0FF32 		mov	r2, #-1
 149 0014 044B     		ldr	r3, .L20
 150 0016 DA62     		str	r2, [r3, #44]
 151 0018 7047     		bx	lr
 152              	.L17:
3741:..\FreeRTOS\Source/tasks.c **** 	}
3742:..\FreeRTOS\Source/tasks.c **** 	else
3743:..\FreeRTOS\Source/tasks.c **** 	{
3744:..\FreeRTOS\Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3745:..\FreeRTOS\Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3746:..\FreeRTOS\Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3747:..\FreeRTOS\Source/tasks.c **** 		from the Blocked state. */
3748:..\FreeRTOS\Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 153              		.loc 1 3748 0
 154 001a 034B     		ldr	r3, .L20
 155 001c 9A6A     		ldr	r2, [r3, #40]
 156 001e D268     		ldr	r2, [r2, #12]
 157 0020 D268     		ldr	r2, [r2, #12]
 158              	.LVL14:
3749:..\FreeRTOS\Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 159              		.loc 1 3749 0
 160 0022 5268     		ldr	r2, [r2, #4]
 161              	.LVL15:
 162 0024 DA62     		str	r2, [r3, #44]
 163 0026 7047     		bx	lr
 164              	.L21:
 165              		.align	2
 166              	.L20:
 167 0028 00000000 		.word	.LANCHOR0
 168              		.cfi_endproc
 169              	.LFE112:
 170              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 171              		.section	.text.prvDeleteTCB,"ax",%progbits
 172              		.align	2
 173              		.thumb
 174              		.thumb_func
 175              		.type	prvDeleteTCB, %function
 176              	prvDeleteTCB:
 177              	.LFB111:
3677:..\FreeRTOS\Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 178              		.loc 1 3677 0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 70


 182              	.LVL16:
 183 0000 10B5     		push	{r4, lr}
 184              		.cfi_def_cfa_offset 8
 185              		.cfi_offset 4, -8
 186              		.cfi_offset 14, -4
 187 0002 0446     		mov	r4, r0
3695:..\FreeRTOS\Source/tasks.c **** 			vPortFree( pxTCB );
 188              		.loc 1 3695 0
 189 0004 006B     		ldr	r0, [r0, #48]
 190              	.LVL17:
 191 0006 FFF7FEFF 		bl	vPortFree
 192              	.LVL18:
3696:..\FreeRTOS\Source/tasks.c **** 		}
 193              		.loc 1 3696 0
 194 000a 2046     		mov	r0, r4
 195 000c FFF7FEFF 		bl	vPortFree
 196              	.LVL19:
 197 0010 10BD     		pop	{r4, pc}
 198              		.cfi_endproc
 199              	.LFE111:
 200              		.size	prvDeleteTCB, .-prvDeleteTCB
 201 0012 00BF     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 202              		.align	2
 203              		.thumb
 204              		.thumb_func
 205              		.type	prvInitialiseNewTask, %function
 206              	prvInitialiseNewTask:
 207              	.LFB70:
 831:..\FreeRTOS\Source/tasks.c **** StackType_t *pxTopOfStack;
 208              		.loc 1 831 0
 209              		.cfi_startproc
 210              		@ args = 16, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212              	.LVL20:
 213 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 214              		.cfi_def_cfa_offset 32
 215              		.cfi_offset 4, -32
 216              		.cfi_offset 5, -28
 217              		.cfi_offset 6, -24
 218              		.cfi_offset 7, -20
 219              		.cfi_offset 8, -16
 220              		.cfi_offset 9, -12
 221              		.cfi_offset 10, -8
 222              		.cfi_offset 14, -4
 223 0004 8146     		mov	r9, r0
 224 0006 0D46     		mov	r5, r1
 225 0008 1746     		mov	r7, r2
 226 000a 9A46     		mov	r10, r3
 227 000c 089E     		ldr	r6, [sp, #32]
 228 000e DDF82480 		ldr	r8, [sp, #36]
 229 0012 0A9C     		ldr	r4, [sp, #40]
 853:..\FreeRTOS\Source/tasks.c **** 	}
 230              		.loc 1 853 0
 231 0014 9200     		lsls	r2, r2, #2
 232              	.LVL21:
 233 0016 A521     		movs	r1, #165
 234              	.LVL22:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 71


 235 0018 206B     		ldr	r0, [r4, #48]
 236              	.LVL23:
 237 001a FFF7FEFF 		bl	memset
 238              	.LVL24:
 863:..\FreeRTOS\Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 239              		.loc 1 863 0
 240 001e 236B     		ldr	r3, [r4, #48]
 241 0020 07F18042 		add	r2, r7, #1073741824
 242 0024 013A     		subs	r2, r2, #1
 243 0026 03EB8207 		add	r7, r3, r2, lsl #2
 244              	.LVL25:
 864:..\FreeRTOS\Source/tasks.c **** 
 245              		.loc 1 864 0
 246 002a 27F00707 		bic	r7, r7, #7
 247              	.LVL26:
 891:..\FreeRTOS\Source/tasks.c **** 	{
 248              		.loc 1 891 0
 249 002e 0023     		movs	r3, #0
 250 0030 06E0     		b	.L25
 251              	.LVL27:
 252              	.L27:
 893:..\FreeRTOS\Source/tasks.c **** 
 253              		.loc 1 893 0
 254 0032 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 255 0034 E218     		adds	r2, r4, r3
 256 0036 82F83410 		strb	r1, [r2, #52]
 898:..\FreeRTOS\Source/tasks.c **** 		{
 257              		.loc 1 898 0
 258 003a EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 259 003c 12B1     		cbz	r2, .L26
 891:..\FreeRTOS\Source/tasks.c **** 	{
 260              		.loc 1 891 0 discriminator 2
 261 003e 0133     		adds	r3, r3, #1
 262              	.LVL28:
 263              	.L25:
 891:..\FreeRTOS\Source/tasks.c **** 	{
 264              		.loc 1 891 0 is_stmt 0 discriminator 1
 265 0040 0B2B     		cmp	r3, #11
 266 0042 F6D9     		bls	.L27
 267              	.L26:
 910:..\FreeRTOS\Source/tasks.c **** 
 268              		.loc 1 910 0 is_stmt 1
 269 0044 0023     		movs	r3, #0
 270              	.LVL29:
 271 0046 84F83F30 		strb	r3, [r4, #63]
 914:..\FreeRTOS\Source/tasks.c **** 	{
 272              		.loc 1 914 0
 273 004a 042E     		cmp	r6, #4
 274 004c 00D9     		bls	.L28
 916:..\FreeRTOS\Source/tasks.c **** 	}
 275              		.loc 1 916 0
 276 004e 0426     		movs	r6, #4
 277              	.L28:
 278              	.LVL30:
 923:..\FreeRTOS\Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 279              		.loc 1 923 0
 280 0050 E662     		str	r6, [r4, #44]
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 72


 926:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 281              		.loc 1 926 0
 282 0052 A664     		str	r6, [r4, #72]
 927:..\FreeRTOS\Source/tasks.c **** 	}
 283              		.loc 1 927 0
 284 0054 0025     		movs	r5, #0
 285              	.LVL31:
 286 0056 E564     		str	r5, [r4, #76]
 931:..\FreeRTOS\Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 287              		.loc 1 931 0
 288 0058 201D     		adds	r0, r4, #4
 289 005a FFF7FEFF 		bl	vListInitialiseItem
 290              	.LVL32:
 932:..\FreeRTOS\Source/tasks.c **** 
 291              		.loc 1 932 0
 292 005e 04F11800 		add	r0, r4, #24
 293 0062 FFF7FEFF 		bl	vListInitialiseItem
 294              	.LVL33:
 936:..\FreeRTOS\Source/tasks.c **** 
 295              		.loc 1 936 0
 296 0066 2461     		str	r4, [r4, #16]
 939:..\FreeRTOS\Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 297              		.loc 1 939 0
 298 0068 C6F10506 		rsb	r6, r6, #5
 299              	.LVL34:
 300 006c A661     		str	r6, [r4, #24]
 940:..\FreeRTOS\Source/tasks.c **** 
 301              		.loc 1 940 0
 302 006e 6462     		str	r4, [r4, #36]
 956:..\FreeRTOS\Source/tasks.c **** 	}
 303              		.loc 1 956 0
 304 0070 2565     		str	r5, [r4, #80]
 982:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 305              		.loc 1 982 0
 306 0072 6565     		str	r5, [r4, #84]
 983:..\FreeRTOS\Source/tasks.c **** 	}
 307              		.loc 1 983 0
 308 0074 84F85850 		strb	r5, [r4, #88]
1010:..\FreeRTOS\Source/tasks.c **** 	}
 309              		.loc 1 1010 0
 310 0078 5246     		mov	r2, r10
 311 007a 4946     		mov	r1, r9
 312 007c 3846     		mov	r0, r7
 313 007e FFF7FEFF 		bl	pxPortInitialiseStack
 314              	.LVL35:
 315 0082 2060     		str	r0, [r4]
1014:..\FreeRTOS\Source/tasks.c **** 	{
 316              		.loc 1 1014 0
 317 0084 B8F1000F 		cmp	r8, #0
 318 0088 01D0     		beq	.L24
1018:..\FreeRTOS\Source/tasks.c **** 	}
 319              		.loc 1 1018 0
 320 008a C8F80040 		str	r4, [r8]
 321              	.L24:
 322 008e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 323              		.cfi_endproc
 324              	.LFE70:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 73


 325              		.size	prvInitialiseNewTask, .-prvInitialiseNewTask
 326 0092 00BF     		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 327              		.align	2
 328              		.thumb
 329              		.thumb_func
 330              		.type	prvInitialiseTaskLists, %function
 331              	prvInitialiseTaskLists:
 332              	.LFB105:
3437:..\FreeRTOS\Source/tasks.c **** UBaseType_t uxPriority;
 333              		.loc 1 3437 0
 334              		.cfi_startproc
 335              		@ args = 0, pretend = 0, frame = 0
 336              		@ frame_needed = 0, uses_anonymous_args = 0
 337 0000 70B5     		push	{r4, r5, r6, lr}
 338              		.cfi_def_cfa_offset 16
 339              		.cfi_offset 4, -16
 340              		.cfi_offset 5, -12
 341              		.cfi_offset 6, -8
 342              		.cfi_offset 14, -4
 343              	.LVL36:
3440:..\FreeRTOS\Source/tasks.c **** 	{
 344              		.loc 1 3440 0
 345 0002 0024     		movs	r4, #0
 346 0004 07E0     		b	.L33
 347              	.LVL37:
 348              	.L34:
3442:..\FreeRTOS\Source/tasks.c **** 	}
 349              		.loc 1 3442 0 discriminator 3
 350 0006 04EB8402 		add	r2, r4, r4, lsl #2
 351 000a 9300     		lsls	r3, r2, #2
 352 000c 1048     		ldr	r0, .L36
 353 000e 1844     		add	r0, r0, r3
 354 0010 FFF7FEFF 		bl	vListInitialise
 355              	.LVL38:
3440:..\FreeRTOS\Source/tasks.c **** 	{
 356              		.loc 1 3440 0 discriminator 3
 357 0014 0134     		adds	r4, r4, #1
 358              	.LVL39:
 359              	.L33:
3440:..\FreeRTOS\Source/tasks.c **** 	{
 360              		.loc 1 3440 0 is_stmt 0 discriminator 1
 361 0016 042C     		cmp	r4, #4
 362 0018 F5D9     		bls	.L34
3445:..\FreeRTOS\Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 363              		.loc 1 3445 0 is_stmt 1
 364 001a 0E4C     		ldr	r4, .L36+4
 365              	.LVL40:
 366 001c 04F19406 		add	r6, r4, #148
 367 0020 3046     		mov	r0, r6
 368 0022 FFF7FEFF 		bl	vListInitialise
 369              	.LVL41:
3446:..\FreeRTOS\Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 370              		.loc 1 3446 0
 371 0026 04F1A805 		add	r5, r4, #168
 372 002a 2846     		mov	r0, r5
 373 002c FFF7FEFF 		bl	vListInitialise
 374              	.LVL42:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 74


3447:..\FreeRTOS\Source/tasks.c **** 
 375              		.loc 1 3447 0
 376 0030 04F11400 		add	r0, r4, #20
 377 0034 FFF7FEFF 		bl	vListInitialise
 378              	.LVL43:
3451:..\FreeRTOS\Source/tasks.c **** 	}
 379              		.loc 1 3451 0
 380 0038 04F1BC00 		add	r0, r4, #188
 381 003c FFF7FEFF 		bl	vListInitialise
 382              	.LVL44:
3457:..\FreeRTOS\Source/tasks.c **** 	}
 383              		.loc 1 3457 0
 384 0040 2046     		mov	r0, r4
 385 0042 FFF7FEFF 		bl	vListInitialise
 386              	.LVL45:
3463:..\FreeRTOS\Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 387              		.loc 1 3463 0
 388 0046 A662     		str	r6, [r4, #40]
3464:..\FreeRTOS\Source/tasks.c **** }
 389              		.loc 1 3464 0
 390 0048 C4F8D050 		str	r5, [r4, #208]
 391 004c 70BD     		pop	{r4, r5, r6, pc}
 392              	.L37:
 393 004e 00BF     		.align	2
 394              	.L36:
 395 0050 30000000 		.word	.LANCHOR0+48
 396 0054 00000000 		.word	.LANCHOR0
 397              		.cfi_endproc
 398              	.LFE105:
 399              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 400              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 401              		.align	2
 402              		.thumb
 403              		.thumb_func
 404              		.type	prvAddNewTaskToReadyList, %function
 405              	prvAddNewTaskToReadyList:
 406              	.LFB71:
1028:..\FreeRTOS\Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 407              		.loc 1 1028 0
 408              		.cfi_startproc
 409              		@ args = 0, pretend = 0, frame = 0
 410              		@ frame_needed = 0, uses_anonymous_args = 0
 411              	.LVL46:
 412 0000 38B5     		push	{r3, r4, r5, lr}
 413              		.cfi_def_cfa_offset 16
 414              		.cfi_offset 3, -16
 415              		.cfi_offset 4, -12
 416              		.cfi_offset 5, -8
 417              		.cfi_offset 14, -4
 418 0002 0546     		mov	r5, r0
1031:..\FreeRTOS\Source/tasks.c **** 	{
 419              		.loc 1 1031 0
 420 0004 FFF7FEFF 		bl	vPortEnterCritical
 421              	.LVL47:
1033:..\FreeRTOS\Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 422              		.loc 1 1033 0
 423 0008 264B     		ldr	r3, .L43
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 75


 424 000a D3F8D420 		ldr	r2, [r3, #212]
 425 000e 0132     		adds	r2, r2, #1
 426 0010 C3F8D420 		str	r2, [r3, #212]
1034:..\FreeRTOS\Source/tasks.c **** 		{
 427              		.loc 1 1034 0
 428 0014 D3F8D830 		ldr	r3, [r3, #216]
 429 0018 4BB9     		cbnz	r3, .L39
1038:..\FreeRTOS\Source/tasks.c **** 
 430              		.loc 1 1038 0
 431 001a 224B     		ldr	r3, .L43
 432 001c C3F8D850 		str	r5, [r3, #216]
1040:..\FreeRTOS\Source/tasks.c **** 			{
 433              		.loc 1 1040 0
 434 0020 D3F8D430 		ldr	r3, [r3, #212]
 435 0024 012B     		cmp	r3, #1
 436 0026 10D1     		bne	.L40
1045:..\FreeRTOS\Source/tasks.c **** 			}
 437              		.loc 1 1045 0
 438 0028 FFF7FEFF 		bl	prvInitialiseTaskLists
 439              	.LVL48:
 440 002c 0DE0     		b	.L40
 441              	.L39:
1057:..\FreeRTOS\Source/tasks.c **** 			{
 442              		.loc 1 1057 0
 443 002e 1D4B     		ldr	r3, .L43
 444 0030 D3F8DC30 		ldr	r3, [r3, #220]
 445 0034 4BB9     		cbnz	r3, .L40
1059:..\FreeRTOS\Source/tasks.c **** 				{
 446              		.loc 1 1059 0
 447 0036 1B4B     		ldr	r3, .L43
 448 0038 D3F8D830 		ldr	r3, [r3, #216]
 449 003c DA6A     		ldr	r2, [r3, #44]
 450 003e EB6A     		ldr	r3, [r5, #44]
 451 0040 9A42     		cmp	r2, r3
 452 0042 02D8     		bhi	.L40
1061:..\FreeRTOS\Source/tasks.c **** 				}
 453              		.loc 1 1061 0
 454 0044 174B     		ldr	r3, .L43
 455 0046 C3F8D850 		str	r5, [r3, #216]
 456              	.L40:
1074:..\FreeRTOS\Source/tasks.c **** 
 457              		.loc 1 1074 0
 458 004a 164C     		ldr	r4, .L43
 459 004c D4F8E030 		ldr	r3, [r4, #224]
 460 0050 0133     		adds	r3, r3, #1
 461 0052 C4F8E030 		str	r3, [r4, #224]
1079:..\FreeRTOS\Source/tasks.c **** 		}
 462              		.loc 1 1079 0
 463 0056 2B64     		str	r3, [r5, #64]
1084:..\FreeRTOS\Source/tasks.c **** 
 464              		.loc 1 1084 0
 465 0058 EB6A     		ldr	r3, [r5, #44]
 466 005a 0122     		movs	r2, #1
 467 005c 02FA03F1 		lsl	r1, r2, r3
 468 0060 D4F8E420 		ldr	r2, [r4, #228]
 469 0064 0A43     		orrs	r2, r2, r1
 470 0066 C4F8E420 		str	r2, [r4, #228]
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 76


 471 006a 04F13000 		add	r0, r4, #48
 472 006e 03EB8303 		add	r3, r3, r3, lsl #2
 473 0072 9A00     		lsls	r2, r3, #2
 474 0074 291D     		adds	r1, r5, #4
 475 0076 1044     		add	r0, r0, r2
 476 0078 FFF7FEFF 		bl	vListInsertEnd
 477              	.LVL49:
1088:..\FreeRTOS\Source/tasks.c **** 
 478              		.loc 1 1088 0
 479 007c FFF7FEFF 		bl	vPortExitCritical
 480              	.LVL50:
1090:..\FreeRTOS\Source/tasks.c **** 	{
 481              		.loc 1 1090 0
 482 0080 D4F8DC30 		ldr	r3, [r4, #220]
 483 0084 6BB1     		cbz	r3, .L38
1094:..\FreeRTOS\Source/tasks.c **** 		{
 484              		.loc 1 1094 0
 485 0086 D4F8D830 		ldr	r3, [r4, #216]
 486 008a DA6A     		ldr	r2, [r3, #44]
 487 008c EB6A     		ldr	r3, [r5, #44]
 488 008e 9A42     		cmp	r2, r3
 489 0090 07D2     		bcs	.L38
1096:..\FreeRTOS\Source/tasks.c **** 		}
 490              		.loc 1 1096 0
 491 0092 4FF08052 		mov	r2, #268435456
 492 0096 044B     		ldr	r3, .L43+4
 493 0098 1A60     		str	r2, [r3]
 494              		.syntax unified
 495              	@ 1096 "..\FreeRTOS\Source\tasks.c" 1
 496 009a BFF34F8F 		dsb
 497              	@ 0 "" 2
 498              	@ 1096 "..\FreeRTOS\Source\tasks.c" 1
 499 009e BFF36F8F 		isb
 500              	@ 0 "" 2
 501              		.thumb
 502              		.syntax unified
 503              	.L38:
 504 00a2 38BD     		pop	{r3, r4, r5, pc}
 505              	.LVL51:
 506              	.L44:
 507              		.align	2
 508              	.L43:
 509 00a4 00000000 		.word	.LANCHOR0
 510 00a8 04ED00E0 		.word	-536810236
 511              		.cfi_endproc
 512              	.LFE71:
 513              		.size	prvAddNewTaskToReadyList, .-prvAddNewTaskToReadyList
 514              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 515              		.align	2
 516              		.thumb
 517              		.thumb_func
 518              		.type	prvCheckTasksWaitingTermination, %function
 519              	prvCheckTasksWaitingTermination:
 520              	.LFB106:
3469:..\FreeRTOS\Source/tasks.c **** 
 521              		.loc 1 3469 0
 522              		.cfi_startproc
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 77


 523              		@ args = 0, pretend = 0, frame = 0
 524              		@ frame_needed = 0, uses_anonymous_args = 0
 525 0000 38B5     		push	{r3, r4, r5, lr}
 526              		.cfi_def_cfa_offset 16
 527              		.cfi_offset 3, -16
 528              		.cfi_offset 4, -12
 529              		.cfi_offset 5, -8
 530              		.cfi_offset 14, -4
 531              	.LBB27:
3479:..\FreeRTOS\Source/tasks.c **** 		{
 532              		.loc 1 3479 0
 533 0002 17E0     		b	.L46
 534              	.L47:
3481:..\FreeRTOS\Source/tasks.c **** 			{
 535              		.loc 1 3481 0
 536 0004 FFF7FEFF 		bl	vPortEnterCritical
 537              	.LVL52:
3483:..\FreeRTOS\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 538              		.loc 1 3483 0
 539 0008 0D4C     		ldr	r4, .L49
 540 000a D4F8C830 		ldr	r3, [r4, #200]
 541 000e DD68     		ldr	r5, [r3, #12]
 542              	.LVL53:
3484:..\FreeRTOS\Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 543              		.loc 1 3484 0
 544 0010 281D     		adds	r0, r5, #4
 545 0012 FFF7FEFF 		bl	uxListRemove
 546              	.LVL54:
3485:..\FreeRTOS\Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 547              		.loc 1 3485 0
 548 0016 D4F8D430 		ldr	r3, [r4, #212]
 549 001a 013B     		subs	r3, r3, #1
 550 001c C4F8D430 		str	r3, [r4, #212]
3486:..\FreeRTOS\Source/tasks.c **** 			}
 551              		.loc 1 3486 0
 552 0020 D4F8E830 		ldr	r3, [r4, #232]
 553 0024 013B     		subs	r3, r3, #1
 554 0026 C4F8E830 		str	r3, [r4, #232]
3488:..\FreeRTOS\Source/tasks.c **** 
 555              		.loc 1 3488 0
 556 002a FFF7FEFF 		bl	vPortExitCritical
 557              	.LVL55:
3490:..\FreeRTOS\Source/tasks.c **** 		}
 558              		.loc 1 3490 0
 559 002e 2846     		mov	r0, r5
 560 0030 FFF7FEFF 		bl	prvDeleteTCB
 561              	.LVL56:
 562              	.L46:
3479:..\FreeRTOS\Source/tasks.c **** 		{
 563              		.loc 1 3479 0
 564 0034 024B     		ldr	r3, .L49
 565 0036 D3F8E830 		ldr	r3, [r3, #232]
 566 003a 002B     		cmp	r3, #0
 567 003c E2D1     		bne	.L47
 568              	.LBE27:
3494:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 569              		.loc 1 3494 0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 78


 570 003e 38BD     		pop	{r3, r4, r5, pc}
 571              	.L50:
 572              		.align	2
 573              	.L49:
 574 0040 00000000 		.word	.LANCHOR0
 575              		.cfi_endproc
 576              	.LFE106:
 577              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 578              		.section	.text.prvIdleTask,"ax",%progbits
 579              		.align	2
 580              		.thumb
 581              		.thumb_func
 582              		.type	prvIdleTask, %function
 583              	prvIdleTask:
 584              	.LFB104:
3225:..\FreeRTOS\Source/tasks.c **** 	/* Stop warnings. */
 585              		.loc 1 3225 0
 586              		.cfi_startproc
 587              		@ Volatile: function does not return.
 588              		@ args = 0, pretend = 0, frame = 0
 589              		@ frame_needed = 0, uses_anonymous_args = 0
 590              	.LVL57:
 591 0000 08B5     		push	{r3, lr}
 592              		.cfi_def_cfa_offset 8
 593              		.cfi_offset 3, -8
 594              		.cfi_offset 14, -4
 595              	.LVL58:
 596              	.L52:
3241:..\FreeRTOS\Source/tasks.c **** 
 597              		.loc 1 3241 0 discriminator 1
 598 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 599              	.LVL59:
 600 0006 FCE7     		b	.L52
 601              		.cfi_endproc
 602              	.LFE104:
 603              		.size	prvIdleTask, .-prvIdleTask
 604              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 605              		.align	2
 606              		.thumb
 607              		.thumb_func
 608              		.type	prvAddCurrentTaskToDelayedList, %function
 609              	prvAddCurrentTaskToDelayedList:
 610              	.LFB128:
3750:..\FreeRTOS\Source/tasks.c **** 	}
3751:..\FreeRTOS\Source/tasks.c **** }
3752:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3753:..\FreeRTOS\Source/tasks.c **** 
3754:..\FreeRTOS\Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3755:..\FreeRTOS\Source/tasks.c **** 
3756:..\FreeRTOS\Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3757:..\FreeRTOS\Source/tasks.c **** 	{
3758:..\FreeRTOS\Source/tasks.c **** 	TaskHandle_t xReturn;
3759:..\FreeRTOS\Source/tasks.c **** 
3760:..\FreeRTOS\Source/tasks.c **** 		/* A critical section is not required as this is not called from
3761:..\FreeRTOS\Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3762:..\FreeRTOS\Source/tasks.c **** 		individual execution thread. */
3763:..\FreeRTOS\Source/tasks.c **** 		xReturn = pxCurrentTCB;
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 79


3764:..\FreeRTOS\Source/tasks.c **** 
3765:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
3766:..\FreeRTOS\Source/tasks.c **** 	}
3767:..\FreeRTOS\Source/tasks.c **** 
3768:..\FreeRTOS\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3769:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3770:..\FreeRTOS\Source/tasks.c **** 
3771:..\FreeRTOS\Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3772:..\FreeRTOS\Source/tasks.c **** 
3773:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3774:..\FreeRTOS\Source/tasks.c **** 	{
3775:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn;
3776:..\FreeRTOS\Source/tasks.c **** 
3777:..\FreeRTOS\Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3778:..\FreeRTOS\Source/tasks.c **** 		{
3779:..\FreeRTOS\Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3780:..\FreeRTOS\Source/tasks.c **** 		}
3781:..\FreeRTOS\Source/tasks.c **** 		else
3782:..\FreeRTOS\Source/tasks.c **** 		{
3783:..\FreeRTOS\Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3784:..\FreeRTOS\Source/tasks.c **** 			{
3785:..\FreeRTOS\Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3786:..\FreeRTOS\Source/tasks.c **** 			}
3787:..\FreeRTOS\Source/tasks.c **** 			else
3788:..\FreeRTOS\Source/tasks.c **** 			{
3789:..\FreeRTOS\Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3790:..\FreeRTOS\Source/tasks.c **** 			}
3791:..\FreeRTOS\Source/tasks.c **** 		}
3792:..\FreeRTOS\Source/tasks.c **** 
3793:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
3794:..\FreeRTOS\Source/tasks.c **** 	}
3795:..\FreeRTOS\Source/tasks.c **** 
3796:..\FreeRTOS\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3797:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3798:..\FreeRTOS\Source/tasks.c **** 
3799:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3800:..\FreeRTOS\Source/tasks.c **** 
3801:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3802:..\FreeRTOS\Source/tasks.c **** 	{
3803:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
3804:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3805:..\FreeRTOS\Source/tasks.c **** 
3806:..\FreeRTOS\Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3807:..\FreeRTOS\Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3808:..\FreeRTOS\Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3809:..\FreeRTOS\Source/tasks.c **** 		if( pxMutexHolder != NULL )
3810:..\FreeRTOS\Source/tasks.c **** 		{
3811:..\FreeRTOS\Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3812:..\FreeRTOS\Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3813:..\FreeRTOS\Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3814:..\FreeRTOS\Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3815:..\FreeRTOS\Source/tasks.c **** 			{
3816:..\FreeRTOS\Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3817:..\FreeRTOS\Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3818:..\FreeRTOS\Source/tasks.c **** 				not being used for anything else. */
3819:..\FreeRTOS\Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3820:..\FreeRTOS\Source/tasks.c **** 				{
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 80


3821:..\FreeRTOS\Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3822:..\FreeRTOS\Source/tasks.c **** 				}
3823:..\FreeRTOS\Source/tasks.c **** 				else
3824:..\FreeRTOS\Source/tasks.c **** 				{
3825:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3826:..\FreeRTOS\Source/tasks.c **** 				}
3827:..\FreeRTOS\Source/tasks.c **** 
3828:..\FreeRTOS\Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3829:..\FreeRTOS\Source/tasks.c **** 				to be moved into a new list. */
3830:..\FreeRTOS\Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3831:..\FreeRTOS\Source/tasks.c **** 				{
3832:..\FreeRTOS\Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3833:..\FreeRTOS\Source/tasks.c **** 					{
3834:..\FreeRTOS\Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3835:..\FreeRTOS\Source/tasks.c **** 					}
3836:..\FreeRTOS\Source/tasks.c **** 					else
3837:..\FreeRTOS\Source/tasks.c **** 					{
3838:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3839:..\FreeRTOS\Source/tasks.c **** 					}
3840:..\FreeRTOS\Source/tasks.c **** 
3841:..\FreeRTOS\Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3842:..\FreeRTOS\Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3843:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3844:..\FreeRTOS\Source/tasks.c **** 				}
3845:..\FreeRTOS\Source/tasks.c **** 				else
3846:..\FreeRTOS\Source/tasks.c **** 				{
3847:..\FreeRTOS\Source/tasks.c **** 					/* Just inherit the priority. */
3848:..\FreeRTOS\Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3849:..\FreeRTOS\Source/tasks.c **** 				}
3850:..\FreeRTOS\Source/tasks.c **** 
3851:..\FreeRTOS\Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3852:..\FreeRTOS\Source/tasks.c **** 
3853:..\FreeRTOS\Source/tasks.c **** 				/* Inheritance occurred. */
3854:..\FreeRTOS\Source/tasks.c **** 				xReturn = pdTRUE;
3855:..\FreeRTOS\Source/tasks.c **** 			}
3856:..\FreeRTOS\Source/tasks.c **** 			else
3857:..\FreeRTOS\Source/tasks.c **** 			{
3858:..\FreeRTOS\Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3859:..\FreeRTOS\Source/tasks.c **** 				{
3860:..\FreeRTOS\Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3861:..\FreeRTOS\Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
3862:..\FreeRTOS\Source/tasks.c **** 					current priority of the mutex holder is not lower than the
3863:..\FreeRTOS\Source/tasks.c **** 					priority of the task attempting to take the mutex.
3864:..\FreeRTOS\Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
3865:..\FreeRTOS\Source/tasks.c **** 					priority, but inheritance would have occurred if that had
3866:..\FreeRTOS\Source/tasks.c **** 					not been the case. */
3867:..\FreeRTOS\Source/tasks.c **** 					xReturn = pdTRUE;
3868:..\FreeRTOS\Source/tasks.c **** 				}
3869:..\FreeRTOS\Source/tasks.c **** 				else
3870:..\FreeRTOS\Source/tasks.c **** 				{
3871:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3872:..\FreeRTOS\Source/tasks.c **** 				}
3873:..\FreeRTOS\Source/tasks.c **** 			}
3874:..\FreeRTOS\Source/tasks.c **** 		}
3875:..\FreeRTOS\Source/tasks.c **** 		else
3876:..\FreeRTOS\Source/tasks.c **** 		{
3877:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 81


3878:..\FreeRTOS\Source/tasks.c **** 		}
3879:..\FreeRTOS\Source/tasks.c **** 
3880:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
3881:..\FreeRTOS\Source/tasks.c **** 	}
3882:..\FreeRTOS\Source/tasks.c **** 
3883:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_MUTEXES */
3884:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3885:..\FreeRTOS\Source/tasks.c **** 
3886:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3887:..\FreeRTOS\Source/tasks.c **** 
3888:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3889:..\FreeRTOS\Source/tasks.c **** 	{
3890:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3891:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3892:..\FreeRTOS\Source/tasks.c **** 
3893:..\FreeRTOS\Source/tasks.c **** 		if( pxMutexHolder != NULL )
3894:..\FreeRTOS\Source/tasks.c **** 		{
3895:..\FreeRTOS\Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3896:..\FreeRTOS\Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3897:..\FreeRTOS\Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3898:..\FreeRTOS\Source/tasks.c **** 			be the running state task. */
3899:..\FreeRTOS\Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3900:..\FreeRTOS\Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3901:..\FreeRTOS\Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3902:..\FreeRTOS\Source/tasks.c **** 
3903:..\FreeRTOS\Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3904:..\FreeRTOS\Source/tasks.c **** 			task? */
3905:..\FreeRTOS\Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3906:..\FreeRTOS\Source/tasks.c **** 			{
3907:..\FreeRTOS\Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3908:..\FreeRTOS\Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3909:..\FreeRTOS\Source/tasks.c **** 				{
3910:..\FreeRTOS\Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3911:..\FreeRTOS\Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3912:..\FreeRTOS\Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3913:..\FreeRTOS\Source/tasks.c **** 					holding task then it must be the running state task.  Remove
3914:..\FreeRTOS\Source/tasks.c **** 					the holding task from the ready list. */
3915:..\FreeRTOS\Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3916:..\FreeRTOS\Source/tasks.c **** 					{
3917:..\FreeRTOS\Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3918:..\FreeRTOS\Source/tasks.c **** 					}
3919:..\FreeRTOS\Source/tasks.c **** 					else
3920:..\FreeRTOS\Source/tasks.c **** 					{
3921:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3922:..\FreeRTOS\Source/tasks.c **** 					}
3923:..\FreeRTOS\Source/tasks.c **** 
3924:..\FreeRTOS\Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3925:..\FreeRTOS\Source/tasks.c **** 					new	ready list. */
3926:..\FreeRTOS\Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3927:..\FreeRTOS\Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3928:..\FreeRTOS\Source/tasks.c **** 
3929:..\FreeRTOS\Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3930:..\FreeRTOS\Source/tasks.c **** 					any other purpose if this task is running, and it must be
3931:..\FreeRTOS\Source/tasks.c **** 					running to give back the mutex. */
3932:..\FreeRTOS\Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3933:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3934:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 82


3935:..\FreeRTOS\Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3936:..\FreeRTOS\Source/tasks.c **** 					This is only actually required in the corner case whereby
3937:..\FreeRTOS\Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3938:..\FreeRTOS\Source/tasks.c **** 					in an order different to that in which they were taken.
3939:..\FreeRTOS\Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3940:..\FreeRTOS\Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3941:..\FreeRTOS\Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3942:..\FreeRTOS\Source/tasks.c **** 					a task is waiting on it or not. */
3943:..\FreeRTOS\Source/tasks.c **** 					xReturn = pdTRUE;
3944:..\FreeRTOS\Source/tasks.c **** 				}
3945:..\FreeRTOS\Source/tasks.c **** 				else
3946:..\FreeRTOS\Source/tasks.c **** 				{
3947:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3948:..\FreeRTOS\Source/tasks.c **** 				}
3949:..\FreeRTOS\Source/tasks.c **** 			}
3950:..\FreeRTOS\Source/tasks.c **** 			else
3951:..\FreeRTOS\Source/tasks.c **** 			{
3952:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3953:..\FreeRTOS\Source/tasks.c **** 			}
3954:..\FreeRTOS\Source/tasks.c **** 		}
3955:..\FreeRTOS\Source/tasks.c **** 		else
3956:..\FreeRTOS\Source/tasks.c **** 		{
3957:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3958:..\FreeRTOS\Source/tasks.c **** 		}
3959:..\FreeRTOS\Source/tasks.c **** 
3960:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
3961:..\FreeRTOS\Source/tasks.c **** 	}
3962:..\FreeRTOS\Source/tasks.c **** 
3963:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_MUTEXES */
3964:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3965:..\FreeRTOS\Source/tasks.c **** 
3966:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3967:..\FreeRTOS\Source/tasks.c **** 
3968:..\FreeRTOS\Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
3969:..\FreeRTOS\Source/tasks.c **** 	{
3970:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3971:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
3972:..\FreeRTOS\Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
3973:..\FreeRTOS\Source/tasks.c **** 
3974:..\FreeRTOS\Source/tasks.c **** 		if( pxMutexHolder != NULL )
3975:..\FreeRTOS\Source/tasks.c **** 		{
3976:..\FreeRTOS\Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
3977:..\FreeRTOS\Source/tasks.c **** 			one mutex. */
3978:..\FreeRTOS\Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3979:..\FreeRTOS\Source/tasks.c **** 
3980:..\FreeRTOS\Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
3981:..\FreeRTOS\Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
3982:..\FreeRTOS\Source/tasks.c **** 			holding task's base priority and the priority of the highest
3983:..\FreeRTOS\Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
3984:..\FreeRTOS\Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
3985:..\FreeRTOS\Source/tasks.c **** 			{
3986:..\FreeRTOS\Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
3987:..\FreeRTOS\Source/tasks.c **** 			}
3988:..\FreeRTOS\Source/tasks.c **** 			else
3989:..\FreeRTOS\Source/tasks.c **** 			{
3990:..\FreeRTOS\Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
3991:..\FreeRTOS\Source/tasks.c **** 			}
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 83


3992:..\FreeRTOS\Source/tasks.c **** 
3993:..\FreeRTOS\Source/tasks.c **** 			/* Does the priority need to change? */
3994:..\FreeRTOS\Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
3995:..\FreeRTOS\Source/tasks.c **** 			{
3996:..\FreeRTOS\Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
3997:..\FreeRTOS\Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
3998:..\FreeRTOS\Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
3999:..\FreeRTOS\Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4000:..\FreeRTOS\Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4001:..\FreeRTOS\Source/tasks.c **** 				{
4002:..\FreeRTOS\Source/tasks.c **** 					/* If a task has timed out because it already holds the
4003:..\FreeRTOS\Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4004:..\FreeRTOS\Source/tasks.c **** 					its own priority. */
4005:..\FreeRTOS\Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4006:..\FreeRTOS\Source/tasks.c **** 
4007:..\FreeRTOS\Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4008:..\FreeRTOS\Source/tasks.c **** 					priority to facilitate determining the subject task's
4009:..\FreeRTOS\Source/tasks.c **** 					state. */
4010:..\FreeRTOS\Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4011:..\FreeRTOS\Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4012:..\FreeRTOS\Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4013:..\FreeRTOS\Source/tasks.c **** 
4014:..\FreeRTOS\Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4015:..\FreeRTOS\Source/tasks.c **** 					being used for anything else. */
4016:..\FreeRTOS\Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4017:..\FreeRTOS\Source/tasks.c **** 					{
4018:..\FreeRTOS\Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4019:..\FreeRTOS\Source/tasks.c **** 					}
4020:..\FreeRTOS\Source/tasks.c **** 					else
4021:..\FreeRTOS\Source/tasks.c **** 					{
4022:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4023:..\FreeRTOS\Source/tasks.c **** 					}
4024:..\FreeRTOS\Source/tasks.c **** 
4025:..\FreeRTOS\Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4026:..\FreeRTOS\Source/tasks.c **** 					then the task that holds the mutex could be in either the
4027:..\FreeRTOS\Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4028:..\FreeRTOS\Source/tasks.c **** 					from its current state list if it is in the Ready state as
4029:..\FreeRTOS\Source/tasks.c **** 					the task's priority is going to change and there is one
4030:..\FreeRTOS\Source/tasks.c **** 					Ready list per priority. */
4031:..\FreeRTOS\Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4032:..\FreeRTOS\Source/tasks.c **** 					{
4033:..\FreeRTOS\Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4034:..\FreeRTOS\Source/tasks.c **** 						{
4035:..\FreeRTOS\Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4036:..\FreeRTOS\Source/tasks.c **** 						}
4037:..\FreeRTOS\Source/tasks.c **** 						else
4038:..\FreeRTOS\Source/tasks.c **** 						{
4039:..\FreeRTOS\Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4040:..\FreeRTOS\Source/tasks.c **** 						}
4041:..\FreeRTOS\Source/tasks.c **** 
4042:..\FreeRTOS\Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4043:..\FreeRTOS\Source/tasks.c **** 					}
4044:..\FreeRTOS\Source/tasks.c **** 					else
4045:..\FreeRTOS\Source/tasks.c **** 					{
4046:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4047:..\FreeRTOS\Source/tasks.c **** 					}
4048:..\FreeRTOS\Source/tasks.c **** 				}
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 84


4049:..\FreeRTOS\Source/tasks.c **** 				else
4050:..\FreeRTOS\Source/tasks.c **** 				{
4051:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4052:..\FreeRTOS\Source/tasks.c **** 				}
4053:..\FreeRTOS\Source/tasks.c **** 			}
4054:..\FreeRTOS\Source/tasks.c **** 			else
4055:..\FreeRTOS\Source/tasks.c **** 			{
4056:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4057:..\FreeRTOS\Source/tasks.c **** 			}
4058:..\FreeRTOS\Source/tasks.c **** 		}
4059:..\FreeRTOS\Source/tasks.c **** 		else
4060:..\FreeRTOS\Source/tasks.c **** 		{
4061:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4062:..\FreeRTOS\Source/tasks.c **** 		}
4063:..\FreeRTOS\Source/tasks.c **** 	}
4064:..\FreeRTOS\Source/tasks.c **** 
4065:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_MUTEXES */
4066:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4067:..\FreeRTOS\Source/tasks.c **** 
4068:..\FreeRTOS\Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4069:..\FreeRTOS\Source/tasks.c **** 
4070:..\FreeRTOS\Source/tasks.c **** 	void vTaskEnterCritical( void )
4071:..\FreeRTOS\Source/tasks.c **** 	{
4072:..\FreeRTOS\Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4073:..\FreeRTOS\Source/tasks.c **** 
4074:..\FreeRTOS\Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4075:..\FreeRTOS\Source/tasks.c **** 		{
4076:..\FreeRTOS\Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4077:..\FreeRTOS\Source/tasks.c **** 
4078:..\FreeRTOS\Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4079:..\FreeRTOS\Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4080:..\FreeRTOS\Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4081:..\FreeRTOS\Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4082:..\FreeRTOS\Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4083:..\FreeRTOS\Source/tasks.c **** 			critical section. */
4084:..\FreeRTOS\Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4085:..\FreeRTOS\Source/tasks.c **** 			{
4086:..\FreeRTOS\Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4087:..\FreeRTOS\Source/tasks.c **** 			}
4088:..\FreeRTOS\Source/tasks.c **** 		}
4089:..\FreeRTOS\Source/tasks.c **** 		else
4090:..\FreeRTOS\Source/tasks.c **** 		{
4091:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4092:..\FreeRTOS\Source/tasks.c **** 		}
4093:..\FreeRTOS\Source/tasks.c **** 	}
4094:..\FreeRTOS\Source/tasks.c **** 
4095:..\FreeRTOS\Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4096:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4097:..\FreeRTOS\Source/tasks.c **** 
4098:..\FreeRTOS\Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4099:..\FreeRTOS\Source/tasks.c **** 
4100:..\FreeRTOS\Source/tasks.c **** 	void vTaskExitCritical( void )
4101:..\FreeRTOS\Source/tasks.c **** 	{
4102:..\FreeRTOS\Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4103:..\FreeRTOS\Source/tasks.c **** 		{
4104:..\FreeRTOS\Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4105:..\FreeRTOS\Source/tasks.c **** 			{
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 85


4106:..\FreeRTOS\Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4107:..\FreeRTOS\Source/tasks.c **** 
4108:..\FreeRTOS\Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4109:..\FreeRTOS\Source/tasks.c **** 				{
4110:..\FreeRTOS\Source/tasks.c **** 					portENABLE_INTERRUPTS();
4111:..\FreeRTOS\Source/tasks.c **** 				}
4112:..\FreeRTOS\Source/tasks.c **** 				else
4113:..\FreeRTOS\Source/tasks.c **** 				{
4114:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4115:..\FreeRTOS\Source/tasks.c **** 				}
4116:..\FreeRTOS\Source/tasks.c **** 			}
4117:..\FreeRTOS\Source/tasks.c **** 			else
4118:..\FreeRTOS\Source/tasks.c **** 			{
4119:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4120:..\FreeRTOS\Source/tasks.c **** 			}
4121:..\FreeRTOS\Source/tasks.c **** 		}
4122:..\FreeRTOS\Source/tasks.c **** 		else
4123:..\FreeRTOS\Source/tasks.c **** 		{
4124:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4125:..\FreeRTOS\Source/tasks.c **** 		}
4126:..\FreeRTOS\Source/tasks.c **** 	}
4127:..\FreeRTOS\Source/tasks.c **** 
4128:..\FreeRTOS\Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4129:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4130:..\FreeRTOS\Source/tasks.c **** 
4131:..\FreeRTOS\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4132:..\FreeRTOS\Source/tasks.c **** 
4133:..\FreeRTOS\Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4134:..\FreeRTOS\Source/tasks.c **** 	{
4135:..\FreeRTOS\Source/tasks.c **** 	size_t x;
4136:..\FreeRTOS\Source/tasks.c **** 
4137:..\FreeRTOS\Source/tasks.c **** 		/* Start by copying the entire string. */
4138:..\FreeRTOS\Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4139:..\FreeRTOS\Source/tasks.c **** 
4140:..\FreeRTOS\Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4141:..\FreeRTOS\Source/tasks.c **** 		printed out. */
4142:..\FreeRTOS\Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4143:..\FreeRTOS\Source/tasks.c **** 		{
4144:..\FreeRTOS\Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4145:..\FreeRTOS\Source/tasks.c **** 		}
4146:..\FreeRTOS\Source/tasks.c **** 
4147:..\FreeRTOS\Source/tasks.c **** 		/* Terminate. */
4148:..\FreeRTOS\Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
4149:..\FreeRTOS\Source/tasks.c **** 
4150:..\FreeRTOS\Source/tasks.c **** 		/* Return the new end of string. */
4151:..\FreeRTOS\Source/tasks.c **** 		return &( pcBuffer[ x ] );
4152:..\FreeRTOS\Source/tasks.c **** 	}
4153:..\FreeRTOS\Source/tasks.c **** 
4154:..\FreeRTOS\Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4155:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4156:..\FreeRTOS\Source/tasks.c **** 
4157:..\FreeRTOS\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4158:..\FreeRTOS\Source/tasks.c **** 
4159:..\FreeRTOS\Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4160:..\FreeRTOS\Source/tasks.c **** 	{
4161:..\FreeRTOS\Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4162:..\FreeRTOS\Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 86


4163:..\FreeRTOS\Source/tasks.c **** 	char cStatus;
4164:..\FreeRTOS\Source/tasks.c **** 
4165:..\FreeRTOS\Source/tasks.c **** 		/*
4166:..\FreeRTOS\Source/tasks.c **** 		 * PLEASE NOTE:
4167:..\FreeRTOS\Source/tasks.c **** 		 *
4168:..\FreeRTOS\Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4169:..\FreeRTOS\Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4170:..\FreeRTOS\Source/tasks.c **** 		 * scheduler.
4171:..\FreeRTOS\Source/tasks.c **** 		 *
4172:..\FreeRTOS\Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4173:..\FreeRTOS\Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4174:..\FreeRTOS\Source/tasks.c **** 		 * displays task names, states and stack usage.
4175:..\FreeRTOS\Source/tasks.c **** 		 *
4176:..\FreeRTOS\Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4177:..\FreeRTOS\Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4178:..\FreeRTOS\Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4179:..\FreeRTOS\Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4180:..\FreeRTOS\Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4181:..\FreeRTOS\Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4182:..\FreeRTOS\Source/tasks.c **** 		 * snprintf() implementation!).
4183:..\FreeRTOS\Source/tasks.c **** 		 *
4184:..\FreeRTOS\Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4185:..\FreeRTOS\Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4186:..\FreeRTOS\Source/tasks.c **** 		 * through a call to vTaskList().
4187:..\FreeRTOS\Source/tasks.c **** 		 */
4188:..\FreeRTOS\Source/tasks.c **** 
4189:..\FreeRTOS\Source/tasks.c **** 
4190:..\FreeRTOS\Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4191:..\FreeRTOS\Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4192:..\FreeRTOS\Source/tasks.c **** 
4193:..\FreeRTOS\Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4194:..\FreeRTOS\Source/tasks.c **** 		function is executing. */
4195:..\FreeRTOS\Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4196:..\FreeRTOS\Source/tasks.c **** 
4197:..\FreeRTOS\Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4198:..\FreeRTOS\Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4199:..\FreeRTOS\Source/tasks.c **** 		equate to NULL. */
4200:..\FreeRTOS\Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4201:..\FreeRTOS\Source/tasks.c **** 
4202:..\FreeRTOS\Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4203:..\FreeRTOS\Source/tasks.c **** 		{
4204:..\FreeRTOS\Source/tasks.c **** 			/* Generate the (binary) data. */
4205:..\FreeRTOS\Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4206:..\FreeRTOS\Source/tasks.c **** 
4207:..\FreeRTOS\Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4208:..\FreeRTOS\Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4209:..\FreeRTOS\Source/tasks.c **** 			{
4210:..\FreeRTOS\Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4211:..\FreeRTOS\Source/tasks.c **** 				{
4212:..\FreeRTOS\Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4213:..\FreeRTOS\Source/tasks.c **** 										break;
4214:..\FreeRTOS\Source/tasks.c **** 
4215:..\FreeRTOS\Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4216:..\FreeRTOS\Source/tasks.c **** 										break;
4217:..\FreeRTOS\Source/tasks.c **** 
4218:..\FreeRTOS\Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4219:..\FreeRTOS\Source/tasks.c **** 										break;
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 87


4220:..\FreeRTOS\Source/tasks.c **** 
4221:..\FreeRTOS\Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4222:..\FreeRTOS\Source/tasks.c **** 										break;
4223:..\FreeRTOS\Source/tasks.c **** 
4224:..\FreeRTOS\Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4225:..\FreeRTOS\Source/tasks.c **** 										break;
4226:..\FreeRTOS\Source/tasks.c **** 
4227:..\FreeRTOS\Source/tasks.c **** 					default:			/* Should not get here, but it is included
4228:..\FreeRTOS\Source/tasks.c **** 										to prevent static checking errors. */
4229:..\FreeRTOS\Source/tasks.c **** 										cStatus = 0x00;
4230:..\FreeRTOS\Source/tasks.c **** 										break;
4231:..\FreeRTOS\Source/tasks.c **** 				}
4232:..\FreeRTOS\Source/tasks.c **** 
4233:..\FreeRTOS\Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4234:..\FreeRTOS\Source/tasks.c **** 				can be printed in tabular form more easily. */
4235:..\FreeRTOS\Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4236:..\FreeRTOS\Source/tasks.c **** 
4237:..\FreeRTOS\Source/tasks.c **** 				/* Write the rest of the string. */
4238:..\FreeRTOS\Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4239:..\FreeRTOS\Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4240:..\FreeRTOS\Source/tasks.c **** 			}
4241:..\FreeRTOS\Source/tasks.c **** 
4242:..\FreeRTOS\Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4243:..\FreeRTOS\Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4244:..\FreeRTOS\Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4245:..\FreeRTOS\Source/tasks.c **** 		}
4246:..\FreeRTOS\Source/tasks.c **** 		else
4247:..\FreeRTOS\Source/tasks.c **** 		{
4248:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4249:..\FreeRTOS\Source/tasks.c **** 		}
4250:..\FreeRTOS\Source/tasks.c **** 	}
4251:..\FreeRTOS\Source/tasks.c **** 
4252:..\FreeRTOS\Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4253:..\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
4254:..\FreeRTOS\Source/tasks.c **** 
4255:..\FreeRTOS\Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4256:..\FreeRTOS\Source/tasks.c **** 
4257:..\FreeRTOS\Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4258:..\FreeRTOS\Source/tasks.c **** 	{
4259:..\FreeRTOS\Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4260:..\FreeRTOS\Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4261:..\FreeRTOS\Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4262:..\FreeRTOS\Source/tasks.c **** 
4263:..\FreeRTOS\Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4264:..\FreeRTOS\Source/tasks.c **** 		{
4265:..\FreeRTOS\Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4266:..\FreeRTOS\Source/tasks.c **** 		}
4267:..\FreeRTOS\Source/tasks.c **** 		#endif
4268:..\FreeRTOS\Source/tasks.c **** 
4269:..\FreeRTOS\Source/tasks.c **** 		/*
4270:..\FreeRTOS\Source/tasks.c **** 		 * PLEASE NOTE:
4271:..\FreeRTOS\Source/tasks.c **** 		 *
4272:..\FreeRTOS\Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4273:..\FreeRTOS\Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4274:..\FreeRTOS\Source/tasks.c **** 		 * scheduler.
4275:..\FreeRTOS\Source/tasks.c **** 		 *
4276:..\FreeRTOS\Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 88


4277:..\FreeRTOS\Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4278:..\FreeRTOS\Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4279:..\FreeRTOS\Source/tasks.c **** 		 * in both absolute and percentage terms.
4280:..\FreeRTOS\Source/tasks.c **** 		 *
4281:..\FreeRTOS\Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4282:..\FreeRTOS\Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4283:..\FreeRTOS\Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4284:..\FreeRTOS\Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4285:..\FreeRTOS\Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4286:..\FreeRTOS\Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4287:..\FreeRTOS\Source/tasks.c **** 		 * a full snprintf() implementation!).
4288:..\FreeRTOS\Source/tasks.c **** 		 *
4289:..\FreeRTOS\Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4290:..\FreeRTOS\Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4291:..\FreeRTOS\Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4292:..\FreeRTOS\Source/tasks.c **** 		 */
4293:..\FreeRTOS\Source/tasks.c **** 
4294:..\FreeRTOS\Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4295:..\FreeRTOS\Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4296:..\FreeRTOS\Source/tasks.c **** 
4297:..\FreeRTOS\Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4298:..\FreeRTOS\Source/tasks.c **** 		function is executing. */
4299:..\FreeRTOS\Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4300:..\FreeRTOS\Source/tasks.c **** 
4301:..\FreeRTOS\Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4302:..\FreeRTOS\Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4303:..\FreeRTOS\Source/tasks.c **** 		equate to NULL. */
4304:..\FreeRTOS\Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4305:..\FreeRTOS\Source/tasks.c **** 
4306:..\FreeRTOS\Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4307:..\FreeRTOS\Source/tasks.c **** 		{
4308:..\FreeRTOS\Source/tasks.c **** 			/* Generate the (binary) data. */
4309:..\FreeRTOS\Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4310:..\FreeRTOS\Source/tasks.c **** 
4311:..\FreeRTOS\Source/tasks.c **** 			/* For percentage calculations. */
4312:..\FreeRTOS\Source/tasks.c **** 			ulTotalTime /= 100UL;
4313:..\FreeRTOS\Source/tasks.c **** 
4314:..\FreeRTOS\Source/tasks.c **** 			/* Avoid divide by zero errors. */
4315:..\FreeRTOS\Source/tasks.c **** 			if( ulTotalTime > 0 )
4316:..\FreeRTOS\Source/tasks.c **** 			{
4317:..\FreeRTOS\Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4318:..\FreeRTOS\Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4319:..\FreeRTOS\Source/tasks.c **** 				{
4320:..\FreeRTOS\Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4321:..\FreeRTOS\Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4322:..\FreeRTOS\Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4323:..\FreeRTOS\Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4324:..\FreeRTOS\Source/tasks.c **** 
4325:..\FreeRTOS\Source/tasks.c **** 					/* Write the task name to the string, padding with
4326:..\FreeRTOS\Source/tasks.c **** 					spaces so it can be printed in tabular form more
4327:..\FreeRTOS\Source/tasks.c **** 					easily. */
4328:..\FreeRTOS\Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4329:..\FreeRTOS\Source/tasks.c **** 
4330:..\FreeRTOS\Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4331:..\FreeRTOS\Source/tasks.c **** 					{
4332:..\FreeRTOS\Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4333:..\FreeRTOS\Source/tasks.c **** 						{
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 89


4334:..\FreeRTOS\Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4335:..\FreeRTOS\Source/tasks.c **** 						}
4336:..\FreeRTOS\Source/tasks.c **** 						#else
4337:..\FreeRTOS\Source/tasks.c **** 						{
4338:..\FreeRTOS\Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4339:..\FreeRTOS\Source/tasks.c **** 							printf() library can be used. */
4340:..\FreeRTOS\Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4341:..\FreeRTOS\Source/tasks.c **** 						}
4342:..\FreeRTOS\Source/tasks.c **** 						#endif
4343:..\FreeRTOS\Source/tasks.c **** 					}
4344:..\FreeRTOS\Source/tasks.c **** 					else
4345:..\FreeRTOS\Source/tasks.c **** 					{
4346:..\FreeRTOS\Source/tasks.c **** 						/* If the percentage is zero here then the task has
4347:..\FreeRTOS\Source/tasks.c **** 						consumed less than 1% of the total run time. */
4348:..\FreeRTOS\Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4349:..\FreeRTOS\Source/tasks.c **** 						{
4350:..\FreeRTOS\Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4351:..\FreeRTOS\Source/tasks.c **** 						}
4352:..\FreeRTOS\Source/tasks.c **** 						#else
4353:..\FreeRTOS\Source/tasks.c **** 						{
4354:..\FreeRTOS\Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4355:..\FreeRTOS\Source/tasks.c **** 							printf() library can be used. */
4356:..\FreeRTOS\Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4357:..\FreeRTOS\Source/tasks.c **** 						}
4358:..\FreeRTOS\Source/tasks.c **** 						#endif
4359:..\FreeRTOS\Source/tasks.c **** 					}
4360:..\FreeRTOS\Source/tasks.c **** 
4361:..\FreeRTOS\Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4362:..\FreeRTOS\Source/tasks.c **** 				}
4363:..\FreeRTOS\Source/tasks.c **** 			}
4364:..\FreeRTOS\Source/tasks.c **** 			else
4365:..\FreeRTOS\Source/tasks.c **** 			{
4366:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4367:..\FreeRTOS\Source/tasks.c **** 			}
4368:..\FreeRTOS\Source/tasks.c **** 
4369:..\FreeRTOS\Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4370:..\FreeRTOS\Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4371:..\FreeRTOS\Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4372:..\FreeRTOS\Source/tasks.c **** 		}
4373:..\FreeRTOS\Source/tasks.c **** 		else
4374:..\FreeRTOS\Source/tasks.c **** 		{
4375:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4376:..\FreeRTOS\Source/tasks.c **** 		}
4377:..\FreeRTOS\Source/tasks.c **** 	}
4378:..\FreeRTOS\Source/tasks.c **** 
4379:..\FreeRTOS\Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4380:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4381:..\FreeRTOS\Source/tasks.c **** 
4382:..\FreeRTOS\Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4383:..\FreeRTOS\Source/tasks.c **** {
4384:..\FreeRTOS\Source/tasks.c **** TickType_t uxReturn;
4385:..\FreeRTOS\Source/tasks.c **** 
4386:..\FreeRTOS\Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4387:..\FreeRTOS\Source/tasks.c **** 
4388:..\FreeRTOS\Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4389:..\FreeRTOS\Source/tasks.c **** 	queues and semaphores. */
4390:..\FreeRTOS\Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 90


4391:..\FreeRTOS\Source/tasks.c **** 
4392:..\FreeRTOS\Source/tasks.c **** 	return uxReturn;
4393:..\FreeRTOS\Source/tasks.c **** }
4394:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4395:..\FreeRTOS\Source/tasks.c **** 
4396:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4397:..\FreeRTOS\Source/tasks.c **** 
4398:..\FreeRTOS\Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4399:..\FreeRTOS\Source/tasks.c **** 	{
4400:..\FreeRTOS\Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4401:..\FreeRTOS\Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4402:..\FreeRTOS\Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4403:..\FreeRTOS\Source/tasks.c **** 		{
4404:..\FreeRTOS\Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4405:..\FreeRTOS\Source/tasks.c **** 		}
4406:..\FreeRTOS\Source/tasks.c **** 
4407:..\FreeRTOS\Source/tasks.c **** 		return pxCurrentTCB;
4408:..\FreeRTOS\Source/tasks.c **** 	}
4409:..\FreeRTOS\Source/tasks.c **** 
4410:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_MUTEXES */
4411:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4412:..\FreeRTOS\Source/tasks.c **** 
4413:..\FreeRTOS\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4414:..\FreeRTOS\Source/tasks.c **** 
4415:..\FreeRTOS\Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4416:..\FreeRTOS\Source/tasks.c **** 	{
4417:..\FreeRTOS\Source/tasks.c **** 	uint32_t ulReturn;
4418:..\FreeRTOS\Source/tasks.c **** 
4419:..\FreeRTOS\Source/tasks.c **** 		taskENTER_CRITICAL();
4420:..\FreeRTOS\Source/tasks.c **** 		{
4421:..\FreeRTOS\Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4422:..\FreeRTOS\Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4423:..\FreeRTOS\Source/tasks.c **** 			{
4424:..\FreeRTOS\Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4425:..\FreeRTOS\Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4426:..\FreeRTOS\Source/tasks.c **** 
4427:..\FreeRTOS\Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4428:..\FreeRTOS\Source/tasks.c **** 				{
4429:..\FreeRTOS\Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4430:..\FreeRTOS\Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4431:..\FreeRTOS\Source/tasks.c **** 
4432:..\FreeRTOS\Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4433:..\FreeRTOS\Source/tasks.c **** 					section (some will yield immediately, others wait until the
4434:..\FreeRTOS\Source/tasks.c **** 					critical section exits) - but it is not something that
4435:..\FreeRTOS\Source/tasks.c **** 					application code should ever do. */
4436:..\FreeRTOS\Source/tasks.c **** 					portYIELD_WITHIN_API();
4437:..\FreeRTOS\Source/tasks.c **** 				}
4438:..\FreeRTOS\Source/tasks.c **** 				else
4439:..\FreeRTOS\Source/tasks.c **** 				{
4440:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4441:..\FreeRTOS\Source/tasks.c **** 				}
4442:..\FreeRTOS\Source/tasks.c **** 			}
4443:..\FreeRTOS\Source/tasks.c **** 			else
4444:..\FreeRTOS\Source/tasks.c **** 			{
4445:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4446:..\FreeRTOS\Source/tasks.c **** 			}
4447:..\FreeRTOS\Source/tasks.c **** 		}
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 91


4448:..\FreeRTOS\Source/tasks.c **** 		taskEXIT_CRITICAL();
4449:..\FreeRTOS\Source/tasks.c **** 
4450:..\FreeRTOS\Source/tasks.c **** 		taskENTER_CRITICAL();
4451:..\FreeRTOS\Source/tasks.c **** 		{
4452:..\FreeRTOS\Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4453:..\FreeRTOS\Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4454:..\FreeRTOS\Source/tasks.c **** 
4455:..\FreeRTOS\Source/tasks.c **** 			if( ulReturn != 0UL )
4456:..\FreeRTOS\Source/tasks.c **** 			{
4457:..\FreeRTOS\Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4458:..\FreeRTOS\Source/tasks.c **** 				{
4459:..\FreeRTOS\Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4460:..\FreeRTOS\Source/tasks.c **** 				}
4461:..\FreeRTOS\Source/tasks.c **** 				else
4462:..\FreeRTOS\Source/tasks.c **** 				{
4463:..\FreeRTOS\Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4464:..\FreeRTOS\Source/tasks.c **** 				}
4465:..\FreeRTOS\Source/tasks.c **** 			}
4466:..\FreeRTOS\Source/tasks.c **** 			else
4467:..\FreeRTOS\Source/tasks.c **** 			{
4468:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4469:..\FreeRTOS\Source/tasks.c **** 			}
4470:..\FreeRTOS\Source/tasks.c **** 
4471:..\FreeRTOS\Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4472:..\FreeRTOS\Source/tasks.c **** 		}
4473:..\FreeRTOS\Source/tasks.c **** 		taskEXIT_CRITICAL();
4474:..\FreeRTOS\Source/tasks.c **** 
4475:..\FreeRTOS\Source/tasks.c **** 		return ulReturn;
4476:..\FreeRTOS\Source/tasks.c **** 	}
4477:..\FreeRTOS\Source/tasks.c **** 
4478:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4479:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4480:..\FreeRTOS\Source/tasks.c **** 
4481:..\FreeRTOS\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4482:..\FreeRTOS\Source/tasks.c **** 
4483:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4484:..\FreeRTOS\Source/tasks.c **** 	{
4485:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn;
4486:..\FreeRTOS\Source/tasks.c **** 
4487:..\FreeRTOS\Source/tasks.c **** 		taskENTER_CRITICAL();
4488:..\FreeRTOS\Source/tasks.c **** 		{
4489:..\FreeRTOS\Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4490:..\FreeRTOS\Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4491:..\FreeRTOS\Source/tasks.c **** 			{
4492:..\FreeRTOS\Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4493:..\FreeRTOS\Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4494:..\FreeRTOS\Source/tasks.c **** 				clear the value to zero. */
4495:..\FreeRTOS\Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4496:..\FreeRTOS\Source/tasks.c **** 
4497:..\FreeRTOS\Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4498:..\FreeRTOS\Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4499:..\FreeRTOS\Source/tasks.c **** 
4500:..\FreeRTOS\Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4501:..\FreeRTOS\Source/tasks.c **** 				{
4502:..\FreeRTOS\Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4503:..\FreeRTOS\Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4504:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 92


4505:..\FreeRTOS\Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4506:..\FreeRTOS\Source/tasks.c **** 					section (some will yield immediately, others wait until the
4507:..\FreeRTOS\Source/tasks.c **** 					critical section exits) - but it is not something that
4508:..\FreeRTOS\Source/tasks.c **** 					application code should ever do. */
4509:..\FreeRTOS\Source/tasks.c **** 					portYIELD_WITHIN_API();
4510:..\FreeRTOS\Source/tasks.c **** 				}
4511:..\FreeRTOS\Source/tasks.c **** 				else
4512:..\FreeRTOS\Source/tasks.c **** 				{
4513:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4514:..\FreeRTOS\Source/tasks.c **** 				}
4515:..\FreeRTOS\Source/tasks.c **** 			}
4516:..\FreeRTOS\Source/tasks.c **** 			else
4517:..\FreeRTOS\Source/tasks.c **** 			{
4518:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4519:..\FreeRTOS\Source/tasks.c **** 			}
4520:..\FreeRTOS\Source/tasks.c **** 		}
4521:..\FreeRTOS\Source/tasks.c **** 		taskEXIT_CRITICAL();
4522:..\FreeRTOS\Source/tasks.c **** 
4523:..\FreeRTOS\Source/tasks.c **** 		taskENTER_CRITICAL();
4524:..\FreeRTOS\Source/tasks.c **** 		{
4525:..\FreeRTOS\Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4526:..\FreeRTOS\Source/tasks.c **** 
4527:..\FreeRTOS\Source/tasks.c **** 			if( pulNotificationValue != NULL )
4528:..\FreeRTOS\Source/tasks.c **** 			{
4529:..\FreeRTOS\Source/tasks.c **** 				/* Output the current notification value, which may or may not
4530:..\FreeRTOS\Source/tasks.c **** 				have changed. */
4531:..\FreeRTOS\Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4532:..\FreeRTOS\Source/tasks.c **** 			}
4533:..\FreeRTOS\Source/tasks.c **** 
4534:..\FreeRTOS\Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4535:..\FreeRTOS\Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4536:..\FreeRTOS\Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4537:..\FreeRTOS\Source/tasks.c **** 			unblocked because of a timeout. */
4538:..\FreeRTOS\Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4539:..\FreeRTOS\Source/tasks.c **** 			{
4540:..\FreeRTOS\Source/tasks.c **** 				/* A notification was not received. */
4541:..\FreeRTOS\Source/tasks.c **** 				xReturn = pdFALSE;
4542:..\FreeRTOS\Source/tasks.c **** 			}
4543:..\FreeRTOS\Source/tasks.c **** 			else
4544:..\FreeRTOS\Source/tasks.c **** 			{
4545:..\FreeRTOS\Source/tasks.c **** 				/* A notification was already pending or a notification was
4546:..\FreeRTOS\Source/tasks.c **** 				received while the task was waiting. */
4547:..\FreeRTOS\Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4548:..\FreeRTOS\Source/tasks.c **** 				xReturn = pdTRUE;
4549:..\FreeRTOS\Source/tasks.c **** 			}
4550:..\FreeRTOS\Source/tasks.c **** 
4551:..\FreeRTOS\Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4552:..\FreeRTOS\Source/tasks.c **** 		}
4553:..\FreeRTOS\Source/tasks.c **** 		taskEXIT_CRITICAL();
4554:..\FreeRTOS\Source/tasks.c **** 
4555:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
4556:..\FreeRTOS\Source/tasks.c **** 	}
4557:..\FreeRTOS\Source/tasks.c **** 
4558:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4559:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4560:..\FreeRTOS\Source/tasks.c **** 
4561:..\FreeRTOS\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 93


4562:..\FreeRTOS\Source/tasks.c **** 
4563:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4564:..\FreeRTOS\Source/tasks.c **** 	{
4565:..\FreeRTOS\Source/tasks.c **** 	TCB_t * pxTCB;
4566:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4567:..\FreeRTOS\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4568:..\FreeRTOS\Source/tasks.c **** 
4569:..\FreeRTOS\Source/tasks.c **** 		configASSERT( xTaskToNotify );
4570:..\FreeRTOS\Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4571:..\FreeRTOS\Source/tasks.c **** 
4572:..\FreeRTOS\Source/tasks.c **** 		taskENTER_CRITICAL();
4573:..\FreeRTOS\Source/tasks.c **** 		{
4574:..\FreeRTOS\Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4575:..\FreeRTOS\Source/tasks.c **** 			{
4576:..\FreeRTOS\Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4577:..\FreeRTOS\Source/tasks.c **** 			}
4578:..\FreeRTOS\Source/tasks.c **** 
4579:..\FreeRTOS\Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4580:..\FreeRTOS\Source/tasks.c **** 
4581:..\FreeRTOS\Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4582:..\FreeRTOS\Source/tasks.c **** 
4583:..\FreeRTOS\Source/tasks.c **** 			switch( eAction )
4584:..\FreeRTOS\Source/tasks.c **** 			{
4585:..\FreeRTOS\Source/tasks.c **** 				case eSetBits	:
4586:..\FreeRTOS\Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4587:..\FreeRTOS\Source/tasks.c **** 					break;
4588:..\FreeRTOS\Source/tasks.c **** 
4589:..\FreeRTOS\Source/tasks.c **** 				case eIncrement	:
4590:..\FreeRTOS\Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4591:..\FreeRTOS\Source/tasks.c **** 					break;
4592:..\FreeRTOS\Source/tasks.c **** 
4593:..\FreeRTOS\Source/tasks.c **** 				case eSetValueWithOverwrite	:
4594:..\FreeRTOS\Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4595:..\FreeRTOS\Source/tasks.c **** 					break;
4596:..\FreeRTOS\Source/tasks.c **** 
4597:..\FreeRTOS\Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4598:..\FreeRTOS\Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4599:..\FreeRTOS\Source/tasks.c **** 					{
4600:..\FreeRTOS\Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4601:..\FreeRTOS\Source/tasks.c **** 					}
4602:..\FreeRTOS\Source/tasks.c **** 					else
4603:..\FreeRTOS\Source/tasks.c **** 					{
4604:..\FreeRTOS\Source/tasks.c **** 						/* The value could not be written to the task. */
4605:..\FreeRTOS\Source/tasks.c **** 						xReturn = pdFAIL;
4606:..\FreeRTOS\Source/tasks.c **** 					}
4607:..\FreeRTOS\Source/tasks.c **** 					break;
4608:..\FreeRTOS\Source/tasks.c **** 
4609:..\FreeRTOS\Source/tasks.c **** 				case eNoAction:
4610:..\FreeRTOS\Source/tasks.c **** 					/* The task is being notified without its notify value being
4611:..\FreeRTOS\Source/tasks.c **** 					updated. */
4612:..\FreeRTOS\Source/tasks.c **** 					break;
4613:..\FreeRTOS\Source/tasks.c **** 			}
4614:..\FreeRTOS\Source/tasks.c **** 
4615:..\FreeRTOS\Source/tasks.c **** 			traceTASK_NOTIFY();
4616:..\FreeRTOS\Source/tasks.c **** 
4617:..\FreeRTOS\Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4618:..\FreeRTOS\Source/tasks.c **** 			notification then unblock it now. */
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 94


4619:..\FreeRTOS\Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4620:..\FreeRTOS\Source/tasks.c **** 			{
4621:..\FreeRTOS\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4622:..\FreeRTOS\Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4623:..\FreeRTOS\Source/tasks.c **** 
4624:..\FreeRTOS\Source/tasks.c **** 				/* The task should not have been on an event list. */
4625:..\FreeRTOS\Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4626:..\FreeRTOS\Source/tasks.c **** 
4627:..\FreeRTOS\Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4628:..\FreeRTOS\Source/tasks.c **** 				{
4629:..\FreeRTOS\Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4630:..\FreeRTOS\Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4631:..\FreeRTOS\Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4632:..\FreeRTOS\Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4633:..\FreeRTOS\Source/tasks.c **** 					because it will automatically get reset to a new value when
4634:..\FreeRTOS\Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4635:..\FreeRTOS\Source/tasks.c **** 					tickless idling is used it might be more important to enter
4636:..\FreeRTOS\Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4637:..\FreeRTOS\Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4638:..\FreeRTOS\Source/tasks.c **** 					earliest possible time. */
4639:..\FreeRTOS\Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4640:..\FreeRTOS\Source/tasks.c **** 				}
4641:..\FreeRTOS\Source/tasks.c **** 				#endif
4642:..\FreeRTOS\Source/tasks.c **** 
4643:..\FreeRTOS\Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4644:..\FreeRTOS\Source/tasks.c **** 				{
4645:..\FreeRTOS\Source/tasks.c **** 					/* The notified task has a priority above the currently
4646:..\FreeRTOS\Source/tasks.c **** 					executing task so a yield is required. */
4647:..\FreeRTOS\Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4648:..\FreeRTOS\Source/tasks.c **** 				}
4649:..\FreeRTOS\Source/tasks.c **** 				else
4650:..\FreeRTOS\Source/tasks.c **** 				{
4651:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4652:..\FreeRTOS\Source/tasks.c **** 				}
4653:..\FreeRTOS\Source/tasks.c **** 			}
4654:..\FreeRTOS\Source/tasks.c **** 			else
4655:..\FreeRTOS\Source/tasks.c **** 			{
4656:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4657:..\FreeRTOS\Source/tasks.c **** 			}
4658:..\FreeRTOS\Source/tasks.c **** 		}
4659:..\FreeRTOS\Source/tasks.c **** 		taskEXIT_CRITICAL();
4660:..\FreeRTOS\Source/tasks.c **** 
4661:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
4662:..\FreeRTOS\Source/tasks.c **** 	}
4663:..\FreeRTOS\Source/tasks.c **** 
4664:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4665:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4666:..\FreeRTOS\Source/tasks.c **** 
4667:..\FreeRTOS\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4668:..\FreeRTOS\Source/tasks.c **** 
4669:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4670:..\FreeRTOS\Source/tasks.c **** 	{
4671:..\FreeRTOS\Source/tasks.c **** 	TCB_t * pxTCB;
4672:..\FreeRTOS\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4673:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4674:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4675:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 95


4676:..\FreeRTOS\Source/tasks.c **** 		configASSERT( xTaskToNotify );
4677:..\FreeRTOS\Source/tasks.c **** 
4678:..\FreeRTOS\Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4679:..\FreeRTOS\Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4680:..\FreeRTOS\Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4681:..\FreeRTOS\Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4682:..\FreeRTOS\Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4683:..\FreeRTOS\Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4684:..\FreeRTOS\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4685:..\FreeRTOS\Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4686:..\FreeRTOS\Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4687:..\FreeRTOS\Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4688:..\FreeRTOS\Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4689:..\FreeRTOS\Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4690:..\FreeRTOS\Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4691:..\FreeRTOS\Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4692:..\FreeRTOS\Source/tasks.c **** 		provided on the following link:
4693:..\FreeRTOS\Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4694:..\FreeRTOS\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4695:..\FreeRTOS\Source/tasks.c **** 
4696:..\FreeRTOS\Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4697:..\FreeRTOS\Source/tasks.c **** 
4698:..\FreeRTOS\Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4699:..\FreeRTOS\Source/tasks.c **** 		{
4700:..\FreeRTOS\Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4701:..\FreeRTOS\Source/tasks.c **** 			{
4702:..\FreeRTOS\Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4703:..\FreeRTOS\Source/tasks.c **** 			}
4704:..\FreeRTOS\Source/tasks.c **** 
4705:..\FreeRTOS\Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4706:..\FreeRTOS\Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4707:..\FreeRTOS\Source/tasks.c **** 
4708:..\FreeRTOS\Source/tasks.c **** 			switch( eAction )
4709:..\FreeRTOS\Source/tasks.c **** 			{
4710:..\FreeRTOS\Source/tasks.c **** 				case eSetBits	:
4711:..\FreeRTOS\Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4712:..\FreeRTOS\Source/tasks.c **** 					break;
4713:..\FreeRTOS\Source/tasks.c **** 
4714:..\FreeRTOS\Source/tasks.c **** 				case eIncrement	:
4715:..\FreeRTOS\Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4716:..\FreeRTOS\Source/tasks.c **** 					break;
4717:..\FreeRTOS\Source/tasks.c **** 
4718:..\FreeRTOS\Source/tasks.c **** 				case eSetValueWithOverwrite	:
4719:..\FreeRTOS\Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4720:..\FreeRTOS\Source/tasks.c **** 					break;
4721:..\FreeRTOS\Source/tasks.c **** 
4722:..\FreeRTOS\Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4723:..\FreeRTOS\Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4724:..\FreeRTOS\Source/tasks.c **** 					{
4725:..\FreeRTOS\Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4726:..\FreeRTOS\Source/tasks.c **** 					}
4727:..\FreeRTOS\Source/tasks.c **** 					else
4728:..\FreeRTOS\Source/tasks.c **** 					{
4729:..\FreeRTOS\Source/tasks.c **** 						/* The value could not be written to the task. */
4730:..\FreeRTOS\Source/tasks.c **** 						xReturn = pdFAIL;
4731:..\FreeRTOS\Source/tasks.c **** 					}
4732:..\FreeRTOS\Source/tasks.c **** 					break;
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 96


4733:..\FreeRTOS\Source/tasks.c **** 
4734:..\FreeRTOS\Source/tasks.c **** 				case eNoAction :
4735:..\FreeRTOS\Source/tasks.c **** 					/* The task is being notified without its notify value being
4736:..\FreeRTOS\Source/tasks.c **** 					updated. */
4737:..\FreeRTOS\Source/tasks.c **** 					break;
4738:..\FreeRTOS\Source/tasks.c **** 			}
4739:..\FreeRTOS\Source/tasks.c **** 
4740:..\FreeRTOS\Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4741:..\FreeRTOS\Source/tasks.c **** 
4742:..\FreeRTOS\Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4743:..\FreeRTOS\Source/tasks.c **** 			notification then unblock it now. */
4744:..\FreeRTOS\Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4745:..\FreeRTOS\Source/tasks.c **** 			{
4746:..\FreeRTOS\Source/tasks.c **** 				/* The task should not have been on an event list. */
4747:..\FreeRTOS\Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4748:..\FreeRTOS\Source/tasks.c **** 
4749:..\FreeRTOS\Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4750:..\FreeRTOS\Source/tasks.c **** 				{
4751:..\FreeRTOS\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4752:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4753:..\FreeRTOS\Source/tasks.c **** 				}
4754:..\FreeRTOS\Source/tasks.c **** 				else
4755:..\FreeRTOS\Source/tasks.c **** 				{
4756:..\FreeRTOS\Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4757:..\FreeRTOS\Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4758:..\FreeRTOS\Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4759:..\FreeRTOS\Source/tasks.c **** 				}
4760:..\FreeRTOS\Source/tasks.c **** 
4761:..\FreeRTOS\Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4762:..\FreeRTOS\Source/tasks.c **** 				{
4763:..\FreeRTOS\Source/tasks.c **** 					/* The notified task has a priority above the currently
4764:..\FreeRTOS\Source/tasks.c **** 					executing task so a yield is required. */
4765:..\FreeRTOS\Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4766:..\FreeRTOS\Source/tasks.c **** 					{
4767:..\FreeRTOS\Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4768:..\FreeRTOS\Source/tasks.c **** 					}
4769:..\FreeRTOS\Source/tasks.c **** 					else
4770:..\FreeRTOS\Source/tasks.c **** 					{
4771:..\FreeRTOS\Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4772:..\FreeRTOS\Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4773:..\FreeRTOS\Source/tasks.c **** 						safe FreeRTOS function. */
4774:..\FreeRTOS\Source/tasks.c **** 						xYieldPending = pdTRUE;
4775:..\FreeRTOS\Source/tasks.c **** 					}
4776:..\FreeRTOS\Source/tasks.c **** 				}
4777:..\FreeRTOS\Source/tasks.c **** 				else
4778:..\FreeRTOS\Source/tasks.c **** 				{
4779:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4780:..\FreeRTOS\Source/tasks.c **** 				}
4781:..\FreeRTOS\Source/tasks.c **** 			}
4782:..\FreeRTOS\Source/tasks.c **** 		}
4783:..\FreeRTOS\Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4784:..\FreeRTOS\Source/tasks.c **** 
4785:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
4786:..\FreeRTOS\Source/tasks.c **** 	}
4787:..\FreeRTOS\Source/tasks.c **** 
4788:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4789:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 97


4790:..\FreeRTOS\Source/tasks.c **** 
4791:..\FreeRTOS\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4792:..\FreeRTOS\Source/tasks.c **** 
4793:..\FreeRTOS\Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4794:..\FreeRTOS\Source/tasks.c **** 	{
4795:..\FreeRTOS\Source/tasks.c **** 	TCB_t * pxTCB;
4796:..\FreeRTOS\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4797:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4798:..\FreeRTOS\Source/tasks.c **** 
4799:..\FreeRTOS\Source/tasks.c **** 		configASSERT( xTaskToNotify );
4800:..\FreeRTOS\Source/tasks.c **** 
4801:..\FreeRTOS\Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4802:..\FreeRTOS\Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4803:..\FreeRTOS\Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4804:..\FreeRTOS\Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4805:..\FreeRTOS\Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4806:..\FreeRTOS\Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4807:..\FreeRTOS\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4808:..\FreeRTOS\Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4809:..\FreeRTOS\Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4810:..\FreeRTOS\Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4811:..\FreeRTOS\Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4812:..\FreeRTOS\Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4813:..\FreeRTOS\Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4814:..\FreeRTOS\Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4815:..\FreeRTOS\Source/tasks.c **** 		provided on the following link:
4816:..\FreeRTOS\Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4817:..\FreeRTOS\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4818:..\FreeRTOS\Source/tasks.c **** 
4819:..\FreeRTOS\Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4820:..\FreeRTOS\Source/tasks.c **** 
4821:..\FreeRTOS\Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4822:..\FreeRTOS\Source/tasks.c **** 		{
4823:..\FreeRTOS\Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4824:..\FreeRTOS\Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4825:..\FreeRTOS\Source/tasks.c **** 
4826:..\FreeRTOS\Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4827:..\FreeRTOS\Source/tasks.c **** 			semaphore. */
4828:..\FreeRTOS\Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4829:..\FreeRTOS\Source/tasks.c **** 
4830:..\FreeRTOS\Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4831:..\FreeRTOS\Source/tasks.c **** 
4832:..\FreeRTOS\Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4833:..\FreeRTOS\Source/tasks.c **** 			notification then unblock it now. */
4834:..\FreeRTOS\Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4835:..\FreeRTOS\Source/tasks.c **** 			{
4836:..\FreeRTOS\Source/tasks.c **** 				/* The task should not have been on an event list. */
4837:..\FreeRTOS\Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4838:..\FreeRTOS\Source/tasks.c **** 
4839:..\FreeRTOS\Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4840:..\FreeRTOS\Source/tasks.c **** 				{
4841:..\FreeRTOS\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4842:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4843:..\FreeRTOS\Source/tasks.c **** 				}
4844:..\FreeRTOS\Source/tasks.c **** 				else
4845:..\FreeRTOS\Source/tasks.c **** 				{
4846:..\FreeRTOS\Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 98


4847:..\FreeRTOS\Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4848:..\FreeRTOS\Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4849:..\FreeRTOS\Source/tasks.c **** 				}
4850:..\FreeRTOS\Source/tasks.c **** 
4851:..\FreeRTOS\Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4852:..\FreeRTOS\Source/tasks.c **** 				{
4853:..\FreeRTOS\Source/tasks.c **** 					/* The notified task has a priority above the currently
4854:..\FreeRTOS\Source/tasks.c **** 					executing task so a yield is required. */
4855:..\FreeRTOS\Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4856:..\FreeRTOS\Source/tasks.c **** 					{
4857:..\FreeRTOS\Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4858:..\FreeRTOS\Source/tasks.c **** 					}
4859:..\FreeRTOS\Source/tasks.c **** 					else
4860:..\FreeRTOS\Source/tasks.c **** 					{
4861:..\FreeRTOS\Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4862:..\FreeRTOS\Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4863:..\FreeRTOS\Source/tasks.c **** 						safe FreeRTOS function. */
4864:..\FreeRTOS\Source/tasks.c **** 						xYieldPending = pdTRUE;
4865:..\FreeRTOS\Source/tasks.c **** 					}
4866:..\FreeRTOS\Source/tasks.c **** 				}
4867:..\FreeRTOS\Source/tasks.c **** 				else
4868:..\FreeRTOS\Source/tasks.c **** 				{
4869:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4870:..\FreeRTOS\Source/tasks.c **** 				}
4871:..\FreeRTOS\Source/tasks.c **** 			}
4872:..\FreeRTOS\Source/tasks.c **** 		}
4873:..\FreeRTOS\Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4874:..\FreeRTOS\Source/tasks.c **** 	}
4875:..\FreeRTOS\Source/tasks.c **** 
4876:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4877:..\FreeRTOS\Source/tasks.c **** 
4878:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4879:..\FreeRTOS\Source/tasks.c **** 
4880:..\FreeRTOS\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4881:..\FreeRTOS\Source/tasks.c **** 
4882:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4883:..\FreeRTOS\Source/tasks.c **** 	{
4884:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
4885:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn;
4886:..\FreeRTOS\Source/tasks.c **** 
4887:..\FreeRTOS\Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4888:..\FreeRTOS\Source/tasks.c **** 		its notification state cleared. */
4889:..\FreeRTOS\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4890:..\FreeRTOS\Source/tasks.c **** 
4891:..\FreeRTOS\Source/tasks.c **** 		taskENTER_CRITICAL();
4892:..\FreeRTOS\Source/tasks.c **** 		{
4893:..\FreeRTOS\Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4894:..\FreeRTOS\Source/tasks.c **** 			{
4895:..\FreeRTOS\Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4896:..\FreeRTOS\Source/tasks.c **** 				xReturn = pdPASS;
4897:..\FreeRTOS\Source/tasks.c **** 			}
4898:..\FreeRTOS\Source/tasks.c **** 			else
4899:..\FreeRTOS\Source/tasks.c **** 			{
4900:..\FreeRTOS\Source/tasks.c **** 				xReturn = pdFAIL;
4901:..\FreeRTOS\Source/tasks.c **** 			}
4902:..\FreeRTOS\Source/tasks.c **** 		}
4903:..\FreeRTOS\Source/tasks.c **** 		taskEXIT_CRITICAL();
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 99


4904:..\FreeRTOS\Source/tasks.c **** 
4905:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
4906:..\FreeRTOS\Source/tasks.c **** 	}
4907:..\FreeRTOS\Source/tasks.c **** 
4908:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4909:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4910:..\FreeRTOS\Source/tasks.c **** 
4911:..\FreeRTOS\Source/tasks.c **** 
4912:..\FreeRTOS\Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4913:..\FreeRTOS\Source/tasks.c **** {
 611              		.loc 1 4913 0
 612              		.cfi_startproc
 613              		@ args = 0, pretend = 0, frame = 0
 614              		@ frame_needed = 0, uses_anonymous_args = 0
 615              	.LVL60:
 616 0000 70B5     		push	{r4, r5, r6, lr}
 617              		.cfi_def_cfa_offset 16
 618              		.cfi_offset 4, -16
 619              		.cfi_offset 5, -12
 620              		.cfi_offset 6, -8
 621              		.cfi_offset 14, -4
 622 0002 0446     		mov	r4, r0
 623 0004 0E46     		mov	r6, r1
4914:..\FreeRTOS\Source/tasks.c **** TickType_t xTimeToWake;
4915:..\FreeRTOS\Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 624              		.loc 1 4915 0
 625 0006 1E4B     		ldr	r3, .L60
 626 0008 D3F8EC50 		ldr	r5, [r3, #236]
 627              	.LVL61:
4916:..\FreeRTOS\Source/tasks.c **** 
4917:..\FreeRTOS\Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4918:..\FreeRTOS\Source/tasks.c **** 	{
4919:..\FreeRTOS\Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4920:..\FreeRTOS\Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4921:..\FreeRTOS\Source/tasks.c **** 		when the task leaves the Blocked state. */
4922:..\FreeRTOS\Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4923:..\FreeRTOS\Source/tasks.c **** 	}
4924:..\FreeRTOS\Source/tasks.c **** 	#endif
4925:..\FreeRTOS\Source/tasks.c **** 
4926:..\FreeRTOS\Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4927:..\FreeRTOS\Source/tasks.c **** 	as the same list item is used for both lists. */
4928:..\FreeRTOS\Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 628              		.loc 1 4928 0
 629 000c D3F8D800 		ldr	r0, [r3, #216]
 630              	.LVL62:
 631 0010 0430     		adds	r0, r0, #4
 632 0012 FFF7FEFF 		bl	uxListRemove
 633              	.LVL63:
 634 0016 60B9     		cbnz	r0, .L55
4929:..\FreeRTOS\Source/tasks.c **** 	{
4930:..\FreeRTOS\Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4931:..\FreeRTOS\Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4932:..\FreeRTOS\Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 635              		.loc 1 4932 0
 636 0018 194B     		ldr	r3, .L60
 637 001a D3F8D820 		ldr	r2, [r3, #216]
 638 001e D16A     		ldr	r1, [r2, #44]
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 100


 639 0020 0122     		movs	r2, #1
 640 0022 02FA01F1 		lsl	r1, r2, r1
 641 0026 D3F8E420 		ldr	r2, [r3, #228]
 642 002a 22EA0102 		bic	r2, r2, r1
 643 002e C3F8E420 		str	r2, [r3, #228]
 644              	.L55:
4933:..\FreeRTOS\Source/tasks.c **** 	}
4934:..\FreeRTOS\Source/tasks.c **** 	else
4935:..\FreeRTOS\Source/tasks.c **** 	{
4936:..\FreeRTOS\Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4937:..\FreeRTOS\Source/tasks.c **** 	}
4938:..\FreeRTOS\Source/tasks.c **** 
4939:..\FreeRTOS\Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4940:..\FreeRTOS\Source/tasks.c **** 	{
4941:..\FreeRTOS\Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 645              		.loc 1 4941 0
 646 0032 B4F1FF3F 		cmp	r4, #-1
 647 0036 07D1     		bne	.L56
 648              		.loc 1 4941 0 is_stmt 0 discriminator 1
 649 0038 36B1     		cbz	r6, .L56
4942:..\FreeRTOS\Source/tasks.c **** 		{
4943:..\FreeRTOS\Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4944:..\FreeRTOS\Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4945:..\FreeRTOS\Source/tasks.c **** 			indefinitely. */
4946:..\FreeRTOS\Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 650              		.loc 1 4946 0 is_stmt 1
 651 003a 1148     		ldr	r0, .L60
 652 003c D0F8D810 		ldr	r1, [r0, #216]
 653 0040 0431     		adds	r1, r1, #4
 654 0042 FFF7FEFF 		bl	vListInsertEnd
 655              	.LVL64:
 656 0046 70BD     		pop	{r4, r5, r6, pc}
 657              	.LVL65:
 658              	.L56:
4947:..\FreeRTOS\Source/tasks.c **** 		}
4948:..\FreeRTOS\Source/tasks.c **** 		else
4949:..\FreeRTOS\Source/tasks.c **** 		{
4950:..\FreeRTOS\Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4951:..\FreeRTOS\Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4952:..\FreeRTOS\Source/tasks.c **** 			kernel will manage it correctly. */
4953:..\FreeRTOS\Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 659              		.loc 1 4953 0
 660 0048 2C44     		add	r4, r4, r5
 661              	.LVL66:
4954:..\FreeRTOS\Source/tasks.c **** 
4955:..\FreeRTOS\Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4956:..\FreeRTOS\Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 662              		.loc 1 4956 0
 663 004a 0D4B     		ldr	r3, .L60
 664 004c D3F8D830 		ldr	r3, [r3, #216]
 665 0050 5C60     		str	r4, [r3, #4]
4957:..\FreeRTOS\Source/tasks.c **** 
4958:..\FreeRTOS\Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 666              		.loc 1 4958 0
 667 0052 A542     		cmp	r5, r4
 668 0054 08D9     		bls	.L58
4959:..\FreeRTOS\Source/tasks.c **** 			{
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 101


4960:..\FreeRTOS\Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4961:..\FreeRTOS\Source/tasks.c **** 				list. */
4962:..\FreeRTOS\Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 669              		.loc 1 4962 0
 670 0056 0A4B     		ldr	r3, .L60
 671 0058 D3F8D000 		ldr	r0, [r3, #208]
 672 005c D3F8D810 		ldr	r1, [r3, #216]
 673 0060 0431     		adds	r1, r1, #4
 674 0062 FFF7FEFF 		bl	vListInsert
 675              	.LVL67:
 676 0066 70BD     		pop	{r4, r5, r6, pc}
 677              	.LVL68:
 678              	.L58:
4963:..\FreeRTOS\Source/tasks.c **** 			}
4964:..\FreeRTOS\Source/tasks.c **** 			else
4965:..\FreeRTOS\Source/tasks.c **** 			{
4966:..\FreeRTOS\Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4967:..\FreeRTOS\Source/tasks.c **** 				is used. */
4968:..\FreeRTOS\Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 679              		.loc 1 4968 0
 680 0068 054D     		ldr	r5, .L60
 681              	.LVL69:
 682 006a A86A     		ldr	r0, [r5, #40]
 683 006c D5F8D810 		ldr	r1, [r5, #216]
 684 0070 0431     		adds	r1, r1, #4
 685 0072 FFF7FEFF 		bl	vListInsert
 686              	.LVL70:
4969:..\FreeRTOS\Source/tasks.c **** 
4970:..\FreeRTOS\Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4971:..\FreeRTOS\Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4972:..\FreeRTOS\Source/tasks.c **** 				needs to be updated too. */
4973:..\FreeRTOS\Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 687              		.loc 1 4973 0
 688 0076 EB6A     		ldr	r3, [r5, #44]
 689 0078 9C42     		cmp	r4, r3
 690 007a 00D2     		bcs	.L54
4974:..\FreeRTOS\Source/tasks.c **** 				{
4975:..\FreeRTOS\Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 691              		.loc 1 4975 0
 692 007c EC62     		str	r4, [r5, #44]
 693              	.L54:
 694 007e 70BD     		pop	{r4, r5, r6, pc}
 695              	.LVL71:
 696              	.L61:
 697              		.align	2
 698              	.L60:
 699 0080 00000000 		.word	.LANCHOR0
 700              		.cfi_endproc
 701              	.LFE128:
 702              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 703              		.section	.text.prvWriteNameToBuffer,"ax",%progbits
 704              		.align	2
 705              		.thumb
 706              		.thumb_func
 707              		.type	prvWriteNameToBuffer, %function
 708              	prvWriteNameToBuffer:
 709              	.LFB117:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 102


4134:..\FreeRTOS\Source/tasks.c **** 	size_t x;
 710              		.loc 1 4134 0
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 0
 713              		@ frame_needed = 0, uses_anonymous_args = 0
 714              	.LVL72:
 715 0000 10B5     		push	{r4, lr}
 716              		.cfi_def_cfa_offset 8
 717              		.cfi_offset 4, -8
 718              		.cfi_offset 14, -4
 719 0002 0446     		mov	r4, r0
4138:..\FreeRTOS\Source/tasks.c **** 
 720              		.loc 1 4138 0
 721 0004 FFF7FEFF 		bl	strcpy
 722              	.LVL73:
4142:..\FreeRTOS\Source/tasks.c **** 		{
 723              		.loc 1 4142 0
 724 0008 2046     		mov	r0, r4
 725 000a FFF7FEFF 		bl	strlen
 726              	.LVL74:
 727 000e 02E0     		b	.L63
 728              	.L64:
4144:..\FreeRTOS\Source/tasks.c **** 		}
 729              		.loc 1 4144 0 discriminator 3
 730 0010 2023     		movs	r3, #32
 731 0012 2354     		strb	r3, [r4, r0]
4142:..\FreeRTOS\Source/tasks.c **** 		{
 732              		.loc 1 4142 0 discriminator 3
 733 0014 0130     		adds	r0, r0, #1
 734              	.LVL75:
 735              	.L63:
4142:..\FreeRTOS\Source/tasks.c **** 		{
 736              		.loc 1 4142 0 is_stmt 0 discriminator 1
 737 0016 0A28     		cmp	r0, #10
 738 0018 FAD9     		bls	.L64
4148:..\FreeRTOS\Source/tasks.c **** 
 739              		.loc 1 4148 0 is_stmt 1
 740 001a 0023     		movs	r3, #0
 741 001c 2354     		strb	r3, [r4, r0]
4152:..\FreeRTOS\Source/tasks.c **** 
 742              		.loc 1 4152 0
 743 001e 2044     		add	r0, r0, r4
 744              	.LVL76:
 745 0020 10BD     		pop	{r4, pc}
 746              		.cfi_endproc
 747              	.LFE117:
 748              		.size	prvWriteNameToBuffer, .-prvWriteNameToBuffer
 749 0022 00BF     		.section	.text.xTaskCreate,"ax",%progbits
 750              		.align	2
 751              		.global	xTaskCreate
 752              		.thumb
 753              		.thumb_func
 754              		.type	xTaskCreate, %function
 755              	xTaskCreate:
 756              	.LFB69:
 738:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxNewTCB;
 757              		.loc 1 738 0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 103


 758              		.cfi_startproc
 759              		@ args = 8, pretend = 0, frame = 0
 760              		@ frame_needed = 0, uses_anonymous_args = 0
 761              	.LVL77:
 762 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 763              		.cfi_def_cfa_offset 28
 764              		.cfi_offset 4, -28
 765              		.cfi_offset 5, -24
 766              		.cfi_offset 6, -20
 767              		.cfi_offset 7, -16
 768              		.cfi_offset 8, -12
 769              		.cfi_offset 9, -8
 770              		.cfi_offset 14, -4
 771 0004 85B0     		sub	sp, sp, #20
 772              		.cfi_def_cfa_offset 48
 773 0006 0646     		mov	r6, r0
 774 0008 0F46     		mov	r7, r1
 775 000a 1546     		mov	r5, r2
 776 000c 9846     		mov	r8, r3
 777              	.LBB28:
 772:..\FreeRTOS\Source/tasks.c **** 
 778              		.loc 1 772 0
 779 000e 9000     		lsls	r0, r2, #2
 780              	.LVL78:
 781 0010 FFF7FEFF 		bl	pvPortMalloc
 782              	.LVL79:
 774:..\FreeRTOS\Source/tasks.c **** 			{
 783              		.loc 1 774 0
 784 0014 60B1     		cbz	r0, .L70
 785 0016 8146     		mov	r9, r0
 777:..\FreeRTOS\Source/tasks.c **** 
 786              		.loc 1 777 0
 787 0018 5C20     		movs	r0, #92
 788              	.LVL80:
 789 001a FFF7FEFF 		bl	pvPortMalloc
 790              	.LVL81:
 779:..\FreeRTOS\Source/tasks.c **** 				{
 791              		.loc 1 779 0
 792 001e 0446     		mov	r4, r0
 793 0020 10B1     		cbz	r0, .L68
 782:..\FreeRTOS\Source/tasks.c **** 				}
 794              		.loc 1 782 0
 795 0022 C0F83090 		str	r9, [r0, #48]
 796 0026 04E0     		b	.L67
 797              	.L68:
 788:..\FreeRTOS\Source/tasks.c **** 				}
 798              		.loc 1 788 0
 799 0028 4846     		mov	r0, r9
 800              	.LVL82:
 801 002a FFF7FEFF 		bl	vPortFree
 802              	.LVL83:
 803 002e 00E0     		b	.L67
 804              	.LVL84:
 805              	.L70:
 793:..\FreeRTOS\Source/tasks.c **** 			}
 806              		.loc 1 793 0
 807 0030 0024     		movs	r4, #0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 104


 808              	.LVL85:
 809              	.L67:
 810              	.LBE28:
 798:..\FreeRTOS\Source/tasks.c **** 		{
 811              		.loc 1 798 0
 812 0032 8CB1     		cbz	r4, .L71
 808:..\FreeRTOS\Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 813              		.loc 1 808 0
 814 0034 0023     		movs	r3, #0
 815 0036 0393     		str	r3, [sp, #12]
 816 0038 0294     		str	r4, [sp, #8]
 817 003a 0D9B     		ldr	r3, [sp, #52]
 818 003c 0193     		str	r3, [sp, #4]
 819 003e 0C9B     		ldr	r3, [sp, #48]
 820 0040 0093     		str	r3, [sp]
 821 0042 4346     		mov	r3, r8
 822 0044 2A46     		mov	r2, r5
 823 0046 3946     		mov	r1, r7
 824 0048 3046     		mov	r0, r6
 825 004a FFF7FEFF 		bl	prvInitialiseNewTask
 826              	.LVL86:
 809:..\FreeRTOS\Source/tasks.c **** 			xReturn = pdPASS;
 827              		.loc 1 809 0
 828 004e 2046     		mov	r0, r4
 829 0050 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 830              	.LVL87:
 810:..\FreeRTOS\Source/tasks.c **** 		}
 831              		.loc 1 810 0
 832 0054 0120     		movs	r0, #1
 833 0056 01E0     		b	.L69
 834              	.LVL88:
 835              	.L71:
 814:..\FreeRTOS\Source/tasks.c **** 		}
 836              		.loc 1 814 0
 837 0058 4FF0FF30 		mov	r0, #-1
 838              	.L69:
 839              	.LVL89:
 818:..\FreeRTOS\Source/tasks.c **** 
 840              		.loc 1 818 0
 841 005c 05B0     		add	sp, sp, #20
 842              		.cfi_def_cfa_offset 28
 843              		@ sp needed
 844 005e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 845              		.cfi_endproc
 846              	.LFE69:
 847              		.size	xTaskCreate, .-xTaskCreate
 848 0062 00BF     		.section	.text.vTaskDelete,"ax",%progbits
 849              		.align	2
 850              		.global	vTaskDelete
 851              		.thumb
 852              		.thumb_func
 853              		.type	vTaskDelete, %function
 854              	vTaskDelete:
 855              	.LFB72:
1113:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
 856              		.loc 1 1113 0
 857              		.cfi_startproc
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 105


 858              		@ args = 0, pretend = 0, frame = 0
 859              		@ frame_needed = 0, uses_anonymous_args = 0
 860              	.LVL90:
 861 0000 70B5     		push	{r4, r5, r6, lr}
 862              		.cfi_def_cfa_offset 16
 863              		.cfi_offset 4, -16
 864              		.cfi_offset 5, -12
 865              		.cfi_offset 6, -8
 866              		.cfi_offset 14, -4
 867 0002 0446     		mov	r4, r0
1116:..\FreeRTOS\Source/tasks.c **** 		{
 868              		.loc 1 1116 0
 869 0004 FFF7FEFF 		bl	vPortEnterCritical
 870              	.LVL91:
1120:..\FreeRTOS\Source/tasks.c **** 
 871              		.loc 1 1120 0
 872 0008 14B9     		cbnz	r4, .L74
1120:..\FreeRTOS\Source/tasks.c **** 
 873              		.loc 1 1120 0 is_stmt 0 discriminator 1
 874 000a 2A4B     		ldr	r3, .L81
 875 000c D3F8D840 		ldr	r4, [r3, #216]
 876              	.LVL92:
 877              	.L74:
1123:..\FreeRTOS\Source/tasks.c **** 			{
 878              		.loc 1 1123 0 is_stmt 1 discriminator 4
 879 0010 251D     		adds	r5, r4, #4
 880 0012 2846     		mov	r0, r5
 881 0014 FFF7FEFF 		bl	uxListRemove
 882              	.LVL93:
 883 0018 80B9     		cbnz	r0, .L75
1125:..\FreeRTOS\Source/tasks.c **** 			}
 884              		.loc 1 1125 0
 885 001a E26A     		ldr	r2, [r4, #44]
 886 001c 02EB8201 		add	r1, r2, r2, lsl #2
 887 0020 8B00     		lsls	r3, r1, #2
 888 0022 2449     		ldr	r1, .L81
 889 0024 0B44     		add	r3, r3, r1
 890 0026 1B6B     		ldr	r3, [r3, #48]
 891 0028 43B9     		cbnz	r3, .L75
1125:..\FreeRTOS\Source/tasks.c **** 			}
 892              		.loc 1 1125 0 is_stmt 0 discriminator 1
 893 002a 0123     		movs	r3, #1
 894 002c 03FA02F2 		lsl	r2, r3, r2
 895 0030 D1F8E430 		ldr	r3, [r1, #228]
 896 0034 23EA0202 		bic	r2, r3, r2
 897 0038 C1F8E420 		str	r2, [r1, #228]
 898              	.L75:
1133:..\FreeRTOS\Source/tasks.c **** 			{
 899              		.loc 1 1133 0 is_stmt 1
 900 003c A36A     		ldr	r3, [r4, #40]
 901 003e 1BB1     		cbz	r3, .L76
1135:..\FreeRTOS\Source/tasks.c **** 			}
 902              		.loc 1 1135 0
 903 0040 04F11800 		add	r0, r4, #24
 904 0044 FFF7FEFF 		bl	uxListRemove
 905              	.LVL94:
 906              	.L76:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 106


1146:..\FreeRTOS\Source/tasks.c **** 
 907              		.loc 1 1146 0
 908 0048 1A4B     		ldr	r3, .L81
 909 004a D3F8E020 		ldr	r2, [r3, #224]
 910 004e 0132     		adds	r2, r2, #1
 911 0050 C3F8E020 		str	r2, [r3, #224]
1148:..\FreeRTOS\Source/tasks.c **** 			{
 912              		.loc 1 1148 0
 913 0054 D3F8D830 		ldr	r3, [r3, #216]
 914 0058 9C42     		cmp	r4, r3
 915 005a 0BD1     		bne	.L77
1155:..\FreeRTOS\Source/tasks.c **** 
 916              		.loc 1 1155 0
 917 005c 154E     		ldr	r6, .L81
 918 005e 2946     		mov	r1, r5
 919 0060 06F1BC00 		add	r0, r6, #188
 920 0064 FFF7FEFF 		bl	vListInsertEnd
 921              	.LVL95:
1160:..\FreeRTOS\Source/tasks.c **** 
 922              		.loc 1 1160 0
 923 0068 D6F8E830 		ldr	r3, [r6, #232]
 924 006c 0133     		adds	r3, r3, #1
 925 006e C6F8E830 		str	r3, [r6, #232]
 926 0072 0AE0     		b	.L78
 927              	.L77:
1171:..\FreeRTOS\Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 928              		.loc 1 1171 0
 929 0074 0F4A     		ldr	r2, .L81
 930 0076 D2F8D430 		ldr	r3, [r2, #212]
 931 007a 013B     		subs	r3, r3, #1
 932 007c C2F8D430 		str	r3, [r2, #212]
1172:..\FreeRTOS\Source/tasks.c **** 
 933              		.loc 1 1172 0
 934 0080 2046     		mov	r0, r4
 935 0082 FFF7FEFF 		bl	prvDeleteTCB
 936              	.LVL96:
1176:..\FreeRTOS\Source/tasks.c **** 			}
 937              		.loc 1 1176 0
 938 0086 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 939              	.LVL97:
 940              	.L78:
1181:..\FreeRTOS\Source/tasks.c **** 
 941              		.loc 1 1181 0
 942 008a FFF7FEFF 		bl	vPortExitCritical
 943              	.LVL98:
1185:..\FreeRTOS\Source/tasks.c **** 		{
 944              		.loc 1 1185 0
 945 008e 094B     		ldr	r3, .L81
 946 0090 D3F8DC30 		ldr	r3, [r3, #220]
 947 0094 63B1     		cbz	r3, .L73
1187:..\FreeRTOS\Source/tasks.c **** 			{
 948              		.loc 1 1187 0
 949 0096 074B     		ldr	r3, .L81
 950 0098 D3F8D830 		ldr	r3, [r3, #216]
 951 009c 9C42     		cmp	r4, r3
 952 009e 07D1     		bne	.L73
1190:..\FreeRTOS\Source/tasks.c **** 			}
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 107


 953              		.loc 1 1190 0
 954 00a0 4FF08052 		mov	r2, #268435456
 955 00a4 044B     		ldr	r3, .L81+4
 956 00a6 1A60     		str	r2, [r3]
 957              		.syntax unified
 958              	@ 1190 "..\FreeRTOS\Source\tasks.c" 1
 959 00a8 BFF34F8F 		dsb
 960              	@ 0 "" 2
 961              	@ 1190 "..\FreeRTOS\Source\tasks.c" 1
 962 00ac BFF36F8F 		isb
 963              	@ 0 "" 2
 964              		.thumb
 965              		.syntax unified
 966              	.L73:
 967 00b0 70BD     		pop	{r4, r5, r6, pc}
 968              	.LVL99:
 969              	.L82:
 970 00b2 00BF     		.align	2
 971              	.L81:
 972 00b4 00000000 		.word	.LANCHOR0
 973 00b8 04ED00E0 		.word	-536810236
 974              		.cfi_endproc
 975              	.LFE72:
 976              		.size	vTaskDelete, .-vTaskDelete
 977              		.section	.text.eTaskGetState,"ax",%progbits
 978              		.align	2
 979              		.global	eTaskGetState
 980              		.thumb
 981              		.thumb_func
 982              		.type	eTaskGetState, %function
 983              	eTaskGetState:
 984              	.LFB75:
1334:..\FreeRTOS\Source/tasks.c **** 	eTaskState eReturn;
 985              		.loc 1 1334 0
 986              		.cfi_startproc
 987              		@ args = 0, pretend = 0, frame = 0
 988              		@ frame_needed = 0, uses_anonymous_args = 0
 989              	.LVL100:
 990 0000 38B5     		push	{r3, r4, r5, lr}
 991              		.cfi_def_cfa_offset 16
 992              		.cfi_offset 3, -16
 993              		.cfi_offset 4, -12
 994              		.cfi_offset 5, -8
 995              		.cfi_offset 14, -4
 996              	.LVL101:
1341:..\FreeRTOS\Source/tasks.c **** 		{
 997              		.loc 1 1341 0
 998 0002 164B     		ldr	r3, .L93
 999 0004 D3F8D830 		ldr	r3, [r3, #216]
 1000 0008 9842     		cmp	r0, r3
 1001 000a 1BD0     		beq	.L86
 1002 000c 0446     		mov	r4, r0
1348:..\FreeRTOS\Source/tasks.c **** 			{
 1003              		.loc 1 1348 0
 1004 000e FFF7FEFF 		bl	vPortEnterCritical
 1005              	.LVL102:
1350:..\FreeRTOS\Source/tasks.c **** 			}
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 108


 1006              		.loc 1 1350 0
 1007 0012 6569     		ldr	r5, [r4, #20]
 1008              	.LVL103:
1352:..\FreeRTOS\Source/tasks.c **** 
 1009              		.loc 1 1352 0
 1010 0014 FFF7FEFF 		bl	vPortExitCritical
 1011              	.LVL104:
1354:..\FreeRTOS\Source/tasks.c **** 			{
 1012              		.loc 1 1354 0
 1013 0018 104B     		ldr	r3, .L93
 1014 001a 9B6A     		ldr	r3, [r3, #40]
 1015 001c 9D42     		cmp	r5, r3
 1016 001e 13D0     		beq	.L87
1354:..\FreeRTOS\Source/tasks.c **** 			{
 1017              		.loc 1 1354 0 is_stmt 0 discriminator 1
 1018 0020 0E4B     		ldr	r3, .L93
 1019 0022 D3F8D030 		ldr	r3, [r3, #208]
 1020 0026 9D42     		cmp	r5, r3
 1021 0028 10D0     		beq	.L88
1362:..\FreeRTOS\Source/tasks.c **** 				{
 1022              		.loc 1 1362 0 is_stmt 1
 1023 002a 0C4B     		ldr	r3, .L93
 1024 002c 9D42     		cmp	r5, r3
 1025 002e 03D1     		bne	.L85
1367:..\FreeRTOS\Source/tasks.c **** 					{
 1026              		.loc 1 1367 0
 1027 0030 A36A     		ldr	r3, [r4, #40]
 1028 0032 6BB9     		cbnz	r3, .L89
1369:..\FreeRTOS\Source/tasks.c **** 					}
 1029              		.loc 1 1369 0
 1030 0034 0320     		movs	r0, #3
 1031 0036 38BD     		pop	{r3, r4, r5, pc}
 1032              	.LVL105:
 1033              	.L85:
1379:..\FreeRTOS\Source/tasks.c **** 				{
 1034              		.loc 1 1379 0
 1035 0038 094B     		ldr	r3, .L93+4
 1036 003a 9D42     		cmp	r5, r3
 1037 003c 0AD0     		beq	.L90
1379:..\FreeRTOS\Source/tasks.c **** 				{
 1038              		.loc 1 1379 0 is_stmt 0 discriminator 1
 1039 003e 5DB9     		cbnz	r5, .L91
1384:..\FreeRTOS\Source/tasks.c **** 				}
 1040              		.loc 1 1384 0 is_stmt 1
 1041 0040 0420     		movs	r0, #4
 1042 0042 38BD     		pop	{r3, r4, r5, pc}
 1043              	.LVL106:
 1044              	.L86:
1344:..\FreeRTOS\Source/tasks.c **** 		}
 1045              		.loc 1 1344 0
 1046 0044 0020     		movs	r0, #0
 1047              	.LVL107:
 1048 0046 38BD     		pop	{r3, r4, r5, pc}
 1049              	.LVL108:
 1050              	.L87:
1358:..\FreeRTOS\Source/tasks.c **** 			}
 1051              		.loc 1 1358 0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 109


 1052 0048 0220     		movs	r0, #2
 1053 004a 38BD     		pop	{r3, r4, r5, pc}
 1054              	.LVL109:
 1055              	.L88:
 1056 004c 0220     		movs	r0, #2
 1057 004e 38BD     		pop	{r3, r4, r5, pc}
 1058              	.LVL110:
 1059              	.L89:
1373:..\FreeRTOS\Source/tasks.c **** 					}
 1060              		.loc 1 1373 0
 1061 0050 0220     		movs	r0, #2
 1062 0052 38BD     		pop	{r3, r4, r5, pc}
 1063              	.LVL111:
 1064              	.L90:
1384:..\FreeRTOS\Source/tasks.c **** 				}
 1065              		.loc 1 1384 0
 1066 0054 0420     		movs	r0, #4
 1067 0056 38BD     		pop	{r3, r4, r5, pc}
 1068              	.LVL112:
 1069              	.L91:
1392:..\FreeRTOS\Source/tasks.c **** 			}
 1070              		.loc 1 1392 0
 1071 0058 0120     		movs	r0, #1
 1072              	.LVL113:
1397:..\FreeRTOS\Source/tasks.c **** 
 1073              		.loc 1 1397 0
 1074 005a 38BD     		pop	{r3, r4, r5, pc}
 1075              	.LVL114:
 1076              	.L94:
 1077              		.align	2
 1078              	.L93:
 1079 005c 00000000 		.word	.LANCHOR0
 1080 0060 BC000000 		.word	.LANCHOR0+188
 1081              		.cfi_endproc
 1082              	.LFE75:
 1083              		.size	eTaskGetState, .-eTaskGetState
 1084              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1085              		.align	2
 1086              		.global	uxTaskPriorityGet
 1087              		.thumb
 1088              		.thumb_func
 1089              		.type	uxTaskPriorityGet, %function
 1090              	uxTaskPriorityGet:
 1091              	.LFB76:
1405:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
 1092              		.loc 1 1405 0
 1093              		.cfi_startproc
 1094              		@ args = 0, pretend = 0, frame = 0
 1095              		@ frame_needed = 0, uses_anonymous_args = 0
 1096              	.LVL115:
 1097 0000 10B5     		push	{r4, lr}
 1098              		.cfi_def_cfa_offset 8
 1099              		.cfi_offset 4, -8
 1100              		.cfi_offset 14, -4
 1101 0002 0446     		mov	r4, r0
1409:..\FreeRTOS\Source/tasks.c **** 		{
 1102              		.loc 1 1409 0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 110


 1103 0004 FFF7FEFF 		bl	vPortEnterCritical
 1104              	.LVL116:
1413:..\FreeRTOS\Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1105              		.loc 1 1413 0
 1106 0008 14B9     		cbnz	r4, .L96
1413:..\FreeRTOS\Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1107              		.loc 1 1413 0 is_stmt 0 discriminator 1
 1108 000a 044B     		ldr	r3, .L98
 1109 000c D3F8D840 		ldr	r4, [r3, #216]
 1110              	.LVL117:
 1111              	.L96:
1414:..\FreeRTOS\Source/tasks.c **** 		}
 1112              		.loc 1 1414 0 is_stmt 1 discriminator 4
 1113 0010 E46A     		ldr	r4, [r4, #44]
 1114              	.LVL118:
1416:..\FreeRTOS\Source/tasks.c **** 
 1115              		.loc 1 1416 0 discriminator 4
 1116 0012 FFF7FEFF 		bl	vPortExitCritical
 1117              	.LVL119:
1419:..\FreeRTOS\Source/tasks.c **** 
 1118              		.loc 1 1419 0 discriminator 4
 1119 0016 2046     		mov	r0, r4
 1120 0018 10BD     		pop	{r4, pc}
 1121              	.LVL120:
 1122              	.L99:
 1123 001a 00BF     		.align	2
 1124              	.L98:
 1125 001c 00000000 		.word	.LANCHOR0
 1126              		.cfi_endproc
 1127              	.LFE76:
 1128              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 1129              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1130              		.align	2
 1131              		.global	uxTaskPriorityGetFromISR
 1132              		.thumb
 1133              		.thumb_func
 1134              		.type	uxTaskPriorityGetFromISR, %function
 1135              	uxTaskPriorityGetFromISR:
 1136              	.LFB77:
1427:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
 1137              		.loc 1 1427 0
 1138              		.cfi_startproc
 1139              		@ args = 0, pretend = 0, frame = 0
 1140              		@ frame_needed = 0, uses_anonymous_args = 0
 1141              		@ link register save eliminated.
 1142              	.LVL121:
 1143              	.LBB29:
 1144              	.LBB30:
 1145              		.file 2 "..\\FreeRTOS\\Source\\portable\\GCC\\ARM_CM3/portmacro.h"
   1:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*
   2:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
   5:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 111


   9:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  12:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  15:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  22:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  25:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  27:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  28:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  29:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  32:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** extern "C" {
  34:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  35:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  36:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  39:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  42:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  45:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  46:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Type definitions. */
  47:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCHAR		char
  48:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portLONG		long
  51:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSHORT		short
  52:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  55:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  59:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #else
  63:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 112


  66:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  70:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  72:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  78:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** {																				\
  81:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 																				\
  84:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** }
  89:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  90:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  96:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Critical section management. */
  97:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 106:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 108:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 115:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 120:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 122:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 113


 123:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 126:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 127:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 129:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 132:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 134:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 136:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 137:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 138:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#endif
 142:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 143:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 147:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 149:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 151:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 153:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 155:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 159:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 160:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNOP()
 162:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 163:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 165:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 168:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 169:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 171:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 174:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 177:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 179:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 114


 180:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 181:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	else
 182:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 183:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 185:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 186:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	return xReturn;
 187:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 188:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 189:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 191:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 193:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 194:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 195:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 196:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 197:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 203:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 204:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 205:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 207:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 209:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 211:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 1146              		.loc 2 211 0
 1147              		.syntax unified
 1148              	@ 211 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1149 0000 EFF31183 			mrs r3, basepri											
 1150 0004 4FF0A002 		mov r2, #160												
 1151 0008 82F31188 		msr basepri, r2											
 1152 000c BFF36F8F 		isb														
 1153 0010 BFF34F8F 		dsb														
 1154              	
 1155              	@ 0 "" 2
 1156              		.thumb
 1157              		.syntax unified
 1158              	.LBE30:
 1159              	.LBE29:
1453:..\FreeRTOS\Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1160              		.loc 1 1453 0
 1161 0014 10B9     		cbnz	r0, .L101
1453:..\FreeRTOS\Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1162              		.loc 1 1453 0 is_stmt 0 discriminator 1
 1163 0016 034A     		ldr	r2, .L102
 1164 0018 D2F8D800 		ldr	r0, [r2, #216]
 1165              	.LVL122:
 1166              	.L101:
1454:..\FreeRTOS\Source/tasks.c **** 		}
 1167              		.loc 1 1454 0 is_stmt 1 discriminator 4
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 115


 1168 001c C06A     		ldr	r0, [r0, #44]
 1169              	.LVL123:
 1170              	.LBB31:
 1171              	.LBB32:
 212:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 213:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 220:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 221:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	warnings. */
 223:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 224:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 225:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 227:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 229:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 1172              		.loc 2 229 0 discriminator 4
 1173              		.syntax unified
 1174              	@ 229 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1175 001e 83F31188 			msr basepri, r3	
 1176              	@ 0 "" 2
 1177              	.LVL124:
 1178              		.thumb
 1179              		.syntax unified
 1180              	.LBE32:
 1181              	.LBE31:
1459:..\FreeRTOS\Source/tasks.c **** 
 1182              		.loc 1 1459 0 discriminator 4
 1183 0022 7047     		bx	lr
 1184              	.L103:
 1185              		.align	2
 1186              	.L102:
 1187 0024 00000000 		.word	.LANCHOR0
 1188              		.cfi_endproc
 1189              	.LFE77:
 1190              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 1191              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1192              		.align	2
 1193              		.global	vTaskPrioritySet
 1194              		.thumb
 1195              		.thumb_func
 1196              		.type	vTaskPrioritySet, %function
 1197              	vTaskPrioritySet:
 1198              	.LFB78:
1467:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
 1199              		.loc 1 1467 0
 1200              		.cfi_startproc
 1201              		@ args = 0, pretend = 0, frame = 0
 1202              		@ frame_needed = 0, uses_anonymous_args = 0
 1203              	.LVL125:
 1204 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 116


 1205              		.cfi_def_cfa_offset 24
 1206              		.cfi_offset 3, -24
 1207              		.cfi_offset 4, -20
 1208              		.cfi_offset 5, -16
 1209              		.cfi_offset 6, -12
 1210              		.cfi_offset 7, -8
 1211              		.cfi_offset 14, -4
 1212 0002 0446     		mov	r4, r0
 1213 0004 0D46     		mov	r5, r1
 1214              	.LVL126:
1475:..\FreeRTOS\Source/tasks.c **** 		{
 1215              		.loc 1 1475 0
 1216 0006 0429     		cmp	r1, #4
 1217 0008 00D9     		bls	.L105
1477:..\FreeRTOS\Source/tasks.c **** 		}
 1218              		.loc 1 1477 0
 1219 000a 0425     		movs	r5, #4
 1220              	.L105:
 1221              	.LVL127:
1484:..\FreeRTOS\Source/tasks.c **** 		{
 1222              		.loc 1 1484 0
 1223 000c FFF7FEFF 		bl	vPortEnterCritical
 1224              	.LVL128:
1488:..\FreeRTOS\Source/tasks.c **** 
 1225              		.loc 1 1488 0
 1226 0010 14B9     		cbnz	r4, .L106
1488:..\FreeRTOS\Source/tasks.c **** 
 1227              		.loc 1 1488 0 is_stmt 0 discriminator 1
 1228 0012 324B     		ldr	r3, .L121
 1229 0014 D3F8D840 		ldr	r4, [r3, #216]
 1230              	.LVL129:
 1231              	.L106:
1494:..\FreeRTOS\Source/tasks.c **** 			}
 1232              		.loc 1 1494 0 is_stmt 1 discriminator 4
 1233 0018 A36C     		ldr	r3, [r4, #72]
 1234              	.LVL130:
1502:..\FreeRTOS\Source/tasks.c **** 			{
 1235              		.loc 1 1502 0 discriminator 4
 1236 001a 9D42     		cmp	r5, r3
 1237 001c 5AD0     		beq	.L107
1506:..\FreeRTOS\Source/tasks.c **** 				{
 1238              		.loc 1 1506 0
 1239 001e 0CD9     		bls	.L108
1508:..\FreeRTOS\Source/tasks.c **** 					{
 1240              		.loc 1 1508 0
 1241 0020 2E4A     		ldr	r2, .L121
 1242 0022 D2F8D820 		ldr	r2, [r2, #216]
 1243 0026 9442     		cmp	r4, r2
 1244 0028 0ED0     		beq	.L116
1513:..\FreeRTOS\Source/tasks.c **** 						{
 1245              		.loc 1 1513 0
 1246 002a 2C4A     		ldr	r2, .L121
 1247 002c D2F8D820 		ldr	r2, [r2, #216]
 1248 0030 D26A     		ldr	r2, [r2, #44]
 1249 0032 9542     		cmp	r5, r2
 1250 0034 0AD2     		bcs	.L117
1470:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 117


 1251              		.loc 1 1470 0
 1252 0036 0027     		movs	r7, #0
 1253 0038 0BE0     		b	.L109
 1254              	.L108:
1529:..\FreeRTOS\Source/tasks.c **** 				{
 1255              		.loc 1 1529 0
 1256 003a 284A     		ldr	r2, .L121
 1257 003c D2F8D820 		ldr	r2, [r2, #216]
 1258 0040 9442     		cmp	r4, r2
 1259 0042 05D0     		beq	.L118
1470:..\FreeRTOS\Source/tasks.c **** 
 1260              		.loc 1 1470 0
 1261 0044 0027     		movs	r7, #0
 1262 0046 04E0     		b	.L109
 1263              	.L116:
 1264 0048 0027     		movs	r7, #0
 1265 004a 02E0     		b	.L109
 1266              	.L117:
1515:..\FreeRTOS\Source/tasks.c **** 						}
 1267              		.loc 1 1515 0
 1268 004c 0127     		movs	r7, #1
 1269 004e 00E0     		b	.L109
 1270              	.L118:
1534:..\FreeRTOS\Source/tasks.c **** 				}
 1271              		.loc 1 1534 0
 1272 0050 0127     		movs	r7, #1
 1273              	.L109:
 1274              	.LVL131:
1546:..\FreeRTOS\Source/tasks.c **** 
 1275              		.loc 1 1546 0
 1276 0052 E66A     		ldr	r6, [r4, #44]
 1277              	.LVL132:
1552:..\FreeRTOS\Source/tasks.c **** 					{
 1278              		.loc 1 1552 0
 1279 0054 B342     		cmp	r3, r6
 1280 0056 00D1     		bne	.L110
1554:..\FreeRTOS\Source/tasks.c **** 					}
 1281              		.loc 1 1554 0
 1282 0058 E562     		str	r5, [r4, #44]
 1283              	.L110:
1562:..\FreeRTOS\Source/tasks.c **** 				}
 1284              		.loc 1 1562 0
 1285 005a A564     		str	r5, [r4, #72]
1572:..\FreeRTOS\Source/tasks.c **** 				{
 1286              		.loc 1 1572 0
 1287 005c A369     		ldr	r3, [r4, #24]
 1288              	.LVL133:
 1289 005e 002B     		cmp	r3, #0
 1290 0060 02DB     		blt	.L111
1574:..\FreeRTOS\Source/tasks.c **** 				}
 1291              		.loc 1 1574 0
 1292 0062 C5F10505 		rsb	r5, r5, #5
 1293              	.LVL134:
 1294 0066 A561     		str	r5, [r4, #24]
 1295              	.L111:
1585:..\FreeRTOS\Source/tasks.c **** 				{
 1296              		.loc 1 1585 0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 118


 1297 0068 6169     		ldr	r1, [r4, #20]
 1298 006a 06EB8602 		add	r2, r6, r6, lsl #2
 1299 006e 9300     		lsls	r3, r2, #2
 1300 0070 1B4A     		ldr	r2, .L121+4
 1301 0072 1344     		add	r3, r3, r2
 1302 0074 9942     		cmp	r1, r3
 1303 0076 01D1     		bne	.L119
 1304 0078 0123     		movs	r3, #1
 1305 007a 00E0     		b	.L112
 1306              	.L119:
 1307 007c 0023     		movs	r3, #0
 1308              	.L112:
1585:..\FreeRTOS\Source/tasks.c **** 				{
 1309              		.loc 1 1585 0 is_stmt 0 discriminator 4
 1310 007e 03B3     		cbz	r3, .L113
1590:..\FreeRTOS\Source/tasks.c **** 					{
 1311              		.loc 1 1590 0 is_stmt 1
 1312 0080 251D     		adds	r5, r4, #4
 1313 0082 2846     		mov	r0, r5
 1314 0084 FFF7FEFF 		bl	uxListRemove
 1315              	.LVL135:
 1316 0088 48B9     		cbnz	r0, .L114
1595:..\FreeRTOS\Source/tasks.c **** 					}
 1317              		.loc 1 1595 0
 1318 008a 0123     		movs	r3, #1
 1319 008c 03FA06F6 		lsl	r6, r3, r6
 1320              	.LVL136:
 1321 0090 124A     		ldr	r2, .L121
 1322 0092 D2F8E430 		ldr	r3, [r2, #228]
 1323 0096 23EA0606 		bic	r6, r3, r6
 1324 009a C2F8E460 		str	r6, [r2, #228]
 1325              	.L114:
1601:..\FreeRTOS\Source/tasks.c **** 				}
 1326              		.loc 1 1601 0
 1327 009e E36A     		ldr	r3, [r4, #44]
 1328 00a0 0122     		movs	r2, #1
 1329 00a2 02FA03F1 		lsl	r1, r2, r3
 1330 00a6 0D48     		ldr	r0, .L121
 1331 00a8 D0F8E420 		ldr	r2, [r0, #228]
 1332 00ac 0A43     		orrs	r2, r2, r1
 1333 00ae C0F8E420 		str	r2, [r0, #228]
 1334 00b2 3030     		adds	r0, r0, #48
 1335 00b4 03EB8303 		add	r3, r3, r3, lsl #2
 1336 00b8 9A00     		lsls	r2, r3, #2
 1337 00ba 2946     		mov	r1, r5
 1338 00bc 1044     		add	r0, r0, r2
 1339 00be FFF7FEFF 		bl	vListInsertEnd
 1340              	.LVL137:
 1341              	.L113:
1608:..\FreeRTOS\Source/tasks.c **** 				{
 1342              		.loc 1 1608 0
 1343 00c2 3FB1     		cbz	r7, .L107
1610:..\FreeRTOS\Source/tasks.c **** 				}
 1344              		.loc 1 1610 0
 1345 00c4 4FF08052 		mov	r2, #268435456
 1346 00c8 064B     		ldr	r3, .L121+8
 1347 00ca 1A60     		str	r2, [r3]
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 119


 1348              		.syntax unified
 1349              	@ 1610 "..\FreeRTOS\Source\tasks.c" 1
 1350 00cc BFF34F8F 		dsb
 1351              	@ 0 "" 2
 1352              	@ 1610 "..\FreeRTOS\Source\tasks.c" 1
 1353 00d0 BFF36F8F 		isb
 1354              	@ 0 "" 2
 1355              	.LVL138:
 1356              		.thumb
 1357              		.syntax unified
 1358              	.L107:
1622:..\FreeRTOS\Source/tasks.c **** 	}
 1359              		.loc 1 1622 0
 1360 00d4 FFF7FEFF 		bl	vPortExitCritical
 1361              	.LVL139:
 1362 00d8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1363              	.LVL140:
 1364              	.L122:
 1365 00da 00BF     		.align	2
 1366              	.L121:
 1367 00dc 00000000 		.word	.LANCHOR0
 1368 00e0 30000000 		.word	.LANCHOR0+48
 1369 00e4 04ED00E0 		.word	-536810236
 1370              		.cfi_endproc
 1371              	.LFE78:
 1372              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1373              		.section	.text.vTaskResume,"ax",%progbits
 1374              		.align	2
 1375              		.global	vTaskResume
 1376              		.thumb
 1377              		.thumb_func
 1378              		.type	vTaskResume, %function
 1379              	vTaskResume:
 1380              	.LFB81:
1778:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1381              		.loc 1 1778 0
 1382              		.cfi_startproc
 1383              		@ args = 0, pretend = 0, frame = 0
 1384              		@ frame_needed = 0, uses_anonymous_args = 0
 1385              	.LVL141:
1786:..\FreeRTOS\Source/tasks.c **** 		{
 1386              		.loc 1 1786 0
 1387 0000 A0B3     		cbz	r0, .L127
1786:..\FreeRTOS\Source/tasks.c **** 		{
 1388              		.loc 1 1786 0 is_stmt 0 discriminator 1
 1389 0002 1B4A     		ldr	r2, .L128
 1390 0004 D2F8D820 		ldr	r2, [r2, #216]
 1391 0008 9042     		cmp	r0, r2
 1392 000a 2FD0     		beq	.L127
1778:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1393              		.loc 1 1778 0 is_stmt 1
 1394 000c 70B5     		push	{r4, r5, r6, lr}
 1395              		.cfi_def_cfa_offset 16
 1396              		.cfi_offset 4, -16
 1397              		.cfi_offset 5, -12
 1398              		.cfi_offset 6, -8
 1399              		.cfi_offset 14, -4
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 120


 1400 000e 0446     		mov	r4, r0
1788:..\FreeRTOS\Source/tasks.c **** 			{
 1401              		.loc 1 1788 0
 1402 0010 FFF7FEFF 		bl	vPortEnterCritical
 1403              	.LVL142:
1790:..\FreeRTOS\Source/tasks.c **** 				{
 1404              		.loc 1 1790 0
 1405 0014 2046     		mov	r0, r4
 1406 0016 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1407              	.LVL143:
 1408 001a 20B3     		cbz	r0, .L125
1796:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1409              		.loc 1 1796 0
 1410 001c 261D     		adds	r6, r4, #4
 1411 001e 3046     		mov	r0, r6
 1412 0020 FFF7FEFF 		bl	uxListRemove
 1413              	.LVL144:
1797:..\FreeRTOS\Source/tasks.c **** 
 1414              		.loc 1 1797 0
 1415 0024 E36A     		ldr	r3, [r4, #44]
 1416 0026 0122     		movs	r2, #1
 1417 0028 02FA03F1 		lsl	r1, r2, r3
 1418 002c 104D     		ldr	r5, .L128
 1419 002e D5F8E420 		ldr	r2, [r5, #228]
 1420 0032 0A43     		orrs	r2, r2, r1
 1421 0034 C5F8E420 		str	r2, [r5, #228]
 1422 0038 05F13000 		add	r0, r5, #48
 1423 003c 03EB8303 		add	r3, r3, r3, lsl #2
 1424 0040 9A00     		lsls	r2, r3, #2
 1425 0042 3146     		mov	r1, r6
 1426 0044 1044     		add	r0, r0, r2
 1427 0046 FFF7FEFF 		bl	vListInsertEnd
 1428              	.LVL145:
1800:..\FreeRTOS\Source/tasks.c **** 					{
 1429              		.loc 1 1800 0
 1430 004a E26A     		ldr	r2, [r4, #44]
 1431 004c D5F8D830 		ldr	r3, [r5, #216]
 1432 0050 DB6A     		ldr	r3, [r3, #44]
 1433 0052 9A42     		cmp	r2, r3
 1434 0054 07D3     		bcc	.L125
1805:..\FreeRTOS\Source/tasks.c **** 					}
 1435              		.loc 1 1805 0
 1436 0056 4FF08052 		mov	r2, #268435456
 1437 005a 064B     		ldr	r3, .L128+4
 1438 005c 1A60     		str	r2, [r3]
 1439              		.syntax unified
 1440              	@ 1805 "..\FreeRTOS\Source\tasks.c" 1
 1441 005e BFF34F8F 		dsb
 1442              	@ 0 "" 2
 1443              	@ 1805 "..\FreeRTOS\Source\tasks.c" 1
 1444 0062 BFF36F8F 		isb
 1445              	@ 0 "" 2
 1446              		.thumb
 1447              		.syntax unified
 1448              	.L125:
1817:..\FreeRTOS\Source/tasks.c **** 		}
 1449              		.loc 1 1817 0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 121


 1450 0066 FFF7FEFF 		bl	vPortExitCritical
 1451              	.LVL146:
 1452 006a 70BD     		pop	{r4, r5, r6, pc}
 1453              	.LVL147:
 1454              	.L127:
 1455              		.cfi_def_cfa_offset 0
 1456              		.cfi_restore 4
 1457              		.cfi_restore 5
 1458              		.cfi_restore 6
 1459              		.cfi_restore 14
 1460 006c 7047     		bx	lr
 1461              	.L129:
 1462 006e 00BF     		.align	2
 1463              	.L128:
 1464 0070 00000000 		.word	.LANCHOR0
 1465 0074 04ED00E0 		.word	-536810236
 1466              		.cfi_endproc
 1467              	.LFE81:
 1468              		.size	vTaskResume, .-vTaskResume
 1469              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1470              		.align	2
 1471              		.global	xTaskResumeFromISR
 1472              		.thumb
 1473              		.thumb_func
 1474              		.type	xTaskResumeFromISR, %function
 1475              	xTaskResumeFromISR:
 1476              	.LFB82:
1832:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1477              		.loc 1 1832 0
 1478              		.cfi_startproc
 1479              		@ args = 0, pretend = 0, frame = 0
 1480              		@ frame_needed = 0, uses_anonymous_args = 0
 1481              	.LVL148:
 1482 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1483              		.cfi_def_cfa_offset 24
 1484              		.cfi_offset 3, -24
 1485              		.cfi_offset 4, -20
 1486              		.cfi_offset 5, -16
 1487              		.cfi_offset 6, -12
 1488              		.cfi_offset 7, -8
 1489              		.cfi_offset 14, -4
 1490 0002 0446     		mov	r4, r0
 1491              	.LVL149:
 1492              	.LBB33:
 1493              	.LBB34:
 211:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1494              		.loc 2 211 0
 1495              		.syntax unified
 1496              	@ 211 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1497 0004 EFF31185 			mrs r5, basepri											
 1498 0008 4FF0A003 		mov r3, #160												
 1499 000c 83F31188 		msr basepri, r3											
 1500 0010 BFF36F8F 		isb														
 1501 0014 BFF34F8F 		dsb														
 1502              	
 1503              	@ 0 "" 2
 1504              		.thumb
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 122


 1505              		.syntax unified
 1506              	.LBE34:
 1507              	.LBE33:
1859:..\FreeRTOS\Source/tasks.c **** 			{
 1508              		.loc 1 1859 0
 1509 0018 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1510              	.LVL150:
 1511 001c 58B3     		cbz	r0, .L134
1864:..\FreeRTOS\Source/tasks.c **** 				{
 1512              		.loc 1 1864 0
 1513 001e 184B     		ldr	r3, .L137
 1514 0020 D3F8F030 		ldr	r3, [r3, #240]
 1515 0024 03BB     		cbnz	r3, .L132
1868:..\FreeRTOS\Source/tasks.c **** 					{
 1516              		.loc 1 1868 0
 1517 0026 E26A     		ldr	r2, [r4, #44]
 1518 0028 154B     		ldr	r3, .L137
 1519 002a D3F8D830 		ldr	r3, [r3, #216]
 1520 002e DB6A     		ldr	r3, [r3, #44]
 1521 0030 9A42     		cmp	r2, r3
 1522 0032 01D2     		bcs	.L135
1833:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1523              		.loc 1 1833 0
 1524 0034 0026     		movs	r6, #0
 1525 0036 00E0     		b	.L133
 1526              	.L135:
1870:..\FreeRTOS\Source/tasks.c **** 					}
 1527              		.loc 1 1870 0
 1528 0038 0126     		movs	r6, #1
 1529              	.L133:
 1530              	.LVL151:
1877:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1531              		.loc 1 1877 0
 1532 003a 271D     		adds	r7, r4, #4
 1533 003c 3846     		mov	r0, r7
 1534 003e FFF7FEFF 		bl	uxListRemove
 1535              	.LVL152:
1878:..\FreeRTOS\Source/tasks.c **** 				}
 1536              		.loc 1 1878 0
 1537 0042 E36A     		ldr	r3, [r4, #44]
 1538 0044 0122     		movs	r2, #1
 1539 0046 02FA03F1 		lsl	r1, r2, r3
 1540 004a 0D48     		ldr	r0, .L137
 1541 004c D0F8E420 		ldr	r2, [r0, #228]
 1542 0050 0A43     		orrs	r2, r2, r1
 1543 0052 C0F8E420 		str	r2, [r0, #228]
 1544 0056 3030     		adds	r0, r0, #48
 1545 0058 03EB8303 		add	r3, r3, r3, lsl #2
 1546 005c 9A00     		lsls	r2, r3, #2
 1547 005e 3946     		mov	r1, r7
 1548 0060 1044     		add	r0, r0, r2
 1549 0062 FFF7FEFF 		bl	vListInsertEnd
 1550              	.LVL153:
 1551 0066 07E0     		b	.L131
 1552              	.LVL154:
 1553              	.L132:
1885:..\FreeRTOS\Source/tasks.c **** 				}
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 123


 1554              		.loc 1 1885 0
 1555 0068 04F11801 		add	r1, r4, #24
 1556 006c 0548     		ldr	r0, .L137+4
 1557 006e FFF7FEFF 		bl	vListInsertEnd
 1558              	.LVL155:
1833:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1559              		.loc 1 1833 0
 1560 0072 0026     		movs	r6, #0
 1561 0074 00E0     		b	.L131
 1562              	.L134:
 1563 0076 0026     		movs	r6, #0
 1564              	.LVL156:
 1565              	.L131:
 1566              	.LBB35:
 1567              	.LBB36:
 1568              		.loc 2 229 0
 1569              		.syntax unified
 1570              	@ 229 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1571 0078 85F31188 			msr basepri, r5	
 1572              	@ 0 "" 2
 1573              	.LVL157:
 1574              		.thumb
 1575              		.syntax unified
 1576              	.LBE36:
 1577              	.LBE35:
1896:..\FreeRTOS\Source/tasks.c **** 
 1578              		.loc 1 1896 0
 1579 007c 3046     		mov	r0, r6
 1580 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1581              	.LVL158:
 1582              	.L138:
 1583              		.align	2
 1584              	.L137:
 1585 0080 00000000 		.word	.LANCHOR0
 1586 0084 14000000 		.word	.LANCHOR0+20
 1587              		.cfi_endproc
 1588              	.LFE82:
 1589              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1590              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1591              		.align	2
 1592              		.global	vTaskStartScheduler
 1593              		.thumb
 1594              		.thumb_func
 1595              		.type	vTaskStartScheduler, %function
 1596              	vTaskStartScheduler:
 1597              	.LFB83:
1902:..\FreeRTOS\Source/tasks.c **** BaseType_t xReturn;
 1598              		.loc 1 1902 0
 1599              		.cfi_startproc
 1600              		@ args = 0, pretend = 0, frame = 0
 1601              		@ frame_needed = 0, uses_anonymous_args = 0
 1602 0000 00B5     		push	{lr}
 1603              		.cfi_def_cfa_offset 4
 1604              		.cfi_offset 14, -4
 1605 0002 83B0     		sub	sp, sp, #12
 1606              		.cfi_def_cfa_offset 16
1935:..\FreeRTOS\Source/tasks.c **** 								configIDLE_TASK_NAME,
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 124


 1607              		.loc 1 1935 0
 1608 0004 114B     		ldr	r3, .L142
 1609 0006 0193     		str	r3, [sp, #4]
 1610 0008 0023     		movs	r3, #0
 1611 000a 0093     		str	r3, [sp]
 1612 000c 6422     		movs	r2, #100
 1613 000e 1049     		ldr	r1, .L142+4
 1614 0010 1048     		ldr	r0, .L142+8
 1615 0012 FFF7FEFF 		bl	xTaskCreate
 1616              	.LVL159:
1957:..\FreeRTOS\Source/tasks.c **** 	{
 1617              		.loc 1 1957 0
 1618 0016 0128     		cmp	r0, #1
 1619 0018 15D1     		bne	.L139
 1620              	.LBB37:
 1621              	.LBB38:
 195:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1622              		.loc 2 195 0
 1623              		.syntax unified
 1624              	@ 195 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1625 001a 4FF0A003 			mov r3, #160												
 1626 001e 83F31188 		msr basepri, r3											
 1627 0022 BFF36F8F 		isb														
 1628 0026 BFF34F8F 		dsb														
 1629              	
 1630              	@ 0 "" 2
 1631              		.thumb
 1632              		.syntax unified
 1633              	.LBE38:
 1634              	.LBE37:
1983:..\FreeRTOS\Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1635              		.loc 1 1983 0
 1636 002a 0B4B     		ldr	r3, .L142+12
 1637 002c 4FF0FF32 		mov	r2, #-1
 1638 0030 DA62     		str	r2, [r3, #44]
1984:..\FreeRTOS\Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1639              		.loc 1 1984 0
 1640 0032 0122     		movs	r2, #1
 1641 0034 C3F8DC20 		str	r2, [r3, #220]
1985:..\FreeRTOS\Source/tasks.c **** 
 1642              		.loc 1 1985 0
 1643 0038 0022     		movs	r2, #0
 1644 003a C3F8EC20 		str	r2, [r3, #236]
1993:..\FreeRTOS\Source/tasks.c **** 
 1645              		.loc 1 1993 0
 1646 003e FFF7FEFF 		bl	StatisticsCounter_Start
 1647              	.LVL160:
1997:..\FreeRTOS\Source/tasks.c **** 		{
 1648              		.loc 1 1997 0
 1649 0042 FFF7FEFF 		bl	xPortStartScheduler
 1650              	.LVL161:
 1651              	.L139:
2018:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 1652              		.loc 1 2018 0
 1653 0046 03B0     		add	sp, sp, #12
 1654              		.cfi_def_cfa_offset 4
 1655              		@ sp needed
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 125


 1656 0048 5DF804FB 		ldr	pc, [sp], #4
 1657              	.L143:
 1658              		.align	2
 1659              	.L142:
 1660 004c F4000000 		.word	.LANCHOR0+244
 1661 0050 00000000 		.word	.LC0
 1662 0054 00000000 		.word	prvIdleTask
 1663 0058 00000000 		.word	.LANCHOR0
 1664              		.cfi_endproc
 1665              	.LFE83:
 1666              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1667              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1668              		.align	2
 1669              		.global	vTaskEndScheduler
 1670              		.thumb
 1671              		.thumb_func
 1672              		.type	vTaskEndScheduler, %function
 1673              	vTaskEndScheduler:
 1674              	.LFB84:
2022:..\FreeRTOS\Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1675              		.loc 1 2022 0
 1676              		.cfi_startproc
 1677              		@ args = 0, pretend = 0, frame = 0
 1678              		@ frame_needed = 0, uses_anonymous_args = 0
 1679 0000 08B5     		push	{r3, lr}
 1680              		.cfi_def_cfa_offset 8
 1681              		.cfi_offset 3, -8
 1682              		.cfi_offset 14, -4
 1683              	.LBB39:
 1684              	.LBB40:
 195:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1685              		.loc 2 195 0
 1686              		.syntax unified
 1687              	@ 195 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1688 0002 4FF0A003 			mov r3, #160												
 1689 0006 83F31188 		msr basepri, r3											
 1690 000a BFF36F8F 		isb														
 1691 000e BFF34F8F 		dsb														
 1692              	
 1693              	@ 0 "" 2
 1694              		.thumb
 1695              		.syntax unified
 1696              	.LBE40:
 1697              	.LBE39:
2027:..\FreeRTOS\Source/tasks.c **** 	vPortEndScheduler();
 1698              		.loc 1 2027 0
 1699 0012 0022     		movs	r2, #0
 1700 0014 024B     		ldr	r3, .L146
 1701 0016 C3F8DC20 		str	r2, [r3, #220]
2028:..\FreeRTOS\Source/tasks.c **** }
 1702              		.loc 1 2028 0
 1703 001a FFF7FEFF 		bl	vPortEndScheduler
 1704              	.LVL162:
 1705 001e 08BD     		pop	{r3, pc}
 1706              	.L147:
 1707              		.align	2
 1708              	.L146:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 126


 1709 0020 00000000 		.word	.LANCHOR0
 1710              		.cfi_endproc
 1711              	.LFE84:
 1712              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1713              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1714              		.align	2
 1715              		.global	vTaskSuspendAll
 1716              		.thumb
 1717              		.thumb_func
 1718              		.type	vTaskSuspendAll, %function
 1719              	vTaskSuspendAll:
 1720              	.LFB85:
2033:..\FreeRTOS\Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1721              		.loc 1 2033 0
 1722              		.cfi_startproc
 1723              		@ args = 0, pretend = 0, frame = 0
 1724              		@ frame_needed = 0, uses_anonymous_args = 0
 1725              		@ link register save eliminated.
2038:..\FreeRTOS\Source/tasks.c **** }
 1726              		.loc 1 2038 0
 1727 0000 034A     		ldr	r2, .L149
 1728 0002 D2F8F030 		ldr	r3, [r2, #240]
 1729 0006 0133     		adds	r3, r3, #1
 1730 0008 C2F8F030 		str	r3, [r2, #240]
 1731 000c 7047     		bx	lr
 1732              	.L150:
 1733 000e 00BF     		.align	2
 1734              	.L149:
 1735 0010 00000000 		.word	.LANCHOR0
 1736              		.cfi_endproc
 1737              	.LFE85:
 1738              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 1739              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1740              		.align	2
 1741              		.global	xTaskGetTickCount
 1742              		.thumb
 1743              		.thumb_func
 1744              		.type	xTaskGetTickCount, %function
 1745              	xTaskGetTickCount:
 1746              	.LFB87:
2216:..\FreeRTOS\Source/tasks.c **** TickType_t xTicks;
 1747              		.loc 1 2216 0
 1748              		.cfi_startproc
 1749              		@ args = 0, pretend = 0, frame = 0
 1750              		@ frame_needed = 0, uses_anonymous_args = 0
 1751              		@ link register save eliminated.
2222:..\FreeRTOS\Source/tasks.c **** 	}
 1752              		.loc 1 2222 0
 1753 0000 014B     		ldr	r3, .L152
 1754 0002 D3F8EC00 		ldr	r0, [r3, #236]
 1755              	.LVL163:
2227:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 1756              		.loc 1 2227 0
 1757 0006 7047     		bx	lr
 1758              	.L153:
 1759              		.align	2
 1760              	.L152:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 127


 1761 0008 00000000 		.word	.LANCHOR0
 1762              		.cfi_endproc
 1763              	.LFE87:
 1764              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 1765              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1766              		.align	2
 1767              		.global	xTaskGetTickCountFromISR
 1768              		.thumb
 1769              		.thumb_func
 1770              		.type	xTaskGetTickCountFromISR, %function
 1771              	xTaskGetTickCountFromISR:
 1772              	.LFB88:
2231:..\FreeRTOS\Source/tasks.c **** TickType_t xReturn;
 1773              		.loc 1 2231 0
 1774              		.cfi_startproc
 1775              		@ args = 0, pretend = 0, frame = 0
 1776              		@ frame_needed = 0, uses_anonymous_args = 0
 1777              		@ link register save eliminated.
 1778              	.LVL164:
2253:..\FreeRTOS\Source/tasks.c **** 	}
 1779              		.loc 1 2253 0
 1780 0000 014B     		ldr	r3, .L155
 1781 0002 D3F8EC00 		ldr	r0, [r3, #236]
 1782              	.LVL165:
2258:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 1783              		.loc 1 2258 0
 1784 0006 7047     		bx	lr
 1785              	.L156:
 1786              		.align	2
 1787              	.L155:
 1788 0008 00000000 		.word	.LANCHOR0
 1789              		.cfi_endproc
 1790              	.LFE88:
 1791              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 1792              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1793              		.align	2
 1794              		.global	uxTaskGetNumberOfTasks
 1795              		.thumb
 1796              		.thumb_func
 1797              		.type	uxTaskGetNumberOfTasks, %function
 1798              	uxTaskGetNumberOfTasks:
 1799              	.LFB89:
2262:..\FreeRTOS\Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 1800              		.loc 1 2262 0
 1801              		.cfi_startproc
 1802              		@ args = 0, pretend = 0, frame = 0
 1803              		@ frame_needed = 0, uses_anonymous_args = 0
 1804              		@ link register save eliminated.
2265:..\FreeRTOS\Source/tasks.c **** }
 1805              		.loc 1 2265 0
 1806 0000 014B     		ldr	r3, .L158
 1807 0002 D3F8D400 		ldr	r0, [r3, #212]
2266:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 1808              		.loc 1 2266 0
 1809 0006 7047     		bx	lr
 1810              	.L159:
 1811              		.align	2
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 128


 1812              	.L158:
 1813 0008 00000000 		.word	.LANCHOR0
 1814              		.cfi_endproc
 1815              	.LFE89:
 1816              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 1817              		.section	.text.pcTaskGetName,"ax",%progbits
 1818              		.align	2
 1819              		.global	pcTaskGetName
 1820              		.thumb
 1821              		.thumb_func
 1822              		.type	pcTaskGetName, %function
 1823              	pcTaskGetName:
 1824              	.LFB90:
2270:..\FreeRTOS\Source/tasks.c **** TCB_t *pxTCB;
 1825              		.loc 1 2270 0
 1826              		.cfi_startproc
 1827              		@ args = 0, pretend = 0, frame = 0
 1828              		@ frame_needed = 0, uses_anonymous_args = 0
 1829              		@ link register save eliminated.
 1830              	.LVL166:
2275:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxTCB );
 1831              		.loc 1 2275 0
 1832 0000 0346     		mov	r3, r0
 1833 0002 10B9     		cbnz	r0, .L161
2275:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxTCB );
 1834              		.loc 1 2275 0 is_stmt 0 discriminator 1
 1835 0004 024B     		ldr	r3, .L162
 1836 0006 D3F8D830 		ldr	r3, [r3, #216]
 1837              	.LVL167:
 1838              	.L161:
2278:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 1839              		.loc 1 2278 0 is_stmt 1 discriminator 4
 1840 000a 03F13400 		add	r0, r3, #52
 1841 000e 7047     		bx	lr
 1842              	.L163:
 1843              		.align	2
 1844              	.L162:
 1845 0010 00000000 		.word	.LANCHOR0
 1846              		.cfi_endproc
 1847              	.LFE90:
 1848              		.size	pcTaskGetName, .-pcTaskGetName
 1849              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1850              		.align	2
 1851              		.global	xTaskIncrementTick
 1852              		.thumb
 1853              		.thumb_func
 1854              		.type	xTaskIncrementTick, %function
 1855              	xTaskIncrementTick:
 1856              	.LFB92:
2590:..\FreeRTOS\Source/tasks.c **** TCB_t * pxTCB;
 1857              		.loc 1 2590 0
 1858              		.cfi_startproc
 1859              		@ args = 0, pretend = 0, frame = 0
 1860              		@ frame_needed = 0, uses_anonymous_args = 0
 1861 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1862              		.cfi_def_cfa_offset 24
 1863              		.cfi_offset 4, -24
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 129


 1864              		.cfi_offset 5, -20
 1865              		.cfi_offset 6, -16
 1866              		.cfi_offset 7, -12
 1867              		.cfi_offset 8, -8
 1868              		.cfi_offset 14, -4
 1869              	.LVL168:
2599:..\FreeRTOS\Source/tasks.c **** 	{
 1870              		.loc 1 2599 0
 1871 0004 3F4B     		ldr	r3, .L183
 1872 0006 D3F8F030 		ldr	r3, [r3, #240]
 1873 000a 002B     		cmp	r3, #0
 1874 000c 66D1     		bne	.L165
 1875              	.LBB41:
2603:..\FreeRTOS\Source/tasks.c **** 
 1876              		.loc 1 2603 0
 1877 000e 3D4B     		ldr	r3, .L183
 1878 0010 D3F8EC70 		ldr	r7, [r3, #236]
 1879 0014 0137     		adds	r7, r7, #1
 1880              	.LVL169:
2607:..\FreeRTOS\Source/tasks.c **** 
 1881              		.loc 1 2607 0
 1882 0016 C3F8EC70 		str	r7, [r3, #236]
2609:..\FreeRTOS\Source/tasks.c **** 		{
 1883              		.loc 1 2609 0
 1884 001a 67B9     		cbnz	r7, .L166
 1885              	.LBB42:
2611:..\FreeRTOS\Source/tasks.c **** 		}
 1886              		.loc 1 2611 0
 1887 001c 9A6A     		ldr	r2, [r3, #40]
 1888              	.LVL170:
 1889 001e D3F8D010 		ldr	r1, [r3, #208]
 1890 0022 9962     		str	r1, [r3, #40]
 1891 0024 C3F8D020 		str	r2, [r3, #208]
 1892 0028 D3F8F820 		ldr	r2, [r3, #248]
 1893              	.LVL171:
 1894 002c 0132     		adds	r2, r2, #1
 1895 002e C3F8F820 		str	r2, [r3, #248]
 1896              	.LVL172:
 1897 0032 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1898              	.LVL173:
 1899              	.L166:
 1900              	.LBE42:
2622:..\FreeRTOS\Source/tasks.c **** 		{
 1901              		.loc 1 2622 0
 1902 0036 334B     		ldr	r3, .L183
 1903 0038 DB6A     		ldr	r3, [r3, #44]
 1904 003a 9F42     		cmp	r7, r3
 1905 003c 05D2     		bcs	.L177
 1906              	.LBE41:
2593:..\FreeRTOS\Source/tasks.c **** 
 1907              		.loc 1 2593 0
 1908 003e 4FF00008 		mov	r8, #0
 1909 0042 3FE0     		b	.L168
 1910              	.LVL174:
 1911              	.L179:
 1912              	.LBB43:
2688:..\FreeRTOS\Source/tasks.c **** 						}
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 130


 1913              		.loc 1 2688 0
 1914 0044 4FF00108 		mov	r8, #1
 1915              	.LVL175:
 1916 0048 01E0     		b	.L167
 1917              	.LVL176:
 1918              	.L177:
 1919 004a 4FF00008 		mov	r8, #0
 1920              	.LVL177:
 1921              	.L167:
2626:..\FreeRTOS\Source/tasks.c **** 				{
 1922              		.loc 1 2626 0
 1923 004e 2D4B     		ldr	r3, .L183
 1924 0050 9B6A     		ldr	r3, [r3, #40]
 1925 0052 1B68     		ldr	r3, [r3]
 1926 0054 0BB9     		cbnz	r3, .L178
 1927 0056 0123     		movs	r3, #1
 1928 0058 00E0     		b	.L169
 1929              	.L178:
 1930 005a 0023     		movs	r3, #0
 1931              	.L169:
2626:..\FreeRTOS\Source/tasks.c **** 				{
 1932              		.loc 1 2626 0 is_stmt 0 discriminator 4
 1933 005c 23B1     		cbz	r3, .L170
2633:..\FreeRTOS\Source/tasks.c **** 					break;
 1934              		.loc 1 2633 0 is_stmt 1
 1935 005e 4FF0FF32 		mov	r2, #-1
 1936 0062 284B     		ldr	r3, .L183
 1937 0064 DA62     		str	r2, [r3, #44]
2634:..\FreeRTOS\Source/tasks.c **** 				}
 1938              		.loc 1 2634 0
 1939 0066 2DE0     		b	.L168
 1940              	.L170:
2642:..\FreeRTOS\Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1941              		.loc 1 2642 0
 1942 0068 264B     		ldr	r3, .L183
 1943 006a 9B6A     		ldr	r3, [r3, #40]
 1944 006c DB68     		ldr	r3, [r3, #12]
 1945 006e DC68     		ldr	r4, [r3, #12]
 1946              	.LVL178:
2643:..\FreeRTOS\Source/tasks.c **** 
 1947              		.loc 1 2643 0
 1948 0070 6368     		ldr	r3, [r4, #4]
 1949              	.LVL179:
2645:..\FreeRTOS\Source/tasks.c **** 					{
 1950              		.loc 1 2645 0
 1951 0072 9F42     		cmp	r7, r3
 1952 0074 02D2     		bcs	.L171
2652:..\FreeRTOS\Source/tasks.c **** 						break;
 1953              		.loc 1 2652 0
 1954 0076 234A     		ldr	r2, .L183
 1955 0078 D362     		str	r3, [r2, #44]
2653:..\FreeRTOS\Source/tasks.c **** 					}
 1956              		.loc 1 2653 0
 1957 007a 23E0     		b	.L168
 1958              	.L171:
2661:..\FreeRTOS\Source/tasks.c **** 
 1959              		.loc 1 2661 0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 131


 1960 007c 261D     		adds	r6, r4, #4
 1961 007e 3046     		mov	r0, r6
 1962 0080 FFF7FEFF 		bl	uxListRemove
 1963              	.LVL180:
2665:..\FreeRTOS\Source/tasks.c **** 					{
 1964              		.loc 1 2665 0
 1965 0084 A36A     		ldr	r3, [r4, #40]
 1966 0086 1BB1     		cbz	r3, .L172
2667:..\FreeRTOS\Source/tasks.c **** 					}
 1967              		.loc 1 2667 0
 1968 0088 04F11800 		add	r0, r4, #24
 1969 008c FFF7FEFF 		bl	uxListRemove
 1970              	.LVL181:
 1971              	.L172:
2676:..\FreeRTOS\Source/tasks.c **** 
 1972              		.loc 1 2676 0
 1973 0090 E36A     		ldr	r3, [r4, #44]
 1974 0092 0122     		movs	r2, #1
 1975 0094 02FA03F1 		lsl	r1, r2, r3
 1976 0098 1A4D     		ldr	r5, .L183
 1977 009a D5F8E420 		ldr	r2, [r5, #228]
 1978 009e 0A43     		orrs	r2, r2, r1
 1979 00a0 C5F8E420 		str	r2, [r5, #228]
 1980 00a4 05F13000 		add	r0, r5, #48
 1981 00a8 03EB8303 		add	r3, r3, r3, lsl #2
 1982 00ac 9A00     		lsls	r2, r3, #2
 1983 00ae 3146     		mov	r1, r6
 1984 00b0 1044     		add	r0, r0, r2
 1985 00b2 FFF7FEFF 		bl	vListInsertEnd
 1986              	.LVL182:
2686:..\FreeRTOS\Source/tasks.c **** 						{
 1987              		.loc 1 2686 0
 1988 00b6 E26A     		ldr	r2, [r4, #44]
 1989 00b8 D5F8D830 		ldr	r3, [r5, #216]
 1990 00bc DB6A     		ldr	r3, [r3, #44]
 1991 00be 9A42     		cmp	r2, r3
 1992 00c0 C0D2     		bcs	.L179
 1993 00c2 C4E7     		b	.L167
 1994              	.LVL183:
 1995              	.L168:
2705:..\FreeRTOS\Source/tasks.c **** 			{
 1996              		.loc 1 2705 0
 1997 00c4 0F49     		ldr	r1, .L183
 1998 00c6 D1F8D830 		ldr	r3, [r1, #216]
 1999 00ca DB6A     		ldr	r3, [r3, #44]
 2000 00cc 03EB8303 		add	r3, r3, r3, lsl #2
 2001 00d0 9A00     		lsls	r2, r3, #2
 2002 00d2 0A44     		add	r2, r2, r1
 2003 00d4 136B     		ldr	r3, [r2, #48]
 2004 00d6 012B     		cmp	r3, #1
 2005 00d8 09D8     		bhi	.L180
 2006 00da 0AE0     		b	.L175
 2007              	.LVL184:
 2008              	.L165:
 2009              	.LBE43:
2733:..\FreeRTOS\Source/tasks.c **** 
 2010              		.loc 1 2733 0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 132


 2011 00dc 094A     		ldr	r2, .L183
 2012 00de D2F8FC30 		ldr	r3, [r2, #252]
 2013 00e2 0133     		adds	r3, r3, #1
 2014 00e4 C2F8FC30 		str	r3, [r2, #252]
2593:..\FreeRTOS\Source/tasks.c **** 
 2015              		.loc 1 2593 0
 2016 00e8 4FF00008 		mov	r8, #0
 2017 00ec 01E0     		b	.L175
 2018              	.LVL185:
 2019              	.L180:
 2020              	.LBB44:
2707:..\FreeRTOS\Source/tasks.c **** 			}
 2021              		.loc 1 2707 0
 2022 00ee 4FF00108 		mov	r8, #1
 2023              	.LVL186:
 2024              	.L175:
 2025              	.LBE44:
2746:..\FreeRTOS\Source/tasks.c **** 		{
 2026              		.loc 1 2746 0
 2027 00f2 044B     		ldr	r3, .L183
 2028 00f4 D3F80031 		ldr	r3, [r3, #256]
 2029 00f8 0BB1     		cbz	r3, .L176
2748:..\FreeRTOS\Source/tasks.c **** 		}
 2030              		.loc 1 2748 0
 2031 00fa 4FF00108 		mov	r8, #1
 2032              	.LVL187:
 2033              	.L176:
2758:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 2034              		.loc 1 2758 0
 2035 00fe 4046     		mov	r0, r8
 2036 0100 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2037              	.LVL188:
 2038              	.L184:
 2039              		.align	2
 2040              	.L183:
 2041 0104 00000000 		.word	.LANCHOR0
 2042              		.cfi_endproc
 2043              	.LFE92:
 2044              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 2045              		.section	.text.xTaskResumeAll,"ax",%progbits
 2046              		.align	2
 2047              		.global	xTaskResumeAll
 2048              		.thumb
 2049              		.thumb_func
 2050              		.type	xTaskResumeAll, %function
 2051              	xTaskResumeAll:
 2052              	.LFB86:
2106:..\FreeRTOS\Source/tasks.c **** TCB_t *pxTCB = NULL;
 2053              		.loc 1 2106 0
 2054              		.cfi_startproc
 2055              		@ args = 0, pretend = 0, frame = 0
 2056              		@ frame_needed = 0, uses_anonymous_args = 0
 2057 0000 70B5     		push	{r4, r5, r6, lr}
 2058              		.cfi_def_cfa_offset 16
 2059              		.cfi_offset 4, -16
 2060              		.cfi_offset 5, -12
 2061              		.cfi_offset 6, -8
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 133


 2062              		.cfi_offset 14, -4
 2063              	.LVL189:
2119:..\FreeRTOS\Source/tasks.c **** 	{
 2064              		.loc 1 2119 0
 2065 0002 FFF7FEFF 		bl	vPortEnterCritical
 2066              	.LVL190:
2121:..\FreeRTOS\Source/tasks.c **** 
 2067              		.loc 1 2121 0
 2068 0006 324B     		ldr	r3, .L198
 2069 0008 D3F8F020 		ldr	r2, [r3, #240]
 2070 000c 013A     		subs	r2, r2, #1
 2071 000e C3F8F020 		str	r2, [r3, #240]
2123:..\FreeRTOS\Source/tasks.c **** 		{
 2072              		.loc 1 2123 0
 2073 0012 D3F8F030 		ldr	r3, [r3, #240]
 2074 0016 002B     		cmp	r3, #0
 2075 0018 53D1     		bne	.L194
2125:..\FreeRTOS\Source/tasks.c **** 			{
 2076              		.loc 1 2125 0
 2077 001a 2D4B     		ldr	r3, .L198
 2078 001c D3F8D430 		ldr	r3, [r3, #212]
 2079 0020 43BB     		cbnz	r3, .L195
2108:..\FreeRTOS\Source/tasks.c **** 
 2080              		.loc 1 2108 0
 2081 0022 0024     		movs	r4, #0
 2082 0024 50E0     		b	.L186
 2083              	.LVL191:
 2084              	.L189:
2131:..\FreeRTOS\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2085              		.loc 1 2131 0
 2086 0026 2A4C     		ldr	r4, .L198
 2087 0028 236A     		ldr	r3, [r4, #32]
 2088 002a DD68     		ldr	r5, [r3, #12]
 2089              	.LVL192:
2132:..\FreeRTOS\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2090              		.loc 1 2132 0
 2091 002c 05F11800 		add	r0, r5, #24
 2092 0030 FFF7FEFF 		bl	uxListRemove
 2093              	.LVL193:
2133:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2094              		.loc 1 2133 0
 2095 0034 2E1D     		adds	r6, r5, #4
 2096 0036 3046     		mov	r0, r6
 2097 0038 FFF7FEFF 		bl	uxListRemove
 2098              	.LVL194:
2134:..\FreeRTOS\Source/tasks.c **** 
 2099              		.loc 1 2134 0
 2100 003c EB6A     		ldr	r3, [r5, #44]
 2101 003e 0122     		movs	r2, #1
 2102 0040 02FA03F1 		lsl	r1, r2, r3
 2103 0044 D4F8E420 		ldr	r2, [r4, #228]
 2104 0048 0A43     		orrs	r2, r2, r1
 2105 004a C4F8E420 		str	r2, [r4, #228]
 2106 004e 04F13000 		add	r0, r4, #48
 2107 0052 03EB8303 		add	r3, r3, r3, lsl #2
 2108 0056 9A00     		lsls	r2, r3, #2
 2109 0058 3146     		mov	r1, r6
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 134


 2110 005a 1044     		add	r0, r0, r2
 2111 005c FFF7FEFF 		bl	vListInsertEnd
 2112              	.LVL195:
2138:..\FreeRTOS\Source/tasks.c **** 					{
 2113              		.loc 1 2138 0
 2114 0060 EA6A     		ldr	r2, [r5, #44]
 2115 0062 D4F8D830 		ldr	r3, [r4, #216]
 2116 0066 DB6A     		ldr	r3, [r3, #44]
 2117 0068 9A42     		cmp	r2, r3
 2118 006a 04D3     		bcc	.L187
2140:..\FreeRTOS\Source/tasks.c **** 					}
 2119              		.loc 1 2140 0
 2120 006c 0122     		movs	r2, #1
 2121 006e C4F80021 		str	r2, [r4, #256]
 2122 0072 00E0     		b	.L187
 2123              	.LVL196:
 2124              	.L195:
 2125 0074 0025     		movs	r5, #0
 2126              	.LVL197:
 2127              	.L187:
2129:..\FreeRTOS\Source/tasks.c **** 				{
 2128              		.loc 1 2129 0
 2129 0076 164B     		ldr	r3, .L198
 2130 0078 5B69     		ldr	r3, [r3, #20]
 2131 007a 002B     		cmp	r3, #0
 2132 007c D3D1     		bne	.L189
2148:..\FreeRTOS\Source/tasks.c **** 				{
 2133              		.loc 1 2148 0
 2134 007e 0DB1     		cbz	r5, .L190
2156:..\FreeRTOS\Source/tasks.c **** 				}
 2135              		.loc 1 2156 0
 2136 0080 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2137              	.LVL198:
 2138              	.L190:
 2139              	.LBB45:
2164:..\FreeRTOS\Source/tasks.c **** 
 2140              		.loc 1 2164 0
 2141 0084 124B     		ldr	r3, .L198
 2142 0086 D3F8FC40 		ldr	r4, [r3, #252]
 2143              	.LVL199:
2166:..\FreeRTOS\Source/tasks.c **** 					{
 2144              		.loc 1 2166 0
 2145 008a 64B1     		cbz	r4, .L191
 2146              	.L193:
2170:..\FreeRTOS\Source/tasks.c **** 							{
 2147              		.loc 1 2170 0
 2148 008c FFF7FEFF 		bl	xTaskIncrementTick
 2149              	.LVL200:
 2150 0090 18B1     		cbz	r0, .L192
2172:..\FreeRTOS\Source/tasks.c **** 							}
 2151              		.loc 1 2172 0
 2152 0092 0122     		movs	r2, #1
 2153 0094 0E4B     		ldr	r3, .L198
 2154 0096 C3F80021 		str	r2, [r3, #256]
 2155              	.L192:
 2156              	.LVL201:
2179:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 135


 2157              		.loc 1 2179 0
 2158 009a 013C     		subs	r4, r4, #1
 2159              	.LVL202:
 2160 009c F6D1     		bne	.L193
2181:..\FreeRTOS\Source/tasks.c **** 					}
 2161              		.loc 1 2181 0
 2162 009e 0022     		movs	r2, #0
 2163 00a0 0B4B     		ldr	r3, .L198
 2164 00a2 C3F8FC20 		str	r2, [r3, #252]
 2165              	.L191:
 2166              	.LBE45:
2189:..\FreeRTOS\Source/tasks.c **** 				{
 2167              		.loc 1 2189 0
 2168 00a6 0A4B     		ldr	r3, .L198
 2169 00a8 D3F80031 		ldr	r3, [r3, #256]
 2170 00ac 5BB1     		cbz	r3, .L196
 2171              	.LVL203:
2196:..\FreeRTOS\Source/tasks.c **** 				}
 2172              		.loc 1 2196 0
 2173 00ae 4FF08052 		mov	r2, #268435456
 2174 00b2 084B     		ldr	r3, .L198+4
 2175 00b4 1A60     		str	r2, [r3]
 2176              		.syntax unified
 2177              	@ 2196 "..\FreeRTOS\Source\tasks.c" 1
 2178 00b6 BFF34F8F 		dsb
 2179              	@ 0 "" 2
 2180              	@ 2196 "..\FreeRTOS\Source\tasks.c" 1
 2181 00ba BFF36F8F 		isb
 2182              	@ 0 "" 2
2193:..\FreeRTOS\Source/tasks.c **** 					}
 2183              		.loc 1 2193 0
 2184              		.thumb
 2185              		.syntax unified
 2186 00be 0124     		movs	r4, #1
 2187              	.LVL204:
 2188 00c0 02E0     		b	.L186
 2189              	.LVL205:
 2190              	.L194:
2108:..\FreeRTOS\Source/tasks.c **** 
 2191              		.loc 1 2108 0
 2192 00c2 0024     		movs	r4, #0
 2193 00c4 00E0     		b	.L186
 2194              	.LVL206:
 2195              	.L196:
 2196 00c6 0024     		movs	r4, #0
 2197              	.LVL207:
 2198              	.L186:
2209:..\FreeRTOS\Source/tasks.c **** 
 2199              		.loc 1 2209 0
 2200 00c8 FFF7FEFF 		bl	vPortExitCritical
 2201              	.LVL208:
2212:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 2202              		.loc 1 2212 0
 2203 00cc 2046     		mov	r0, r4
 2204 00ce 70BD     		pop	{r4, r5, r6, pc}
 2205              	.LVL209:
 2206              	.L199:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 136


 2207              		.align	2
 2208              	.L198:
 2209 00d0 00000000 		.word	.LANCHOR0
 2210 00d4 04ED00E0 		.word	-536810236
 2211              		.cfi_endproc
 2212              	.LFE86:
 2213              		.size	xTaskResumeAll, .-xTaskResumeAll
 2214              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2215              		.align	2
 2216              		.global	vTaskDelayUntil
 2217              		.thumb
 2218              		.thumb_func
 2219              		.type	vTaskDelayUntil, %function
 2220              	vTaskDelayUntil:
 2221              	.LFB73:
1205:..\FreeRTOS\Source/tasks.c **** 	TickType_t xTimeToWake;
 2222              		.loc 1 1205 0
 2223              		.cfi_startproc
 2224              		@ args = 0, pretend = 0, frame = 0
 2225              		@ frame_needed = 0, uses_anonymous_args = 0
 2226              	.LVL210:
 2227 0000 38B5     		push	{r3, r4, r5, lr}
 2228              		.cfi_def_cfa_offset 16
 2229              		.cfi_offset 3, -16
 2230              		.cfi_offset 4, -12
 2231              		.cfi_offset 5, -8
 2232              		.cfi_offset 14, -4
 2233 0002 0546     		mov	r5, r0
 2234 0004 0C46     		mov	r4, r1
 2235              	.LVL211:
1213:..\FreeRTOS\Source/tasks.c **** 		{
 2236              		.loc 1 1213 0
 2237 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2238              	.LVL212:
 2239              	.LBB46:
1217:..\FreeRTOS\Source/tasks.c **** 
 2240              		.loc 1 1217 0
 2241 000a 164B     		ldr	r3, .L210
 2242 000c D3F8EC00 		ldr	r0, [r3, #236]
 2243              	.LVL213:
1220:..\FreeRTOS\Source/tasks.c **** 
 2244              		.loc 1 1220 0
 2245 0010 2A68     		ldr	r2, [r5]
 2246 0012 1319     		adds	r3, r2, r4
 2247              	.LVL214:
1222:..\FreeRTOS\Source/tasks.c **** 			{
 2248              		.loc 1 1222 0
 2249 0014 9042     		cmp	r0, r2
 2250 0016 05D2     		bcs	.L201
1229:..\FreeRTOS\Source/tasks.c **** 				{
 2251              		.loc 1 1229 0
 2252 0018 9A42     		cmp	r2, r3
 2253 001a 09D9     		bls	.L205
1229:..\FreeRTOS\Source/tasks.c **** 				{
 2254              		.loc 1 1229 0 is_stmt 0 discriminator 1
 2255 001c 9842     		cmp	r0, r3
 2256 001e 09D3     		bcc	.L206
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 137


 2257              	.LBE46:
1207:..\FreeRTOS\Source/tasks.c **** 
 2258              		.loc 1 1207 0 is_stmt 1
 2259 0020 0022     		movs	r2, #0
 2260 0022 0CE0     		b	.L202
 2261              	.L201:
 2262              	.LBB47:
1243:..\FreeRTOS\Source/tasks.c **** 				{
 2263              		.loc 1 1243 0
 2264 0024 9A42     		cmp	r2, r3
 2265 0026 07D8     		bhi	.L207
1243:..\FreeRTOS\Source/tasks.c **** 				{
 2266              		.loc 1 1243 0 is_stmt 0 discriminator 1
 2267 0028 9842     		cmp	r0, r3
 2268 002a 07D3     		bcc	.L208
 2269              	.LBE47:
1207:..\FreeRTOS\Source/tasks.c **** 
 2270              		.loc 1 1207 0 is_stmt 1
 2271 002c 0022     		movs	r2, #0
 2272 002e 06E0     		b	.L202
 2273              	.L205:
 2274 0030 0022     		movs	r2, #0
 2275 0032 04E0     		b	.L202
 2276              	.L206:
 2277              	.LBB48:
1231:..\FreeRTOS\Source/tasks.c **** 				}
 2278              		.loc 1 1231 0
 2279 0034 0122     		movs	r2, #1
 2280 0036 02E0     		b	.L202
 2281              	.L207:
1245:..\FreeRTOS\Source/tasks.c **** 				}
 2282              		.loc 1 1245 0
 2283 0038 0122     		movs	r2, #1
 2284 003a 00E0     		b	.L202
 2285              	.L208:
 2286 003c 0122     		movs	r2, #1
 2287              	.L202:
 2288              	.LVL215:
1254:..\FreeRTOS\Source/tasks.c **** 
 2289              		.loc 1 1254 0
 2290 003e 2B60     		str	r3, [r5]
1256:..\FreeRTOS\Source/tasks.c **** 			{
 2291              		.loc 1 1256 0
 2292 0040 1AB1     		cbz	r2, .L203
1262:..\FreeRTOS\Source/tasks.c **** 			}
 2293              		.loc 1 1262 0
 2294 0042 0021     		movs	r1, #0
 2295 0044 181A     		subs	r0, r3, r0
 2296              	.LVL216:
 2297 0046 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2298              	.LVL217:
 2299              	.L203:
 2300              	.LBE48:
1269:..\FreeRTOS\Source/tasks.c **** 
 2301              		.loc 1 1269 0
 2302 004a FFF7FEFF 		bl	xTaskResumeAll
 2303              	.LVL218:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 138


1273:..\FreeRTOS\Source/tasks.c **** 		{
 2304              		.loc 1 1273 0
 2305 004e 38B9     		cbnz	r0, .L200
1275:..\FreeRTOS\Source/tasks.c **** 		}
 2306              		.loc 1 1275 0
 2307 0050 4FF08052 		mov	r2, #268435456
 2308 0054 044B     		ldr	r3, .L210+4
 2309 0056 1A60     		str	r2, [r3]
 2310              		.syntax unified
 2311              	@ 1275 "..\FreeRTOS\Source\tasks.c" 1
 2312 0058 BFF34F8F 		dsb
 2313              	@ 0 "" 2
 2314              	@ 1275 "..\FreeRTOS\Source\tasks.c" 1
 2315 005c BFF36F8F 		isb
 2316              	@ 0 "" 2
 2317              		.thumb
 2318              		.syntax unified
 2319              	.L200:
 2320 0060 38BD     		pop	{r3, r4, r5, pc}
 2321              	.LVL219:
 2322              	.L211:
 2323 0062 00BF     		.align	2
 2324              	.L210:
 2325 0064 00000000 		.word	.LANCHOR0
 2326 0068 04ED00E0 		.word	-536810236
 2327              		.cfi_endproc
 2328              	.LFE73:
 2329              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 2330              		.section	.text.vTaskDelay,"ax",%progbits
 2331              		.align	2
 2332              		.global	vTaskDelay
 2333              		.thumb
 2334              		.thumb_func
 2335              		.type	vTaskDelay, %function
 2336              	vTaskDelay:
 2337              	.LFB74:
1289:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2338              		.loc 1 1289 0
 2339              		.cfi_startproc
 2340              		@ args = 0, pretend = 0, frame = 0
 2341              		@ frame_needed = 0, uses_anonymous_args = 0
 2342              	.LVL220:
 2343 0000 10B5     		push	{r4, lr}
 2344              		.cfi_def_cfa_offset 8
 2345              		.cfi_offset 4, -8
 2346              		.cfi_offset 14, -4
 2347              	.LVL221:
1293:..\FreeRTOS\Source/tasks.c **** 		{
 2348              		.loc 1 1293 0
 2349 0002 48B1     		cbz	r0, .L215
 2350 0004 0446     		mov	r4, r0
1296:..\FreeRTOS\Source/tasks.c **** 			{
 2351              		.loc 1 1296 0
 2352 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2353              	.LVL222:
1307:..\FreeRTOS\Source/tasks.c **** 			}
 2354              		.loc 1 1307 0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 139


 2355 000a 0021     		movs	r1, #0
 2356 000c 2046     		mov	r0, r4
 2357 000e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2358              	.LVL223:
1309:..\FreeRTOS\Source/tasks.c **** 		}
 2359              		.loc 1 1309 0
 2360 0012 FFF7FEFF 		bl	xTaskResumeAll
 2361              	.LVL224:
 2362 0016 00E0     		b	.L213
 2363              	.LVL225:
 2364              	.L215:
1290:..\FreeRTOS\Source/tasks.c **** 
 2365              		.loc 1 1290 0
 2366 0018 0020     		movs	r0, #0
 2367              	.LVL226:
 2368              	.L213:
1318:..\FreeRTOS\Source/tasks.c **** 		{
 2369              		.loc 1 1318 0
 2370 001a 38B9     		cbnz	r0, .L212
1320:..\FreeRTOS\Source/tasks.c **** 		}
 2371              		.loc 1 1320 0
 2372 001c 4FF08052 		mov	r2, #268435456
 2373 0020 034B     		ldr	r3, .L217
 2374 0022 1A60     		str	r2, [r3]
 2375              		.syntax unified
 2376              	@ 1320 "..\FreeRTOS\Source\tasks.c" 1
 2377 0024 BFF34F8F 		dsb
 2378              	@ 0 "" 2
 2379              	@ 1320 "..\FreeRTOS\Source\tasks.c" 1
 2380 0028 BFF36F8F 		isb
 2381              	@ 0 "" 2
 2382              		.thumb
 2383              		.syntax unified
 2384              	.L212:
 2385 002c 10BD     		pop	{r4, pc}
 2386              	.L218:
 2387 002e 00BF     		.align	2
 2388              	.L217:
 2389 0030 04ED00E0 		.word	-536810236
 2390              		.cfi_endproc
 2391              	.LFE74:
 2392              		.size	vTaskDelay, .-vTaskDelay
 2393              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2394              		.align	2
 2395              		.global	vTaskSwitchContext
 2396              		.thumb
 2397              		.thumb_func
 2398              		.type	vTaskSwitchContext, %function
 2399              	vTaskSwitchContext:
 2400              	.LFB93:
2852:..\FreeRTOS\Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2401              		.loc 1 2852 0
 2402              		.cfi_startproc
 2403              		@ args = 0, pretend = 0, frame = 0
 2404              		@ frame_needed = 0, uses_anonymous_args = 0
2853:..\FreeRTOS\Source/tasks.c **** 	{
 2405              		.loc 1 2853 0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 140


 2406 0000 2F4B     		ldr	r3, .L227
 2407 0002 D3F8F030 		ldr	r3, [r3, #240]
 2408 0006 23B1     		cbz	r3, .L220
2857:..\FreeRTOS\Source/tasks.c **** 	}
 2409              		.loc 1 2857 0
 2410 0008 0122     		movs	r2, #1
 2411 000a 2D4B     		ldr	r3, .L227
 2412 000c C3F80021 		str	r2, [r3, #256]
 2413 0010 7047     		bx	lr
 2414              	.L220:
2852:..\FreeRTOS\Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2415              		.loc 1 2852 0
 2416 0012 10B5     		push	{r4, lr}
 2417              		.cfi_def_cfa_offset 8
 2418              		.cfi_offset 4, -8
 2419              		.cfi_offset 14, -4
2861:..\FreeRTOS\Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2420              		.loc 1 2861 0
 2421 0014 2A4C     		ldr	r4, .L227
 2422 0016 0023     		movs	r3, #0
 2423 0018 C4F80031 		str	r3, [r4, #256]
2869:..\FreeRTOS\Source/tasks.c **** 				#endif
 2424              		.loc 1 2869 0
 2425 001c FFF7FEFF 		bl	StatisticsCounter_ReadCounter
 2426              	.LVL227:
2879:..\FreeRTOS\Source/tasks.c **** 				{
 2427              		.loc 1 2879 0
 2428 0020 D4F80431 		ldr	r3, [r4, #260]
 2429 0024 9842     		cmp	r0, r3
 2430 0026 05D9     		bls	.L222
2881:..\FreeRTOS\Source/tasks.c **** 				}
 2431              		.loc 1 2881 0
 2432 0028 D4F8D820 		ldr	r2, [r4, #216]
 2433 002c C31A     		subs	r3, r0, r3
 2434 002e 116D     		ldr	r1, [r2, #80]
 2435 0030 0B44     		add	r3, r3, r1
 2436 0032 1365     		str	r3, [r2, #80]
 2437              	.L222:
2887:..\FreeRTOS\Source/tasks.c **** 		}
 2438              		.loc 1 2887 0
 2439 0034 224B     		ldr	r3, .L227
 2440 0036 C3F80401 		str	r0, [r3, #260]
 2441              	.LBB49:
2892:..\FreeRTOS\Source/tasks.c **** 
 2442              		.loc 1 2892 0
 2443 003a D3F8D830 		ldr	r3, [r3, #216]
 2444 003e 1B6B     		ldr	r3, [r3, #48]
 2445              	.LVL228:
 2446 0040 1A68     		ldr	r2, [r3]
 2447 0042 B2F1A53F 		cmp	r2, #-1515870811
 2448 0046 0BD1     		bne	.L223
2892:..\FreeRTOS\Source/tasks.c **** 
 2449              		.loc 1 2892 0 is_stmt 0 discriminator 2
 2450 0048 5A68     		ldr	r2, [r3, #4]
 2451 004a B2F1A53F 		cmp	r2, #-1515870811
 2452 004e 07D1     		bne	.L223
2892:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 141


 2453              		.loc 1 2892 0 discriminator 4
 2454 0050 9A68     		ldr	r2, [r3, #8]
 2455 0052 B2F1A53F 		cmp	r2, #-1515870811
 2456 0056 03D1     		bne	.L223
2892:..\FreeRTOS\Source/tasks.c **** 
 2457              		.loc 1 2892 0 discriminator 6
 2458 0058 DB68     		ldr	r3, [r3, #12]
 2459              	.LVL229:
 2460 005a B3F1A53F 		cmp	r3, #-1515870811
 2461 005e 07D0     		beq	.L224
 2462              	.L223:
2892:..\FreeRTOS\Source/tasks.c **** 
 2463              		.loc 1 2892 0 discriminator 7
 2464 0060 174B     		ldr	r3, .L227
 2465 0062 D3F8D800 		ldr	r0, [r3, #216]
 2466 0066 D3F8D810 		ldr	r1, [r3, #216]
 2467 006a 3431     		adds	r1, r1, #52
 2468 006c FFF7FEFF 		bl	vApplicationStackOverflowHook
 2469              	.LVL230:
 2470              	.L224:
 2471              	.LBE49:
 2472              	.LBB50:
2896:..\FreeRTOS\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2473              		.loc 1 2896 0 is_stmt 1
 2474 0070 134A     		ldr	r2, .L227
 2475 0072 D2F8E430 		ldr	r3, [r2, #228]
 2476              	.LVL231:
 2477              	.LBB51:
 2478              	.LBB52:
 134:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 2479              		.loc 2 134 0
 2480              		.syntax unified
 2481              	@ 134 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 2482 0076 B3FA83F3 		clz r3, r3
 2483              	@ 0 "" 2
 2484              	.LVL232:
 2485              		.thumb
 2486              		.syntax unified
 2487 007a DBB2     		uxtb	r3, r3
 2488              	.LBE52:
 2489              	.LBE51:
2896:..\FreeRTOS\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2490              		.loc 1 2896 0
 2491 007c C3F11F03 		rsb	r3, r3, #31
 2492              	.LVL233:
 2493              	.LBB53:
 2494 0080 9800     		lsls	r0, r3, #2
 2495 0082 C418     		adds	r4, r0, r3
 2496 0084 A100     		lsls	r1, r4, #2
 2497 0086 1144     		add	r1, r1, r2
 2498 0088 4C6B     		ldr	r4, [r1, #52]
 2499 008a 6468     		ldr	r4, [r4, #4]
 2500 008c 4C63     		str	r4, [r1, #52]
 2501 008e 02F13001 		add	r1, r2, #48
 2502 0092 1844     		add	r0, r0, r3
 2503 0094 8200     		lsls	r2, r0, #2
 2504 0096 0832     		adds	r2, r2, #8
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 142


 2505 0098 0A44     		add	r2, r2, r1
 2506 009a 9442     		cmp	r4, r2
 2507 009c 06D1     		bne	.L225
2896:..\FreeRTOS\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2508              		.loc 1 2896 0 is_stmt 0 discriminator 1
 2509 009e 6068     		ldr	r0, [r4, #4]
 2510 00a0 03EB8301 		add	r1, r3, r3, lsl #2
 2511 00a4 8A00     		lsls	r2, r1, #2
 2512 00a6 0649     		ldr	r1, .L227
 2513 00a8 0A44     		add	r2, r2, r1
 2514 00aa 5063     		str	r0, [r2, #52]
 2515              	.L225:
2896:..\FreeRTOS\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2516              		.loc 1 2896 0 discriminator 3
 2517 00ac 0449     		ldr	r1, .L227
 2518 00ae 03EB8303 		add	r3, r3, r3, lsl #2
 2519              	.LVL234:
 2520 00b2 9A00     		lsls	r2, r3, #2
 2521 00b4 0A44     		add	r2, r2, r1
 2522 00b6 536B     		ldr	r3, [r2, #52]
 2523 00b8 DB68     		ldr	r3, [r3, #12]
 2524 00ba C1F8D830 		str	r3, [r1, #216]
 2525 00be 10BD     		pop	{r4, pc}
 2526              	.L228:
 2527              		.align	2
 2528              	.L227:
 2529 00c0 00000000 		.word	.LANCHOR0
 2530              	.LBE53:
 2531              	.LBE50:
 2532              		.cfi_endproc
 2533              	.LFE93:
 2534              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2535              		.section	.text.vTaskSuspend,"ax",%progbits
 2536              		.align	2
 2537              		.global	vTaskSuspend
 2538              		.thumb
 2539              		.thumb_func
 2540              		.type	vTaskSuspend, %function
 2541              	vTaskSuspend:
 2542              	.LFB79:
1631:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
 2543              		.loc 1 1631 0 is_stmt 1
 2544              		.cfi_startproc
 2545              		@ args = 0, pretend = 0, frame = 0
 2546              		@ frame_needed = 0, uses_anonymous_args = 0
 2547              	.LVL235:
 2548 0000 38B5     		push	{r3, r4, r5, lr}
 2549              		.cfi_def_cfa_offset 16
 2550              		.cfi_offset 3, -16
 2551              		.cfi_offset 4, -12
 2552              		.cfi_offset 5, -8
 2553              		.cfi_offset 14, -4
 2554 0002 0446     		mov	r4, r0
1634:..\FreeRTOS\Source/tasks.c **** 		{
 2555              		.loc 1 1634 0
 2556 0004 FFF7FEFF 		bl	vPortEnterCritical
 2557              	.LVL236:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 143


1638:..\FreeRTOS\Source/tasks.c **** 
 2558              		.loc 1 1638 0
 2559 0008 14B9     		cbnz	r4, .L230
1638:..\FreeRTOS\Source/tasks.c **** 
 2560              		.loc 1 1638 0 is_stmt 0 discriminator 1
 2561 000a 2B4B     		ldr	r3, .L239
 2562 000c D3F8D840 		ldr	r4, [r3, #216]
 2563              	.LVL237:
 2564              	.L230:
1644:..\FreeRTOS\Source/tasks.c **** 			{
 2565              		.loc 1 1644 0 is_stmt 1 discriminator 4
 2566 0010 251D     		adds	r5, r4, #4
 2567 0012 2846     		mov	r0, r5
 2568 0014 FFF7FEFF 		bl	uxListRemove
 2569              	.LVL238:
 2570 0018 80B9     		cbnz	r0, .L231
1646:..\FreeRTOS\Source/tasks.c **** 			}
 2571              		.loc 1 1646 0
 2572 001a E26A     		ldr	r2, [r4, #44]
 2573 001c 02EB8201 		add	r1, r2, r2, lsl #2
 2574 0020 8B00     		lsls	r3, r1, #2
 2575 0022 2549     		ldr	r1, .L239
 2576 0024 0B44     		add	r3, r3, r1
 2577 0026 1B6B     		ldr	r3, [r3, #48]
 2578 0028 43B9     		cbnz	r3, .L231
1646:..\FreeRTOS\Source/tasks.c **** 			}
 2579              		.loc 1 1646 0 is_stmt 0 discriminator 1
 2580 002a 0123     		movs	r3, #1
 2581 002c 03FA02F2 		lsl	r2, r3, r2
 2582 0030 D1F8E430 		ldr	r3, [r1, #228]
 2583 0034 23EA0202 		bic	r2, r3, r2
 2584 0038 C1F8E420 		str	r2, [r1, #228]
 2585              	.L231:
1654:..\FreeRTOS\Source/tasks.c **** 			{
 2586              		.loc 1 1654 0 is_stmt 1
 2587 003c A36A     		ldr	r3, [r4, #40]
 2588 003e 1BB1     		cbz	r3, .L232
1656:..\FreeRTOS\Source/tasks.c **** 			}
 2589              		.loc 1 1656 0
 2590 0040 04F11800 		add	r0, r4, #24
 2591 0044 FFF7FEFF 		bl	uxListRemove
 2592              	.LVL239:
 2593              	.L232:
1663:..\FreeRTOS\Source/tasks.c **** 
 2594              		.loc 1 1663 0
 2595 0048 2946     		mov	r1, r5
 2596 004a 1B48     		ldr	r0, .L239
 2597 004c FFF7FEFF 		bl	vListInsertEnd
 2598              	.LVL240:
1667:..\FreeRTOS\Source/tasks.c **** 				{
 2599              		.loc 1 1667 0
 2600 0050 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 2601 0054 DBB2     		uxtb	r3, r3
 2602 0056 012B     		cmp	r3, #1
 2603 0058 02D1     		bne	.L233
1671:..\FreeRTOS\Source/tasks.c **** 				}
 2604              		.loc 1 1671 0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 144


 2605 005a 0023     		movs	r3, #0
 2606 005c 84F85830 		strb	r3, [r4, #88]
 2607              	.L233:
1676:..\FreeRTOS\Source/tasks.c **** 
 2608              		.loc 1 1676 0
 2609 0060 FFF7FEFF 		bl	vPortExitCritical
 2610              	.LVL241:
1678:..\FreeRTOS\Source/tasks.c **** 		{
 2611              		.loc 1 1678 0
 2612 0064 144B     		ldr	r3, .L239
 2613 0066 D3F8DC30 		ldr	r3, [r3, #220]
 2614 006a 2BB1     		cbz	r3, .L234
1682:..\FreeRTOS\Source/tasks.c **** 			{
 2615              		.loc 1 1682 0
 2616 006c FFF7FEFF 		bl	vPortEnterCritical
 2617              	.LVL242:
1684:..\FreeRTOS\Source/tasks.c **** 			}
 2618              		.loc 1 1684 0
 2619 0070 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2620              	.LVL243:
1686:..\FreeRTOS\Source/tasks.c **** 		}
 2621              		.loc 1 1686 0
 2622 0074 FFF7FEFF 		bl	vPortExitCritical
 2623              	.LVL244:
 2624              	.L234:
1693:..\FreeRTOS\Source/tasks.c **** 		{
 2625              		.loc 1 1693 0
 2626 0078 0F4B     		ldr	r3, .L239
 2627 007a D3F8D830 		ldr	r3, [r3, #216]
 2628 007e 9C42     		cmp	r4, r3
 2629 0080 19D1     		bne	.L229
1695:..\FreeRTOS\Source/tasks.c **** 			{
 2630              		.loc 1 1695 0
 2631 0082 0D4B     		ldr	r3, .L239
 2632 0084 D3F8DC30 		ldr	r3, [r3, #220]
 2633 0088 43B1     		cbz	r3, .L236
1699:..\FreeRTOS\Source/tasks.c **** 			}
 2634              		.loc 1 1699 0
 2635 008a 4FF08052 		mov	r2, #268435456
 2636 008e 0B4B     		ldr	r3, .L239+4
 2637 0090 1A60     		str	r2, [r3]
 2638              		.syntax unified
 2639              	@ 1699 "..\FreeRTOS\Source\tasks.c" 1
 2640 0092 BFF34F8F 		dsb
 2641              	@ 0 "" 2
 2642              	@ 1699 "..\FreeRTOS\Source\tasks.c" 1
 2643 0096 BFF36F8F 		isb
 2644              	@ 0 "" 2
 2645              		.thumb
 2646              		.syntax unified
 2647 009a 38BD     		pop	{r3, r4, r5, pc}
 2648              	.LVL245:
 2649              	.L236:
1706:..\FreeRTOS\Source/tasks.c **** 				{
 2650              		.loc 1 1706 0
 2651 009c 064B     		ldr	r3, .L239
 2652 009e 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 145


 2653 00a0 D3F8D430 		ldr	r3, [r3, #212]
 2654 00a4 9A42     		cmp	r2, r3
 2655 00a6 04D1     		bne	.L237
1712:..\FreeRTOS\Source/tasks.c **** 				}
 2656              		.loc 1 1712 0
 2657 00a8 0022     		movs	r2, #0
 2658 00aa 034B     		ldr	r3, .L239
 2659 00ac C3F8D820 		str	r2, [r3, #216]
 2660 00b0 38BD     		pop	{r3, r4, r5, pc}
 2661              	.LVL246:
 2662              	.L237:
1716:..\FreeRTOS\Source/tasks.c **** 				}
 2663              		.loc 1 1716 0
 2664 00b2 FFF7FEFF 		bl	vTaskSwitchContext
 2665              	.LVL247:
 2666              	.L229:
 2667 00b6 38BD     		pop	{r3, r4, r5, pc}
 2668              	.LVL248:
 2669              	.L240:
 2670              		.align	2
 2671              	.L239:
 2672 00b8 00000000 		.word	.LANCHOR0
 2673 00bc 04ED00E0 		.word	-536810236
 2674              		.cfi_endproc
 2675              	.LFE79:
 2676              		.size	vTaskSuspend, .-vTaskSuspend
 2677              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2678              		.align	2
 2679              		.global	vTaskPlaceOnEventList
 2680              		.thumb
 2681              		.thumb_func
 2682              		.type	vTaskPlaceOnEventList, %function
 2683              	vTaskPlaceOnEventList:
 2684              	.LFB94:
2911:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxEventList );
 2685              		.loc 1 2911 0
 2686              		.cfi_startproc
 2687              		@ args = 0, pretend = 0, frame = 0
 2688              		@ frame_needed = 0, uses_anonymous_args = 0
 2689              	.LVL249:
 2690 0000 10B5     		push	{r4, lr}
 2691              		.cfi_def_cfa_offset 8
 2692              		.cfi_offset 4, -8
 2693              		.cfi_offset 14, -4
 2694 0002 0C46     		mov	r4, r1
2921:..\FreeRTOS\Source/tasks.c **** 
 2695              		.loc 1 2921 0
 2696 0004 054B     		ldr	r3, .L243
 2697 0006 D3F8D810 		ldr	r1, [r3, #216]
 2698              	.LVL250:
 2699 000a 1831     		adds	r1, r1, #24
 2700 000c FFF7FEFF 		bl	vListInsert
 2701              	.LVL251:
2923:..\FreeRTOS\Source/tasks.c **** }
 2702              		.loc 1 2923 0
 2703 0010 0121     		movs	r1, #1
 2704 0012 2046     		mov	r0, r4
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 146


 2705 0014 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2706              	.LVL252:
 2707 0018 10BD     		pop	{r4, pc}
 2708              	.LVL253:
 2709              	.L244:
 2710 001a 00BF     		.align	2
 2711              	.L243:
 2712 001c 00000000 		.word	.LANCHOR0
 2713              		.cfi_endproc
 2714              	.LFE94:
 2715              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2716              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2717              		.align	2
 2718              		.global	vTaskPlaceOnUnorderedEventList
 2719              		.thumb
 2720              		.thumb_func
 2721              		.type	vTaskPlaceOnUnorderedEventList, %function
 2722              	vTaskPlaceOnUnorderedEventList:
 2723              	.LFB95:
2928:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxEventList );
 2724              		.loc 1 2928 0
 2725              		.cfi_startproc
 2726              		@ args = 0, pretend = 0, frame = 0
 2727              		@ frame_needed = 0, uses_anonymous_args = 0
 2728              	.LVL254:
 2729 0000 10B5     		push	{r4, lr}
 2730              		.cfi_def_cfa_offset 8
 2731              		.cfi_offset 4, -8
 2732              		.cfi_offset 14, -4
 2733 0002 1446     		mov	r4, r2
2938:..\FreeRTOS\Source/tasks.c **** 
 2734              		.loc 1 2938 0
 2735 0004 074B     		ldr	r3, .L247
 2736 0006 D3F8D820 		ldr	r2, [r3, #216]
 2737              	.LVL255:
 2738 000a 41F00041 		orr	r1, r1, #-2147483648
 2739              	.LVL256:
 2740 000e 9161     		str	r1, [r2, #24]
2945:..\FreeRTOS\Source/tasks.c **** 
 2741              		.loc 1 2945 0
 2742 0010 D3F8D810 		ldr	r1, [r3, #216]
 2743 0014 1831     		adds	r1, r1, #24
 2744 0016 FFF7FEFF 		bl	vListInsertEnd
 2745              	.LVL257:
2947:..\FreeRTOS\Source/tasks.c **** }
 2746              		.loc 1 2947 0
 2747 001a 0121     		movs	r1, #1
 2748 001c 2046     		mov	r0, r4
 2749 001e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2750              	.LVL258:
 2751 0022 10BD     		pop	{r4, pc}
 2752              	.LVL259:
 2753              	.L248:
 2754              		.align	2
 2755              	.L247:
 2756 0024 00000000 		.word	.LANCHOR0
 2757              		.cfi_endproc
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 147


 2758              	.LFE95:
 2759              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 2760              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2761              		.align	2
 2762              		.global	xTaskRemoveFromEventList
 2763              		.thumb
 2764              		.thumb_func
 2765              		.type	xTaskRemoveFromEventList, %function
 2766              	xTaskRemoveFromEventList:
 2767              	.LFB96:
2985:..\FreeRTOS\Source/tasks.c **** TCB_t *pxUnblockedTCB;
 2768              		.loc 1 2985 0
 2769              		.cfi_startproc
 2770              		@ args = 0, pretend = 0, frame = 0
 2771              		@ frame_needed = 0, uses_anonymous_args = 0
 2772              	.LVL260:
 2773 0000 38B5     		push	{r3, r4, r5, lr}
 2774              		.cfi_def_cfa_offset 16
 2775              		.cfi_offset 3, -16
 2776              		.cfi_offset 4, -12
 2777              		.cfi_offset 5, -8
 2778              		.cfi_offset 14, -4
3002:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2779              		.loc 1 3002 0
 2780 0002 C368     		ldr	r3, [r0, #12]
 2781 0004 DC68     		ldr	r4, [r3, #12]
 2782              	.LVL261:
3004:..\FreeRTOS\Source/tasks.c **** 
 2783              		.loc 1 3004 0
 2784 0006 04F11805 		add	r5, r4, #24
 2785 000a 2846     		mov	r0, r5
 2786              	.LVL262:
 2787 000c FFF7FEFF 		bl	uxListRemove
 2788              	.LVL263:
3006:..\FreeRTOS\Source/tasks.c **** 	{
 2789              		.loc 1 3006 0
 2790 0010 164B     		ldr	r3, .L255
 2791 0012 D3F8F030 		ldr	r3, [r3, #240]
 2792 0016 B3B9     		cbnz	r3, .L250
3008:..\FreeRTOS\Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2793              		.loc 1 3008 0
 2794 0018 251D     		adds	r5, r4, #4
 2795 001a 2846     		mov	r0, r5
 2796 001c FFF7FEFF 		bl	uxListRemove
 2797              	.LVL264:
3009:..\FreeRTOS\Source/tasks.c **** 	}
 2798              		.loc 1 3009 0
 2799 0020 E36A     		ldr	r3, [r4, #44]
 2800 0022 0122     		movs	r2, #1
 2801 0024 02FA03F1 		lsl	r1, r2, r3
 2802 0028 1048     		ldr	r0, .L255
 2803 002a D0F8E420 		ldr	r2, [r0, #228]
 2804 002e 0A43     		orrs	r2, r2, r1
 2805 0030 C0F8E420 		str	r2, [r0, #228]
 2806 0034 3030     		adds	r0, r0, #48
 2807 0036 03EB8303 		add	r3, r3, r3, lsl #2
 2808 003a 9A00     		lsls	r2, r3, #2
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 148


 2809 003c 2946     		mov	r1, r5
 2810 003e 1044     		add	r0, r0, r2
 2811 0040 FFF7FEFF 		bl	vListInsertEnd
 2812              	.LVL265:
 2813 0044 03E0     		b	.L251
 2814              	.L250:
3015:..\FreeRTOS\Source/tasks.c **** 	}
 2815              		.loc 1 3015 0
 2816 0046 2946     		mov	r1, r5
 2817 0048 0948     		ldr	r0, .L255+4
 2818 004a FFF7FEFF 		bl	vListInsertEnd
 2819              	.LVL266:
 2820              	.L251:
3018:..\FreeRTOS\Source/tasks.c **** 	{
 2821              		.loc 1 3018 0
 2822 004e E26A     		ldr	r2, [r4, #44]
 2823 0050 064B     		ldr	r3, .L255
 2824 0052 D3F8D830 		ldr	r3, [r3, #216]
 2825 0056 DB6A     		ldr	r3, [r3, #44]
 2826 0058 9A42     		cmp	r2, r3
 2827 005a 04D9     		bls	.L253
 2828              	.LVL267:
3027:..\FreeRTOS\Source/tasks.c **** 	}
 2829              		.loc 1 3027 0
 2830 005c 0120     		movs	r0, #1
 2831 005e 034B     		ldr	r3, .L255
 2832 0060 C3F80001 		str	r0, [r3, #256]
 2833 0064 38BD     		pop	{r3, r4, r5, pc}
 2834              	.LVL268:
 2835              	.L253:
3031:..\FreeRTOS\Source/tasks.c **** 	}
 2836              		.loc 1 3031 0
 2837 0066 0020     		movs	r0, #0
 2838              	.LVL269:
3049:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 2839              		.loc 1 3049 0
 2840 0068 38BD     		pop	{r3, r4, r5, pc}
 2841              	.LVL270:
 2842              	.L256:
 2843 006a 00BF     		.align	2
 2844              	.L255:
 2845 006c 00000000 		.word	.LANCHOR0
 2846 0070 14000000 		.word	.LANCHOR0+20
 2847              		.cfi_endproc
 2848              	.LFE96:
 2849              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 2850              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 2851              		.align	2
 2852              		.global	vTaskRemoveFromUnorderedEventList
 2853              		.thumb
 2854              		.thumb_func
 2855              		.type	vTaskRemoveFromUnorderedEventList, %function
 2856              	vTaskRemoveFromUnorderedEventList:
 2857              	.LFB97:
3053:..\FreeRTOS\Source/tasks.c **** TCB_t *pxUnblockedTCB;
 2858              		.loc 1 3053 0
 2859              		.cfi_startproc
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 149


 2860              		@ args = 0, pretend = 0, frame = 0
 2861              		@ frame_needed = 0, uses_anonymous_args = 0
 2862              	.LVL271:
 2863 0000 70B5     		push	{r4, r5, r6, lr}
 2864              		.cfi_def_cfa_offset 16
 2865              		.cfi_offset 4, -16
 2866              		.cfi_offset 5, -12
 2867              		.cfi_offset 6, -8
 2868              		.cfi_offset 14, -4
3061:..\FreeRTOS\Source/tasks.c **** 
 2869              		.loc 1 3061 0
 2870 0002 41F00041 		orr	r1, r1, #-2147483648
 2871              	.LVL272:
 2872 0006 0160     		str	r1, [r0]
3065:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2873              		.loc 1 3065 0
 2874 0008 C568     		ldr	r5, [r0, #12]
 2875              	.LVL273:
3067:..\FreeRTOS\Source/tasks.c **** 
 2876              		.loc 1 3067 0
 2877 000a FFF7FEFF 		bl	uxListRemove
 2878              	.LVL274:
3072:..\FreeRTOS\Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 2879              		.loc 1 3072 0
 2880 000e 2E1D     		adds	r6, r5, #4
 2881 0010 3046     		mov	r0, r6
 2882 0012 FFF7FEFF 		bl	uxListRemove
 2883              	.LVL275:
3073:..\FreeRTOS\Source/tasks.c **** 
 2884              		.loc 1 3073 0
 2885 0016 EB6A     		ldr	r3, [r5, #44]
 2886 0018 0122     		movs	r2, #1
 2887 001a 02FA03F1 		lsl	r1, r2, r3
 2888 001e 0C4C     		ldr	r4, .L260
 2889 0020 D4F8E420 		ldr	r2, [r4, #228]
 2890 0024 0A43     		orrs	r2, r2, r1
 2891 0026 C4F8E420 		str	r2, [r4, #228]
 2892 002a 04F13000 		add	r0, r4, #48
 2893 002e 03EB8303 		add	r3, r3, r3, lsl #2
 2894 0032 9A00     		lsls	r2, r3, #2
 2895 0034 3146     		mov	r1, r6
 2896 0036 1044     		add	r0, r0, r2
 2897 0038 FFF7FEFF 		bl	vListInsertEnd
 2898              	.LVL276:
3075:..\FreeRTOS\Source/tasks.c **** 	{
 2899              		.loc 1 3075 0
 2900 003c EA6A     		ldr	r2, [r5, #44]
 2901 003e D4F8D830 		ldr	r3, [r4, #216]
 2902 0042 DB6A     		ldr	r3, [r3, #44]
 2903 0044 9A42     		cmp	r2, r3
 2904 0046 02D9     		bls	.L257
3081:..\FreeRTOS\Source/tasks.c **** 	}
 2905              		.loc 1 3081 0
 2906 0048 0122     		movs	r2, #1
 2907 004a C4F80021 		str	r2, [r4, #256]
 2908              	.L257:
 2909 004e 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 150


 2910              	.LVL277:
 2911              	.L261:
 2912              		.align	2
 2913              	.L260:
 2914 0050 00000000 		.word	.LANCHOR0
 2915              		.cfi_endproc
 2916              	.LFE97:
 2917              		.size	vTaskRemoveFromUnorderedEventList, .-vTaskRemoveFromUnorderedEventList
 2918              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 2919              		.align	2
 2920              		.global	vTaskSetTimeOutState
 2921              		.thumb
 2922              		.thumb_func
 2923              		.type	vTaskSetTimeOutState, %function
 2924              	vTaskSetTimeOutState:
 2925              	.LFB98:
3087:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxTimeOut );
 2926              		.loc 1 3087 0
 2927              		.cfi_startproc
 2928              		@ args = 0, pretend = 0, frame = 0
 2929              		@ frame_needed = 0, uses_anonymous_args = 0
 2930              	.LVL278:
 2931 0000 10B5     		push	{r4, lr}
 2932              		.cfi_def_cfa_offset 8
 2933              		.cfi_offset 4, -8
 2934              		.cfi_offset 14, -4
 2935 0002 0446     		mov	r4, r0
3089:..\FreeRTOS\Source/tasks.c **** 	{
 2936              		.loc 1 3089 0
 2937 0004 FFF7FEFF 		bl	vPortEnterCritical
 2938              	.LVL279:
3091:..\FreeRTOS\Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 2939              		.loc 1 3091 0
 2940 0008 044B     		ldr	r3, .L264
 2941 000a D3F8F820 		ldr	r2, [r3, #248]
 2942 000e 2260     		str	r2, [r4]
3092:..\FreeRTOS\Source/tasks.c **** 	}
 2943              		.loc 1 3092 0
 2944 0010 D3F8EC30 		ldr	r3, [r3, #236]
 2945 0014 6360     		str	r3, [r4, #4]
3094:..\FreeRTOS\Source/tasks.c **** }
 2946              		.loc 1 3094 0
 2947 0016 FFF7FEFF 		bl	vPortExitCritical
 2948              	.LVL280:
 2949 001a 10BD     		pop	{r4, pc}
 2950              	.LVL281:
 2951              	.L265:
 2952              		.align	2
 2953              	.L264:
 2954 001c 00000000 		.word	.LANCHOR0
 2955              		.cfi_endproc
 2956              	.LFE98:
 2957              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 2958              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 2959              		.align	2
 2960              		.global	vTaskInternalSetTimeOutState
 2961              		.thumb
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 151


 2962              		.thumb_func
 2963              		.type	vTaskInternalSetTimeOutState, %function
 2964              	vTaskInternalSetTimeOutState:
 2965              	.LFB99:
3099:..\FreeRTOS\Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 2966              		.loc 1 3099 0
 2967              		.cfi_startproc
 2968              		@ args = 0, pretend = 0, frame = 0
 2969              		@ frame_needed = 0, uses_anonymous_args = 0
 2970              		@ link register save eliminated.
 2971              	.LVL282:
3101:..\FreeRTOS\Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2972              		.loc 1 3101 0
 2973 0000 034B     		ldr	r3, .L267
 2974 0002 D3F8F820 		ldr	r2, [r3, #248]
 2975 0006 0260     		str	r2, [r0]
3102:..\FreeRTOS\Source/tasks.c **** }
 2976              		.loc 1 3102 0
 2977 0008 D3F8EC30 		ldr	r3, [r3, #236]
 2978 000c 4360     		str	r3, [r0, #4]
 2979 000e 7047     		bx	lr
 2980              	.L268:
 2981              		.align	2
 2982              	.L267:
 2983 0010 00000000 		.word	.LANCHOR0
 2984              		.cfi_endproc
 2985              	.LFE99:
 2986              		.size	vTaskInternalSetTimeOutState, .-vTaskInternalSetTimeOutState
 2987              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 2988              		.align	2
 2989              		.global	xTaskCheckForTimeOut
 2990              		.thumb
 2991              		.thumb_func
 2992              		.type	xTaskCheckForTimeOut, %function
 2993              	xTaskCheckForTimeOut:
 2994              	.LFB100:
3107:..\FreeRTOS\Source/tasks.c **** BaseType_t xReturn;
 2995              		.loc 1 3107 0
 2996              		.cfi_startproc
 2997              		@ args = 0, pretend = 0, frame = 0
 2998              		@ frame_needed = 0, uses_anonymous_args = 0
 2999              	.LVL283:
 3000 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3001              		.cfi_def_cfa_offset 24
 3002              		.cfi_offset 3, -24
 3003              		.cfi_offset 4, -20
 3004              		.cfi_offset 5, -16
 3005              		.cfi_offset 6, -12
 3006              		.cfi_offset 7, -8
 3007              		.cfi_offset 14, -4
 3008 0002 0446     		mov	r4, r0
 3009 0004 0D46     		mov	r5, r1
3113:..\FreeRTOS\Source/tasks.c **** 	{
 3010              		.loc 1 3113 0
 3011 0006 FFF7FEFF 		bl	vPortEnterCritical
 3012              	.LVL284:
 3013              	.LBB54:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 152


3116:..\FreeRTOS\Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3014              		.loc 1 3116 0
 3015 000a 124B     		ldr	r3, .L276
 3016 000c D3F8EC10 		ldr	r1, [r3, #236]
 3017              	.LVL285:
3117:..\FreeRTOS\Source/tasks.c **** 
 3018              		.loc 1 3117 0
 3019 0010 6268     		ldr	r2, [r4, #4]
 3020 0012 881A     		subs	r0, r1, r2
 3021              	.LVL286:
3131:..\FreeRTOS\Source/tasks.c **** 			{
 3022              		.loc 1 3131 0
 3023 0014 2B68     		ldr	r3, [r5]
 3024 0016 B3F1FF3F 		cmp	r3, #-1
 3025 001a 14D0     		beq	.L273
3141:..\FreeRTOS\Source/tasks.c **** 		{
 3026              		.loc 1 3141 0
 3027 001c 2768     		ldr	r7, [r4]
 3028 001e 0D4E     		ldr	r6, .L276
 3029 0020 D6F8F860 		ldr	r6, [r6, #248]
 3030 0024 B742     		cmp	r7, r6
 3031 0026 01D0     		beq	.L271
3141:..\FreeRTOS\Source/tasks.c **** 		{
 3032              		.loc 1 3141 0 is_stmt 0 discriminator 1
 3033 0028 9142     		cmp	r1, r2
 3034 002a 0ED2     		bcs	.L274
 3035              	.L271:
3150:..\FreeRTOS\Source/tasks.c **** 		{
 3036              		.loc 1 3150 0 is_stmt 1
 3037 002c 9842     		cmp	r0, r3
 3038 002e 06D2     		bcs	.L272
3153:..\FreeRTOS\Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3039              		.loc 1 3153 0
 3040 0030 1B1A     		subs	r3, r3, r0
 3041 0032 2B60     		str	r3, [r5]
3154:..\FreeRTOS\Source/tasks.c **** 			xReturn = pdFALSE;
 3042              		.loc 1 3154 0
 3043 0034 2046     		mov	r0, r4
 3044              	.LVL287:
 3045 0036 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3046              	.LVL288:
3155:..\FreeRTOS\Source/tasks.c **** 		}
 3047              		.loc 1 3155 0
 3048 003a 0024     		movs	r4, #0
 3049              	.LVL289:
 3050 003c 06E0     		b	.L270
 3051              	.LVL290:
 3052              	.L272:
3159:..\FreeRTOS\Source/tasks.c **** 			xReturn = pdTRUE;
 3053              		.loc 1 3159 0
 3054 003e 0023     		movs	r3, #0
 3055 0040 2B60     		str	r3, [r5]
 3056              	.LVL291:
3160:..\FreeRTOS\Source/tasks.c **** 		}
 3057              		.loc 1 3160 0
 3058 0042 0124     		movs	r4, #1
 3059              	.LVL292:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 153


 3060 0044 02E0     		b	.L270
 3061              	.LVL293:
 3062              	.L273:
3136:..\FreeRTOS\Source/tasks.c **** 			}
 3063              		.loc 1 3136 0
 3064 0046 0024     		movs	r4, #0
 3065              	.LVL294:
 3066 0048 00E0     		b	.L270
 3067              	.LVL295:
 3068              	.L274:
3148:..\FreeRTOS\Source/tasks.c **** 		}
 3069              		.loc 1 3148 0
 3070 004a 0124     		movs	r4, #1
 3071              	.LVL296:
 3072              	.L270:
 3073              	.LBE54:
3163:..\FreeRTOS\Source/tasks.c **** 
 3074              		.loc 1 3163 0
 3075 004c FFF7FEFF 		bl	vPortExitCritical
 3076              	.LVL297:
3166:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 3077              		.loc 1 3166 0
 3078 0050 2046     		mov	r0, r4
 3079 0052 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3080              	.LVL298:
 3081              	.L277:
 3082              		.align	2
 3083              	.L276:
 3084 0054 00000000 		.word	.LANCHOR0
 3085              		.cfi_endproc
 3086              	.LFE100:
 3087              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 3088              		.section	.text.vTaskMissedYield,"ax",%progbits
 3089              		.align	2
 3090              		.global	vTaskMissedYield
 3091              		.thumb
 3092              		.thumb_func
 3093              		.type	vTaskMissedYield, %function
 3094              	vTaskMissedYield:
 3095              	.LFB101:
3170:..\FreeRTOS\Source/tasks.c **** 	xYieldPending = pdTRUE;
 3096              		.loc 1 3170 0
 3097              		.cfi_startproc
 3098              		@ args = 0, pretend = 0, frame = 0
 3099              		@ frame_needed = 0, uses_anonymous_args = 0
 3100              		@ link register save eliminated.
3171:..\FreeRTOS\Source/tasks.c **** }
 3101              		.loc 1 3171 0
 3102 0000 0122     		movs	r2, #1
 3103 0002 024B     		ldr	r3, .L279
 3104 0004 C3F80021 		str	r2, [r3, #256]
 3105 0008 7047     		bx	lr
 3106              	.L280:
 3107 000a 00BF     		.align	2
 3108              	.L279:
 3109 000c 00000000 		.word	.LANCHOR0
 3110              		.cfi_endproc
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 154


 3111              	.LFE101:
 3112              		.size	vTaskMissedYield, .-vTaskMissedYield
 3113              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 3114              		.align	2
 3115              		.global	uxTaskGetTaskNumber
 3116              		.thumb
 3117              		.thumb_func
 3118              		.type	uxTaskGetTaskNumber, %function
 3119              	uxTaskGetTaskNumber:
 3120              	.LFB102:
3178:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxReturn;
 3121              		.loc 1 3178 0
 3122              		.cfi_startproc
 3123              		@ args = 0, pretend = 0, frame = 0
 3124              		@ frame_needed = 0, uses_anonymous_args = 0
 3125              		@ link register save eliminated.
 3126              	.LVL299:
3182:..\FreeRTOS\Source/tasks.c **** 		{
 3127              		.loc 1 3182 0
 3128 0000 08B1     		cbz	r0, .L283
 3129              	.LVL300:
3185:..\FreeRTOS\Source/tasks.c **** 		}
 3130              		.loc 1 3185 0
 3131 0002 406C     		ldr	r0, [r0, #68]
 3132              	.LVL301:
 3133 0004 7047     		bx	lr
 3134              	.LVL302:
 3135              	.L283:
3189:..\FreeRTOS\Source/tasks.c **** 		}
 3136              		.loc 1 3189 0
 3137 0006 0020     		movs	r0, #0
 3138              	.LVL303:
3193:..\FreeRTOS\Source/tasks.c **** 
 3139              		.loc 1 3193 0
 3140 0008 7047     		bx	lr
 3141              		.cfi_endproc
 3142              	.LFE102:
 3143              		.size	uxTaskGetTaskNumber, .-uxTaskGetTaskNumber
 3144 000a 00BF     		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 3145              		.align	2
 3146              		.global	vTaskSetTaskNumber
 3147              		.thumb
 3148              		.thumb_func
 3149              		.type	vTaskSetTaskNumber, %function
 3150              	vTaskSetTaskNumber:
 3151              	.LFB103:
3201:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
 3152              		.loc 1 3201 0
 3153              		.cfi_startproc
 3154              		@ args = 0, pretend = 0, frame = 0
 3155              		@ frame_needed = 0, uses_anonymous_args = 0
 3156              		@ link register save eliminated.
 3157              	.LVL304:
3204:..\FreeRTOS\Source/tasks.c **** 		{
 3158              		.loc 1 3204 0
 3159 0000 00B1     		cbz	r0, .L284
 3160              	.LVL305:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 155


3207:..\FreeRTOS\Source/tasks.c **** 		}
 3161              		.loc 1 3207 0
 3162 0002 4164     		str	r1, [r0, #68]
 3163              	.LVL306:
 3164              	.L284:
 3165 0004 7047     		bx	lr
 3166              		.cfi_endproc
 3167              	.LFE103:
 3168              		.size	vTaskSetTaskNumber, .-vTaskSetTaskNumber
 3169 0006 00BF     		.section	.text.vTaskGetInfo,"ax",%progbits
 3170              		.align	2
 3171              		.global	vTaskGetInfo
 3172              		.thumb
 3173              		.thumb_func
 3174              		.type	vTaskGetInfo, %function
 3175              	vTaskGetInfo:
 3176              	.LFB107:
3500:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
 3177              		.loc 1 3500 0
 3178              		.cfi_startproc
 3179              		@ args = 0, pretend = 0, frame = 0
 3180              		@ frame_needed = 0, uses_anonymous_args = 0
 3181              	.LVL307:
 3182 0000 70B5     		push	{r4, r5, r6, lr}
 3183              		.cfi_def_cfa_offset 16
 3184              		.cfi_offset 4, -16
 3185              		.cfi_offset 5, -12
 3186              		.cfi_offset 6, -8
 3187              		.cfi_offset 14, -4
 3188 0002 0C46     		mov	r4, r1
 3189 0004 1646     		mov	r6, r2
3504:..\FreeRTOS\Source/tasks.c **** 
 3190              		.loc 1 3504 0
 3191 0006 0546     		mov	r5, r0
 3192 0008 10B9     		cbnz	r0, .L287
3504:..\FreeRTOS\Source/tasks.c **** 
 3193              		.loc 1 3504 0 is_stmt 0 discriminator 1
 3194 000a 1A4A     		ldr	r2, .L295
 3195              	.LVL308:
 3196 000c D2F8D850 		ldr	r5, [r2, #216]
 3197              	.LVL309:
 3198              	.L287:
3506:..\FreeRTOS\Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 3199              		.loc 1 3506 0 is_stmt 1 discriminator 4
 3200 0010 2560     		str	r5, [r4]
3507:..\FreeRTOS\Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 3201              		.loc 1 3507 0 discriminator 4
 3202 0012 05F13402 		add	r2, r5, #52
 3203 0016 6260     		str	r2, [r4, #4]
3508:..\FreeRTOS\Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 3204              		.loc 1 3508 0 discriminator 4
 3205 0018 EA6A     		ldr	r2, [r5, #44]
 3206 001a 2261     		str	r2, [r4, #16]
3509:..\FreeRTOS\Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 3207              		.loc 1 3509 0 discriminator 4
 3208 001c 2A6B     		ldr	r2, [r5, #48]
 3209 001e E261     		str	r2, [r4, #28]
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 156


3510:..\FreeRTOS\Source/tasks.c **** 
 3210              		.loc 1 3510 0 discriminator 4
 3211 0020 2A6C     		ldr	r2, [r5, #64]
 3212 0022 A260     		str	r2, [r4, #8]
3514:..\FreeRTOS\Source/tasks.c **** 		}
 3213              		.loc 1 3514 0 discriminator 4
 3214 0024 AA6C     		ldr	r2, [r5, #72]
 3215 0026 6261     		str	r2, [r4, #20]
3524:..\FreeRTOS\Source/tasks.c **** 		}
 3216              		.loc 1 3524 0 discriminator 4
 3217 0028 2A6D     		ldr	r2, [r5, #80]
 3218 002a A261     		str	r2, [r4, #24]
3535:..\FreeRTOS\Source/tasks.c **** 		{
 3219              		.loc 1 3535 0 discriminator 4
 3220 002c 052B     		cmp	r3, #5
 3221 002e 13D0     		beq	.L288
3537:..\FreeRTOS\Source/tasks.c **** 			{
 3222              		.loc 1 3537 0
 3223 0030 104A     		ldr	r2, .L295
 3224 0032 D2F8D820 		ldr	r2, [r2, #216]
 3225 0036 9542     		cmp	r5, r2
 3226 0038 02D1     		bne	.L289
3539:..\FreeRTOS\Source/tasks.c **** 			}
 3227              		.loc 1 3539 0
 3228 003a 0023     		movs	r3, #0
 3229              	.LVL310:
 3230 003c 2373     		strb	r3, [r4, #12]
 3231 003e 0FE0     		b	.L290
 3232              	.LVL311:
 3233              	.L289:
3543:..\FreeRTOS\Source/tasks.c **** 
 3234              		.loc 1 3543 0
 3235 0040 2373     		strb	r3, [r4, #12]
3550:..\FreeRTOS\Source/tasks.c **** 					{
 3236              		.loc 1 3550 0
 3237 0042 032B     		cmp	r3, #3
 3238 0044 0CD1     		bne	.L290
3552:..\FreeRTOS\Source/tasks.c **** 						{
 3239              		.loc 1 3552 0
 3240 0046 FFF7FEFF 		bl	vTaskSuspendAll
 3241              	.LVL312:
3554:..\FreeRTOS\Source/tasks.c **** 							{
 3242              		.loc 1 3554 0
 3243 004a AB6A     		ldr	r3, [r5, #40]
 3244 004c 0BB1     		cbz	r3, .L291
3556:..\FreeRTOS\Source/tasks.c **** 							}
 3245              		.loc 1 3556 0
 3246 004e 0223     		movs	r3, #2
 3247 0050 2373     		strb	r3, [r4, #12]
 3248              	.L291:
3559:..\FreeRTOS\Source/tasks.c **** 					}
 3249              		.loc 1 3559 0
 3250 0052 FFF7FEFF 		bl	xTaskResumeAll
 3251              	.LVL313:
 3252 0056 03E0     		b	.L290
 3253              	.LVL314:
 3254              	.L288:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 157


3567:..\FreeRTOS\Source/tasks.c **** 		}
 3255              		.loc 1 3567 0
 3256 0058 2846     		mov	r0, r5
 3257 005a FFF7FEFF 		bl	eTaskGetState
 3258              	.LVL315:
 3259 005e 2073     		strb	r0, [r4, #12]
 3260              	.L290:
3572:..\FreeRTOS\Source/tasks.c **** 		{
 3261              		.loc 1 3572 0
 3262 0060 26B1     		cbz	r6, .L292
3580:..\FreeRTOS\Source/tasks.c **** 			}
 3263              		.loc 1 3580 0
 3264 0062 286B     		ldr	r0, [r5, #48]
 3265 0064 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 3266              	.LVL316:
 3267 0068 2084     		strh	r0, [r4, #32]	@ movhi
 3268 006a 70BD     		pop	{r4, r5, r6, pc}
 3269              	.LVL317:
 3270              	.L292:
3586:..\FreeRTOS\Source/tasks.c **** 		}
 3271              		.loc 1 3586 0
 3272 006c 0023     		movs	r3, #0
 3273 006e 2384     		strh	r3, [r4, #32]	@ movhi
 3274 0070 70BD     		pop	{r4, r5, r6, pc}
 3275              	.LVL318:
 3276              	.L296:
 3277 0072 00BF     		.align	2
 3278              	.L295:
 3279 0074 00000000 		.word	.LANCHOR0
 3280              		.cfi_endproc
 3281              	.LFE107:
 3282              		.size	vTaskGetInfo, .-vTaskGetInfo
 3283              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 3284              		.align	2
 3285              		.thumb
 3286              		.thumb_func
 3287              		.type	prvListTasksWithinSingleList, %function
 3288              	prvListTasksWithinSingleList:
 3289              	.LFB108:
3596:..\FreeRTOS\Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 3290              		.loc 1 3596 0
 3291              		.cfi_startproc
 3292              		@ args = 0, pretend = 0, frame = 0
 3293              		@ frame_needed = 0, uses_anonymous_args = 0
 3294              	.LVL319:
 3295 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3296              		.cfi_def_cfa_offset 32
 3297              		.cfi_offset 4, -32
 3298              		.cfi_offset 5, -28
 3299              		.cfi_offset 6, -24
 3300              		.cfi_offset 7, -20
 3301              		.cfi_offset 8, -16
 3302              		.cfi_offset 9, -12
 3303              		.cfi_offset 10, -8
 3304              		.cfi_offset 14, -4
 3305              	.LVL320:
3600:..\FreeRTOS\Source/tasks.c **** 		{
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 158


 3306              		.loc 1 3600 0
 3307 0004 0B68     		ldr	r3, [r1]
 3308 0006 2BB3     		cbz	r3, .L302
 3309              	.LVL321:
 3310              	.LBB55:
3602:..\FreeRTOS\Source/tasks.c **** 
 3311              		.loc 1 3602 0
 3312 0008 4B68     		ldr	r3, [r1, #4]
 3313 000a 5B68     		ldr	r3, [r3, #4]
 3314 000c 4B60     		str	r3, [r1, #4]
 3315 000e 01F10809 		add	r9, r1, #8
 3316 0012 4B45     		cmp	r3, r9
 3317 0014 01D1     		bne	.L299
3602:..\FreeRTOS\Source/tasks.c **** 
 3318              		.loc 1 3602 0 is_stmt 0 discriminator 1
 3319 0016 5B68     		ldr	r3, [r3, #4]
 3320 0018 4B60     		str	r3, [r1, #4]
 3321              	.L299:
 3322 001a 9046     		mov	r8, r2
 3323 001c 0D46     		mov	r5, r1
 3324 001e 0746     		mov	r7, r0
3602:..\FreeRTOS\Source/tasks.c **** 
 3325              		.loc 1 3602 0 discriminator 3
 3326 0020 4B68     		ldr	r3, [r1, #4]
 3327 0022 D3F80CA0 		ldr	r10, [r3, #12]
 3328              	.LVL322:
 3329              	.LBE55:
3598:..\FreeRTOS\Source/tasks.c **** 
 3330              		.loc 1 3598 0 is_stmt 1 discriminator 3
 3331 0026 0024     		movs	r4, #0
 3332              	.LVL323:
 3333              	.L301:
 3334              	.LBB56:
3610:..\FreeRTOS\Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 3335              		.loc 1 3610 0
 3336 0028 6B68     		ldr	r3, [r5, #4]
 3337 002a 5B68     		ldr	r3, [r3, #4]
 3338 002c 6B60     		str	r3, [r5, #4]
 3339 002e 9945     		cmp	r9, r3
 3340 0030 01D1     		bne	.L300
3610:..\FreeRTOS\Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 3341              		.loc 1 3610 0 is_stmt 0 discriminator 1
 3342 0032 5B68     		ldr	r3, [r3, #4]
 3343 0034 6B60     		str	r3, [r5, #4]
 3344              	.L300:
3610:..\FreeRTOS\Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 3345              		.loc 1 3610 0 discriminator 3
 3346 0036 6B68     		ldr	r3, [r5, #4]
 3347 0038 DE68     		ldr	r6, [r3, #12]
 3348              	.LVL324:
 3349              	.LBE56:
3611:..\FreeRTOS\Source/tasks.c **** 				uxTask++;
 3350              		.loc 1 3611 0 is_stmt 1 discriminator 3
 3351 003a 04EBC403 		add	r3, r4, r4, lsl #3
 3352 003e 9900     		lsls	r1, r3, #2
 3353 0040 4346     		mov	r3, r8
 3354 0042 0122     		movs	r2, #1
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 159


 3355 0044 3944     		add	r1, r1, r7
 3356 0046 3046     		mov	r0, r6
 3357 0048 FFF7FEFF 		bl	vTaskGetInfo
 3358              	.LVL325:
3612:..\FreeRTOS\Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 3359              		.loc 1 3612 0 discriminator 3
 3360 004c 0134     		adds	r4, r4, #1
 3361              	.LVL326:
3613:..\FreeRTOS\Source/tasks.c **** 		}
 3362              		.loc 1 3613 0 discriminator 3
 3363 004e B245     		cmp	r10, r6
 3364 0050 EAD1     		bne	.L301
 3365 0052 00E0     		b	.L298
 3366              	.LVL327:
 3367              	.L302:
3598:..\FreeRTOS\Source/tasks.c **** 
 3368              		.loc 1 3598 0
 3369 0054 0024     		movs	r4, #0
 3370              	.LVL328:
 3371              	.L298:
3621:..\FreeRTOS\Source/tasks.c **** 
 3372              		.loc 1 3621 0
 3373 0056 2046     		mov	r0, r4
 3374 0058 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 3375              		.cfi_endproc
 3376              	.LFE108:
 3377              		.size	prvListTasksWithinSingleList, .-prvListTasksWithinSingleList
 3378              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 3379              		.align	2
 3380              		.global	uxTaskGetSystemState
 3381              		.thumb
 3382              		.thumb_func
 3383              		.type	uxTaskGetSystemState, %function
 3384              	uxTaskGetSystemState:
 3385              	.LFB91:
2410:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 3386              		.loc 1 2410 0
 3387              		.cfi_startproc
 3388              		@ args = 0, pretend = 0, frame = 0
 3389              		@ frame_needed = 0, uses_anonymous_args = 0
 3390              	.LVL329:
 3391 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3392              		.cfi_def_cfa_offset 24
 3393              		.cfi_offset 3, -24
 3394              		.cfi_offset 4, -20
 3395              		.cfi_offset 5, -16
 3396              		.cfi_offset 6, -12
 3397              		.cfi_offset 7, -8
 3398              		.cfi_offset 14, -4
 3399 0002 0746     		mov	r7, r0
 3400 0004 0C46     		mov	r4, r1
 3401 0006 1646     		mov	r6, r2
 3402              	.LVL330:
2413:..\FreeRTOS\Source/tasks.c **** 		{
 3403              		.loc 1 2413 0
 3404 0008 FFF7FEFF 		bl	vTaskSuspendAll
 3405              	.LVL331:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 160


2416:..\FreeRTOS\Source/tasks.c **** 			{
 3406              		.loc 1 2416 0
 3407 000c 234B     		ldr	r3, .L309
 3408 000e D3F8D430 		ldr	r3, [r3, #212]
 3409 0012 A342     		cmp	r3, r4
 3410 0014 3DD8     		bhi	.L307
 3411 0016 0525     		movs	r5, #5
 3412 0018 0024     		movs	r4, #0
 3413              	.LVL332:
 3414              	.L306:
2422:..\FreeRTOS\Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 3415              		.loc 1 2422 0 discriminator 1
 3416 001a 013D     		subs	r5, r5, #1
 3417              	.LVL333:
2423:..\FreeRTOS\Source/tasks.c **** 
 3418              		.loc 1 2423 0 discriminator 1
 3419 001c 04EBC403 		add	r3, r4, r4, lsl #3
 3420 0020 9800     		lsls	r0, r3, #2
 3421 0022 05EB8502 		add	r2, r5, r5, lsl #2
 3422 0026 9300     		lsls	r3, r2, #2
 3423 0028 0122     		movs	r2, #1
 3424 002a 1D49     		ldr	r1, .L309+4
 3425 002c 1944     		add	r1, r1, r3
 3426 002e 3844     		add	r0, r0, r7
 3427 0030 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3428              	.LVL334:
 3429 0034 0444     		add	r4, r4, r0
 3430              	.LVL335:
2425:..\FreeRTOS\Source/tasks.c **** 
 3431              		.loc 1 2425 0 discriminator 1
 3432 0036 002D     		cmp	r5, #0
 3433 0038 EFD1     		bne	.L306
2429:..\FreeRTOS\Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 3434              		.loc 1 2429 0
 3435 003a 04EBC403 		add	r3, r4, r4, lsl #3
 3436 003e 9800     		lsls	r0, r3, #2
 3437 0040 164D     		ldr	r5, .L309
 3438              	.LVL336:
 3439 0042 A96A     		ldr	r1, [r5, #40]
 3440 0044 0222     		movs	r2, #2
 3441 0046 3844     		add	r0, r0, r7
 3442 0048 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3443              	.LVL337:
 3444 004c 0444     		add	r4, r4, r0
 3445              	.LVL338:
2430:..\FreeRTOS\Source/tasks.c **** 
 3446              		.loc 1 2430 0
 3447 004e 04EBC403 		add	r3, r4, r4, lsl #3
 3448 0052 9800     		lsls	r0, r3, #2
 3449 0054 D5F8D010 		ldr	r1, [r5, #208]
 3450 0058 0222     		movs	r2, #2
 3451 005a 3844     		add	r0, r0, r7
 3452 005c FFF7FEFF 		bl	prvListTasksWithinSingleList
 3453              	.LVL339:
 3454 0060 0444     		add	r4, r4, r0
 3455              	.LVL340:
2436:..\FreeRTOS\Source/tasks.c **** 				}
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 161


 3456              		.loc 1 2436 0
 3457 0062 04EBC403 		add	r3, r4, r4, lsl #3
 3458 0066 9800     		lsls	r0, r3, #2
 3459 0068 0422     		movs	r2, #4
 3460 006a 05F1BC01 		add	r1, r5, #188
 3461 006e 3844     		add	r0, r0, r7
 3462 0070 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3463              	.LVL341:
 3464 0074 0444     		add	r4, r4, r0
 3465              	.LVL342:
2444:..\FreeRTOS\Source/tasks.c **** 				}
 3466              		.loc 1 2444 0
 3467 0076 04EBC403 		add	r3, r4, r4, lsl #3
 3468 007a 9800     		lsls	r0, r3, #2
 3469 007c 0322     		movs	r2, #3
 3470 007e 2946     		mov	r1, r5
 3471 0080 3844     		add	r0, r0, r7
 3472 0082 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3473              	.LVL343:
 3474 0086 0444     		add	r4, r4, r0
 3475              	.LVL344:
2450:..\FreeRTOS\Source/tasks.c **** 					{
 3476              		.loc 1 2450 0
 3477 0088 26B1     		cbz	r6, .L305
2455:..\FreeRTOS\Source/tasks.c **** 						#endif
 3478              		.loc 1 2455 0
 3479 008a FFF7FEFF 		bl	StatisticsCounter_ReadCounter
 3480              	.LVL345:
 3481 008e 3060     		str	r0, [r6]
 3482 0090 00E0     		b	.L305
 3483              	.LVL346:
 3484              	.L307:
2411:..\FreeRTOS\Source/tasks.c **** 
 3485              		.loc 1 2411 0
 3486 0092 0024     		movs	r4, #0
 3487              	.LVL347:
 3488              	.L305:
2473:..\FreeRTOS\Source/tasks.c **** 
 3489              		.loc 1 2473 0
 3490 0094 FFF7FEFF 		bl	xTaskResumeAll
 3491              	.LVL348:
2476:..\FreeRTOS\Source/tasks.c **** 
 3492              		.loc 1 2476 0
 3493 0098 2046     		mov	r0, r4
 3494 009a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3495              	.LVL349:
 3496              	.L310:
 3497              		.align	2
 3498              	.L309:
 3499 009c 00000000 		.word	.LANCHOR0
 3500 00a0 30000000 		.word	.LANCHOR0+48
 3501              		.cfi_endproc
 3502              	.LFE91:
 3503              		.size	uxTaskGetSystemState, .-uxTaskGetSystemState
 3504              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 3505              		.align	2
 3506              		.global	uxTaskGetStackHighWaterMark
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 162


 3507              		.thumb
 3508              		.thumb_func
 3509              		.type	uxTaskGetStackHighWaterMark, %function
 3510              	uxTaskGetStackHighWaterMark:
 3511              	.LFB110:
3649:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
 3512              		.loc 1 3649 0
 3513              		.cfi_startproc
 3514              		@ args = 0, pretend = 0, frame = 0
 3515              		@ frame_needed = 0, uses_anonymous_args = 0
 3516              	.LVL350:
 3517 0000 08B5     		push	{r3, lr}
 3518              		.cfi_def_cfa_offset 8
 3519              		.cfi_offset 3, -8
 3520              		.cfi_offset 14, -4
3654:..\FreeRTOS\Source/tasks.c **** 
 3521              		.loc 1 3654 0
 3522 0002 0346     		mov	r3, r0
 3523 0004 10B9     		cbnz	r0, .L312
3654:..\FreeRTOS\Source/tasks.c **** 
 3524              		.loc 1 3654 0 is_stmt 0 discriminator 1
 3525 0006 034B     		ldr	r3, .L314
 3526 0008 D3F8D830 		ldr	r3, [r3, #216]
 3527              	.LVL351:
 3528              	.L312:
3666:..\FreeRTOS\Source/tasks.c **** 
 3529              		.loc 1 3666 0 is_stmt 1 discriminator 4
 3530 000c 186B     		ldr	r0, [r3, #48]
 3531 000e FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 3532              	.LVL352:
3669:..\FreeRTOS\Source/tasks.c **** 
 3533              		.loc 1 3669 0 discriminator 4
 3534 0012 08BD     		pop	{r3, pc}
 3535              	.L315:
 3536              		.align	2
 3537              	.L314:
 3538 0014 00000000 		.word	.LANCHOR0
 3539              		.cfi_endproc
 3540              	.LFE110:
 3541              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 3542              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3543              		.align	2
 3544              		.global	xTaskGetCurrentTaskHandle
 3545              		.thumb
 3546              		.thumb_func
 3547              		.type	xTaskGetCurrentTaskHandle, %function
 3548              	xTaskGetCurrentTaskHandle:
 3549              	.LFB113:
3757:..\FreeRTOS\Source/tasks.c **** 	TaskHandle_t xReturn;
 3550              		.loc 1 3757 0
 3551              		.cfi_startproc
 3552              		@ args = 0, pretend = 0, frame = 0
 3553              		@ frame_needed = 0, uses_anonymous_args = 0
 3554              		@ link register save eliminated.
3763:..\FreeRTOS\Source/tasks.c **** 
 3555              		.loc 1 3763 0
 3556 0000 014B     		ldr	r3, .L317
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 163


 3557 0002 D3F8D800 		ldr	r0, [r3, #216]
 3558              	.LVL353:
3766:..\FreeRTOS\Source/tasks.c **** 
 3559              		.loc 1 3766 0
 3560 0006 7047     		bx	lr
 3561              	.L318:
 3562              		.align	2
 3563              	.L317:
 3564 0008 00000000 		.word	.LANCHOR0
 3565              		.cfi_endproc
 3566              	.LFE113:
 3567              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 3568              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 3569              		.align	2
 3570              		.global	xTaskPriorityInherit
 3571              		.thumb
 3572              		.thumb_func
 3573              		.type	xTaskPriorityInherit, %function
 3574              	xTaskPriorityInherit:
 3575              	.LFB114:
3802:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 3576              		.loc 1 3802 0
 3577              		.cfi_startproc
 3578              		@ args = 0, pretend = 0, frame = 0
 3579              		@ frame_needed = 0, uses_anonymous_args = 0
 3580              	.LVL354:
3809:..\FreeRTOS\Source/tasks.c **** 		{
 3581              		.loc 1 3809 0
 3582 0000 0028     		cmp	r0, #0
 3583 0002 5CD0     		beq	.L326
3802:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 3584              		.loc 1 3802 0
 3585 0004 38B5     		push	{r3, r4, r5, lr}
 3586              		.cfi_def_cfa_offset 16
 3587              		.cfi_offset 3, -16
 3588              		.cfi_offset 4, -12
 3589              		.cfi_offset 5, -8
 3590              		.cfi_offset 14, -4
 3591 0006 0346     		mov	r3, r0
3814:..\FreeRTOS\Source/tasks.c **** 			{
 3592              		.loc 1 3814 0
 3593 0008 C26A     		ldr	r2, [r0, #44]
 3594 000a 2F49     		ldr	r1, .L330
 3595 000c D1F8D810 		ldr	r1, [r1, #216]
 3596 0010 C96A     		ldr	r1, [r1, #44]
 3597 0012 8A42     		cmp	r2, r1
 3598 0014 4AD2     		bcs	.L321
3819:..\FreeRTOS\Source/tasks.c **** 				{
 3599              		.loc 1 3819 0
 3600 0016 8169     		ldr	r1, [r0, #24]
 3601 0018 0029     		cmp	r1, #0
 3602 001a 06DB     		blt	.L322
3821:..\FreeRTOS\Source/tasks.c **** 				}
 3603              		.loc 1 3821 0
 3604 001c 2A49     		ldr	r1, .L330
 3605 001e D1F8D810 		ldr	r1, [r1, #216]
 3606 0022 C96A     		ldr	r1, [r1, #44]
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 164


 3607 0024 C1F10501 		rsb	r1, r1, #5
 3608 0028 8161     		str	r1, [r0, #24]
 3609              	.L322:
3830:..\FreeRTOS\Source/tasks.c **** 				{
 3610              		.loc 1 3830 0
 3611 002a 5869     		ldr	r0, [r3, #20]
 3612              	.LVL355:
 3613 002c 02EB8202 		add	r2, r2, r2, lsl #2
 3614 0030 9100     		lsls	r1, r2, #2
 3615 0032 264A     		ldr	r2, .L330+4
 3616 0034 1144     		add	r1, r1, r2
 3617 0036 8842     		cmp	r0, r1
 3618 0038 01D1     		bne	.L327
 3619 003a 0122     		movs	r2, #1
 3620 003c 00E0     		b	.L323
 3621              	.L327:
 3622 003e 0022     		movs	r2, #0
 3623              	.L323:
3830:..\FreeRTOS\Source/tasks.c **** 				{
 3624              		.loc 1 3830 0 is_stmt 0 discriminator 4
 3625 0040 6AB3     		cbz	r2, .L324
 3626 0042 1C46     		mov	r4, r3
3832:..\FreeRTOS\Source/tasks.c **** 					{
 3627              		.loc 1 3832 0 is_stmt 1
 3628 0044 1D1D     		adds	r5, r3, #4
 3629 0046 2846     		mov	r0, r5
 3630 0048 FFF7FEFF 		bl	uxListRemove
 3631              	.LVL356:
 3632 004c 80B9     		cbnz	r0, .L325
3834:..\FreeRTOS\Source/tasks.c **** 					}
 3633              		.loc 1 3834 0
 3634 004e E26A     		ldr	r2, [r4, #44]
 3635 0050 02EB8201 		add	r1, r2, r2, lsl #2
 3636 0054 8B00     		lsls	r3, r1, #2
 3637 0056 1C49     		ldr	r1, .L330
 3638 0058 0B44     		add	r3, r3, r1
 3639 005a 1B6B     		ldr	r3, [r3, #48]
 3640 005c 43B9     		cbnz	r3, .L325
3834:..\FreeRTOS\Source/tasks.c **** 					}
 3641              		.loc 1 3834 0 is_stmt 0 discriminator 1
 3642 005e 0123     		movs	r3, #1
 3643 0060 03FA02F2 		lsl	r2, r3, r2
 3644 0064 D1F8E430 		ldr	r3, [r1, #228]
 3645 0068 23EA0202 		bic	r2, r3, r2
 3646 006c C1F8E420 		str	r2, [r1, #228]
 3647              	.L325:
3842:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 3648              		.loc 1 3842 0 is_stmt 1
 3649 0070 1548     		ldr	r0, .L330
 3650 0072 D0F8D830 		ldr	r3, [r0, #216]
 3651 0076 DB6A     		ldr	r3, [r3, #44]
 3652 0078 E362     		str	r3, [r4, #44]
3843:..\FreeRTOS\Source/tasks.c **** 				}
 3653              		.loc 1 3843 0
 3654 007a 0124     		movs	r4, #1
 3655              	.LVL357:
 3656 007c 04FA03F1 		lsl	r1, r4, r3
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 165


 3657 0080 D0F8E420 		ldr	r2, [r0, #228]
 3658 0084 0A43     		orrs	r2, r2, r1
 3659 0086 C0F8E420 		str	r2, [r0, #228]
 3660 008a 3030     		adds	r0, r0, #48
 3661 008c 03EB8303 		add	r3, r3, r3, lsl #2
 3662 0090 9A00     		lsls	r2, r3, #2
 3663 0092 2946     		mov	r1, r5
 3664 0094 1044     		add	r0, r0, r2
 3665 0096 FFF7FEFF 		bl	vListInsertEnd
 3666              	.LVL358:
3854:..\FreeRTOS\Source/tasks.c **** 			}
 3667              		.loc 1 3854 0
 3668 009a 2046     		mov	r0, r4
 3669 009c 38BD     		pop	{r3, r4, r5, pc}
 3670              	.LVL359:
 3671              	.L324:
3848:..\FreeRTOS\Source/tasks.c **** 				}
 3672              		.loc 1 3848 0
 3673 009e 0A4A     		ldr	r2, .L330
 3674 00a0 D2F8D820 		ldr	r2, [r2, #216]
 3675 00a4 D26A     		ldr	r2, [r2, #44]
 3676 00a6 DA62     		str	r2, [r3, #44]
3854:..\FreeRTOS\Source/tasks.c **** 			}
 3677              		.loc 1 3854 0
 3678 00a8 0120     		movs	r0, #1
 3679 00aa 38BD     		pop	{r3, r4, r5, pc}
 3680              	.LVL360:
 3681              	.L321:
3858:..\FreeRTOS\Source/tasks.c **** 				{
 3682              		.loc 1 3858 0
 3683 00ac 826C     		ldr	r2, [r0, #72]
 3684 00ae 064B     		ldr	r3, .L330
 3685 00b0 D3F8D830 		ldr	r3, [r3, #216]
 3686 00b4 DB6A     		ldr	r3, [r3, #44]
 3687 00b6 9A42     		cmp	r2, r3
 3688 00b8 03D3     		bcc	.L328
3804:..\FreeRTOS\Source/tasks.c **** 
 3689              		.loc 1 3804 0
 3690 00ba 0020     		movs	r0, #0
 3691              	.LVL361:
 3692 00bc 38BD     		pop	{r3, r4, r5, pc}
 3693              	.LVL362:
 3694              	.L326:
 3695              		.cfi_def_cfa_offset 0
 3696              		.cfi_restore 3
 3697              		.cfi_restore 4
 3698              		.cfi_restore 5
 3699              		.cfi_restore 14
 3700 00be 0020     		movs	r0, #0
 3701              	.LVL363:
3881:..\FreeRTOS\Source/tasks.c **** 
 3702              		.loc 1 3881 0
 3703 00c0 7047     		bx	lr
 3704              	.LVL364:
 3705              	.L328:
 3706              		.cfi_def_cfa_offset 16
 3707              		.cfi_offset 3, -16
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 166


 3708              		.cfi_offset 4, -12
 3709              		.cfi_offset 5, -8
 3710              		.cfi_offset 14, -4
3867:..\FreeRTOS\Source/tasks.c **** 				}
 3711              		.loc 1 3867 0
 3712 00c2 0120     		movs	r0, #1
 3713              	.LVL365:
3881:..\FreeRTOS\Source/tasks.c **** 
 3714              		.loc 1 3881 0
 3715 00c4 38BD     		pop	{r3, r4, r5, pc}
 3716              	.L331:
 3717 00c6 00BF     		.align	2
 3718              	.L330:
 3719 00c8 00000000 		.word	.LANCHOR0
 3720 00cc 30000000 		.word	.LANCHOR0+48
 3721              		.cfi_endproc
 3722              	.LFE114:
 3723              		.size	xTaskPriorityInherit, .-xTaskPriorityInherit
 3724              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3725              		.align	2
 3726              		.global	xTaskPriorityDisinherit
 3727              		.thumb
 3728              		.thumb_func
 3729              		.type	xTaskPriorityDisinherit, %function
 3730              	xTaskPriorityDisinherit:
 3731              	.LFB115:
3889:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3732              		.loc 1 3889 0
 3733              		.cfi_startproc
 3734              		@ args = 0, pretend = 0, frame = 0
 3735              		@ frame_needed = 0, uses_anonymous_args = 0
 3736              	.LVL366:
3893:..\FreeRTOS\Source/tasks.c **** 		{
 3737              		.loc 1 3893 0
 3738 0000 0028     		cmp	r0, #0
 3739 0002 38D0     		beq	.L335
3889:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3740              		.loc 1 3889 0
 3741 0004 38B5     		push	{r3, r4, r5, lr}
 3742              		.cfi_def_cfa_offset 16
 3743              		.cfi_offset 3, -16
 3744              		.cfi_offset 4, -12
 3745              		.cfi_offset 5, -8
 3746              		.cfi_offset 14, -4
 3747 0006 0346     		mov	r3, r0
3901:..\FreeRTOS\Source/tasks.c **** 
 3748              		.loc 1 3901 0
 3749 0008 C26C     		ldr	r2, [r0, #76]
 3750 000a 013A     		subs	r2, r2, #1
 3751 000c C264     		str	r2, [r0, #76]
3905:..\FreeRTOS\Source/tasks.c **** 			{
 3752              		.loc 1 3905 0
 3753 000e C06A     		ldr	r0, [r0, #44]
 3754              	.LVL367:
 3755 0010 996C     		ldr	r1, [r3, #72]
 3756 0012 8842     		cmp	r0, r1
 3757 0014 31D0     		beq	.L336
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 167


3908:..\FreeRTOS\Source/tasks.c **** 				{
 3758              		.loc 1 3908 0
 3759 0016 92BB     		cbnz	r2, .L337
 3760 0018 1C46     		mov	r4, r3
3915:..\FreeRTOS\Source/tasks.c **** 					{
 3761              		.loc 1 3915 0
 3762 001a 1D1D     		adds	r5, r3, #4
 3763 001c 2846     		mov	r0, r5
 3764 001e FFF7FEFF 		bl	uxListRemove
 3765              	.LVL368:
 3766 0022 80B9     		cbnz	r0, .L334
3917:..\FreeRTOS\Source/tasks.c **** 					}
 3767              		.loc 1 3917 0
 3768 0024 E26A     		ldr	r2, [r4, #44]
 3769 0026 02EB8201 		add	r1, r2, r2, lsl #2
 3770 002a 8B00     		lsls	r3, r1, #2
 3771 002c 1549     		ldr	r1, .L339
 3772 002e 0B44     		add	r3, r3, r1
 3773 0030 1B6B     		ldr	r3, [r3, #48]
 3774 0032 43B9     		cbnz	r3, .L334
3917:..\FreeRTOS\Source/tasks.c **** 					}
 3775              		.loc 1 3917 0 is_stmt 0 discriminator 1
 3776 0034 0123     		movs	r3, #1
 3777 0036 03FA02F2 		lsl	r2, r3, r2
 3778 003a D1F8E430 		ldr	r3, [r1, #228]
 3779 003e 23EA0202 		bic	r2, r3, r2
 3780 0042 C1F8E420 		str	r2, [r1, #228]
 3781              	.L334:
3927:..\FreeRTOS\Source/tasks.c **** 
 3782              		.loc 1 3927 0 is_stmt 1
 3783 0046 A36C     		ldr	r3, [r4, #72]
 3784 0048 E362     		str	r3, [r4, #44]
3932:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3785              		.loc 1 3932 0
 3786 004a C3F10502 		rsb	r2, r3, #5
 3787 004e A261     		str	r2, [r4, #24]
3933:..\FreeRTOS\Source/tasks.c **** 
 3788              		.loc 1 3933 0
 3789 0050 0124     		movs	r4, #1
 3790              	.LVL369:
 3791 0052 04FA03F1 		lsl	r1, r4, r3
 3792 0056 0B48     		ldr	r0, .L339
 3793 0058 D0F8E420 		ldr	r2, [r0, #228]
 3794 005c 0A43     		orrs	r2, r2, r1
 3795 005e C0F8E420 		str	r2, [r0, #228]
 3796 0062 3030     		adds	r0, r0, #48
 3797 0064 03EB8303 		add	r3, r3, r3, lsl #2
 3798 0068 9A00     		lsls	r2, r3, #2
 3799 006a 2946     		mov	r1, r5
 3800 006c 1044     		add	r0, r0, r2
 3801 006e FFF7FEFF 		bl	vListInsertEnd
 3802              	.LVL370:
3943:..\FreeRTOS\Source/tasks.c **** 				}
 3803              		.loc 1 3943 0
 3804 0072 2046     		mov	r0, r4
 3805 0074 38BD     		pop	{r3, r4, r5, pc}
 3806              	.LVL371:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 168


 3807              	.L335:
 3808              		.cfi_def_cfa_offset 0
 3809              		.cfi_restore 3
 3810              		.cfi_restore 4
 3811              		.cfi_restore 5
 3812              		.cfi_restore 14
3891:..\FreeRTOS\Source/tasks.c **** 
 3813              		.loc 1 3891 0
 3814 0076 0020     		movs	r0, #0
 3815              	.LVL372:
3961:..\FreeRTOS\Source/tasks.c **** 
 3816              		.loc 1 3961 0
 3817 0078 7047     		bx	lr
 3818              	.LVL373:
 3819              	.L336:
 3820              		.cfi_def_cfa_offset 16
 3821              		.cfi_offset 3, -16
 3822              		.cfi_offset 4, -12
 3823              		.cfi_offset 5, -8
 3824              		.cfi_offset 14, -4
3891:..\FreeRTOS\Source/tasks.c **** 
 3825              		.loc 1 3891 0
 3826 007a 0020     		movs	r0, #0
 3827 007c 38BD     		pop	{r3, r4, r5, pc}
 3828              	.LVL374:
 3829              	.L337:
 3830 007e 0020     		movs	r0, #0
 3831              	.LVL375:
3961:..\FreeRTOS\Source/tasks.c **** 
 3832              		.loc 1 3961 0
 3833 0080 38BD     		pop	{r3, r4, r5, pc}
 3834              	.LVL376:
 3835              	.L340:
 3836 0082 00BF     		.align	2
 3837              	.L339:
 3838 0084 00000000 		.word	.LANCHOR0
 3839              		.cfi_endproc
 3840              	.LFE115:
 3841              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
 3842              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 3843              		.align	2
 3844              		.global	vTaskPriorityDisinheritAfterTimeout
 3845              		.thumb
 3846              		.thumb_func
 3847              		.type	vTaskPriorityDisinheritAfterTimeout, %function
 3848              	vTaskPriorityDisinheritAfterTimeout:
 3849              	.LFB116:
3969:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3850              		.loc 1 3969 0
 3851              		.cfi_startproc
 3852              		@ args = 0, pretend = 0, frame = 0
 3853              		@ frame_needed = 0, uses_anonymous_args = 0
 3854              	.LVL377:
3974:..\FreeRTOS\Source/tasks.c **** 		{
 3855              		.loc 1 3974 0
 3856 0000 0028     		cmp	r0, #0
 3857 0002 48D0     		beq	.L349
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 169


3969:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3858              		.loc 1 3969 0
 3859 0004 38B5     		push	{r3, r4, r5, lr}
 3860              		.cfi_def_cfa_offset 16
 3861              		.cfi_offset 3, -16
 3862              		.cfi_offset 4, -12
 3863              		.cfi_offset 5, -8
 3864              		.cfi_offset 14, -4
 3865 0006 0346     		mov	r3, r0
3984:..\FreeRTOS\Source/tasks.c **** 			{
 3866              		.loc 1 3984 0
 3867 0008 826C     		ldr	r2, [r0, #72]
 3868 000a 8A42     		cmp	r2, r1
 3869 000c 00D2     		bcs	.L343
3986:..\FreeRTOS\Source/tasks.c **** 			}
 3870              		.loc 1 3986 0
 3871 000e 0A46     		mov	r2, r1
 3872              	.L343:
 3873              	.LVL378:
3994:..\FreeRTOS\Source/tasks.c **** 			{
 3874              		.loc 1 3994 0
 3875 0010 D96A     		ldr	r1, [r3, #44]
 3876              	.LVL379:
 3877 0012 8A42     		cmp	r2, r1
 3878 0014 3ED0     		beq	.L341
4000:..\FreeRTOS\Source/tasks.c **** 				{
 3879              		.loc 1 4000 0
 3880 0016 D86C     		ldr	r0, [r3, #76]
 3881              	.LVL380:
 3882 0018 0128     		cmp	r0, #1
 3883 001a 3BD1     		bne	.L341
 3884              	.LVL381:
4012:..\FreeRTOS\Source/tasks.c **** 
 3885              		.loc 1 4012 0
 3886 001c DA62     		str	r2, [r3, #44]
4016:..\FreeRTOS\Source/tasks.c **** 					{
 3887              		.loc 1 4016 0
 3888 001e 9869     		ldr	r0, [r3, #24]
 3889 0020 0028     		cmp	r0, #0
 3890 0022 02DB     		blt	.L344
4018:..\FreeRTOS\Source/tasks.c **** 					}
 3891              		.loc 1 4018 0
 3892 0024 C2F10502 		rsb	r2, r2, #5
 3893              	.LVL382:
 3894 0028 9A61     		str	r2, [r3, #24]
 3895              	.L344:
4031:..\FreeRTOS\Source/tasks.c **** 					{
 3896              		.loc 1 4031 0
 3897 002a 5869     		ldr	r0, [r3, #20]
 3898 002c 01EB8101 		add	r1, r1, r1, lsl #2
 3899              	.LVL383:
 3900 0030 8A00     		lsls	r2, r1, #2
 3901 0032 1949     		ldr	r1, .L350
 3902 0034 0A44     		add	r2, r2, r1
 3903 0036 9042     		cmp	r0, r2
 3904 0038 01D1     		bne	.L347
 3905 003a 0122     		movs	r2, #1
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 170


 3906 003c 00E0     		b	.L345
 3907              	.L347:
 3908 003e 0022     		movs	r2, #0
 3909              	.L345:
4031:..\FreeRTOS\Source/tasks.c **** 					{
 3910              		.loc 1 4031 0 is_stmt 0 discriminator 4
 3911 0040 42B3     		cbz	r2, .L341
 3912 0042 1C46     		mov	r4, r3
4033:..\FreeRTOS\Source/tasks.c **** 						{
 3913              		.loc 1 4033 0 is_stmt 1
 3914 0044 1D1D     		adds	r5, r3, #4
 3915 0046 2846     		mov	r0, r5
 3916 0048 FFF7FEFF 		bl	uxListRemove
 3917              	.LVL384:
 3918 004c 80B9     		cbnz	r0, .L346
4035:..\FreeRTOS\Source/tasks.c **** 						}
 3919              		.loc 1 4035 0
 3920 004e E26A     		ldr	r2, [r4, #44]
 3921 0050 02EB8201 		add	r1, r2, r2, lsl #2
 3922 0054 8B00     		lsls	r3, r1, #2
 3923 0056 1149     		ldr	r1, .L350+4
 3924 0058 0B44     		add	r3, r3, r1
 3925 005a 1B6B     		ldr	r3, [r3, #48]
 3926 005c 43B9     		cbnz	r3, .L346
4035:..\FreeRTOS\Source/tasks.c **** 						}
 3927              		.loc 1 4035 0 is_stmt 0 discriminator 1
 3928 005e 0123     		movs	r3, #1
 3929 0060 03FA02F2 		lsl	r2, r3, r2
 3930 0064 D1F8E430 		ldr	r3, [r1, #228]
 3931 0068 23EA0202 		bic	r2, r3, r2
 3932 006c C1F8E420 		str	r2, [r1, #228]
 3933              	.L346:
4042:..\FreeRTOS\Source/tasks.c **** 					}
 3934              		.loc 1 4042 0 is_stmt 1
 3935 0070 E36A     		ldr	r3, [r4, #44]
 3936 0072 0122     		movs	r2, #1
 3937 0074 02FA03F1 		lsl	r1, r2, r3
 3938 0078 0848     		ldr	r0, .L350+4
 3939 007a D0F8E420 		ldr	r2, [r0, #228]
 3940 007e 0A43     		orrs	r2, r2, r1
 3941 0080 C0F8E420 		str	r2, [r0, #228]
 3942 0084 3030     		adds	r0, r0, #48
 3943 0086 03EB8303 		add	r3, r3, r3, lsl #2
 3944 008a 9A00     		lsls	r2, r3, #2
 3945 008c 2946     		mov	r1, r5
 3946 008e 1044     		add	r0, r0, r2
 3947 0090 FFF7FEFF 		bl	vListInsertEnd
 3948              	.LVL385:
 3949              	.L341:
 3950 0094 38BD     		pop	{r3, r4, r5, pc}
 3951              	.LVL386:
 3952              	.L349:
 3953              		.cfi_def_cfa_offset 0
 3954              		.cfi_restore 3
 3955              		.cfi_restore 4
 3956              		.cfi_restore 5
 3957              		.cfi_restore 14
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 171


 3958 0096 7047     		bx	lr
 3959              	.L351:
 3960              		.align	2
 3961              	.L350:
 3962 0098 30000000 		.word	.LANCHOR0+48
 3963 009c 00000000 		.word	.LANCHOR0
 3964              		.cfi_endproc
 3965              	.LFE116:
 3966              		.size	vTaskPriorityDisinheritAfterTimeout, .-vTaskPriorityDisinheritAfterTimeout
 3967              		.section	.text.vTaskList,"ax",%progbits
 3968              		.align	2
 3969              		.global	vTaskList
 3970              		.thumb
 3971              		.thumb_func
 3972              		.type	vTaskList, %function
 3973              	vTaskList:
 3974              	.LFB118:
4160:..\FreeRTOS\Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 3975              		.loc 1 4160 0
 3976              		.cfi_startproc
 3977              		@ args = 0, pretend = 0, frame = 8
 3978              		@ frame_needed = 0, uses_anonymous_args = 0
 3979              	.LVL387:
 3980 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3981              		.cfi_def_cfa_offset 20
 3982              		.cfi_offset 4, -20
 3983              		.cfi_offset 5, -16
 3984              		.cfi_offset 6, -12
 3985              		.cfi_offset 7, -8
 3986              		.cfi_offset 14, -4
 3987 0002 85B0     		sub	sp, sp, #20
 3988              		.cfi_def_cfa_offset 40
 3989 0004 0546     		mov	r5, r0
4191:..\FreeRTOS\Source/tasks.c **** 
 3990              		.loc 1 4191 0
 3991 0006 0023     		movs	r3, #0
 3992 0008 0370     		strb	r3, [r0]
4195:..\FreeRTOS\Source/tasks.c **** 
 3993              		.loc 1 4195 0
 3994 000a 304B     		ldr	r3, .L365
 3995 000c D3F8D420 		ldr	r2, [r3, #212]
 3996 0010 0392     		str	r2, [sp, #12]
4200:..\FreeRTOS\Source/tasks.c **** 
 3997              		.loc 1 4200 0
 3998 0012 D3F8D430 		ldr	r3, [r3, #212]
 3999 0016 03EBC303 		add	r3, r3, r3, lsl #3
 4000 001a 9800     		lsls	r0, r3, #2
 4001              	.LVL388:
 4002 001c FFF7FEFF 		bl	pvPortMalloc
 4003              	.LVL389:
4202:..\FreeRTOS\Source/tasks.c **** 		{
 4004              		.loc 1 4202 0
 4005 0020 0028     		cmp	r0, #0
 4006 0022 50D0     		beq	.L352
 4007 0024 0446     		mov	r4, r0
4205:..\FreeRTOS\Source/tasks.c **** 
 4008              		.loc 1 4205 0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 172


 4009 0026 0399     		ldr	r1, [sp, #12]
 4010 0028 0022     		movs	r2, #0
 4011 002a FFF7FEFF 		bl	uxTaskGetSystemState
 4012              	.LVL390:
 4013 002e 0390     		str	r0, [sp, #12]
4208:..\FreeRTOS\Source/tasks.c **** 			{
 4014              		.loc 1 4208 0
 4015 0030 0023     		movs	r3, #0
 4016 0032 0293     		str	r3, [sp, #8]
 4017 0034 40E0     		b	.L354
 4018              	.L362:
4210:..\FreeRTOS\Source/tasks.c **** 				{
 4019              		.loc 1 4210 0
 4020 0036 029B     		ldr	r3, [sp, #8]
 4021 0038 03EBC303 		add	r3, r3, r3, lsl #3
 4022 003c 9A00     		lsls	r2, r3, #2
 4023 003e 2244     		add	r2, r2, r4
 4024 0040 137B     		ldrb	r3, [r2, #12]	@ zero_extendqisi2
 4025 0042 042B     		cmp	r3, #4
 4026 0044 0CD8     		bhi	.L355
 4027 0046 DFE803F0 		tbb	[pc, r3]
 4028              	.L357:
 4029 004a 03       		.byte	(.L356-.L357)/2
 4030 004b 0D       		.byte	(.L363-.L357)/2
 4031 004c 05       		.byte	(.L359-.L357)/2
 4032 004d 07       		.byte	(.L360-.L357)/2
 4033 004e 09       		.byte	(.L361-.L357)/2
 4034 004f 00       		.p2align 1
 4035              	.L356:
4212:..\FreeRTOS\Source/tasks.c **** 										break;
 4036              		.loc 1 4212 0
 4037 0050 5826     		movs	r6, #88
 4038 0052 08E0     		b	.L358
 4039              	.L359:
 4040              	.LVL391:
4218:..\FreeRTOS\Source/tasks.c **** 										break;
 4041              		.loc 1 4218 0
 4042 0054 4226     		movs	r6, #66
4219:..\FreeRTOS\Source/tasks.c **** 
 4043              		.loc 1 4219 0
 4044 0056 06E0     		b	.L358
 4045              	.LVL392:
 4046              	.L360:
4221:..\FreeRTOS\Source/tasks.c **** 										break;
 4047              		.loc 1 4221 0
 4048 0058 5326     		movs	r6, #83
4222:..\FreeRTOS\Source/tasks.c **** 
 4049              		.loc 1 4222 0
 4050 005a 04E0     		b	.L358
 4051              	.LVL393:
 4052              	.L361:
4224:..\FreeRTOS\Source/tasks.c **** 										break;
 4053              		.loc 1 4224 0
 4054 005c 4426     		movs	r6, #68
4225:..\FreeRTOS\Source/tasks.c **** 
 4055              		.loc 1 4225 0
 4056 005e 02E0     		b	.L358
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 173


 4057              	.LVL394:
 4058              	.L355:
4229:..\FreeRTOS\Source/tasks.c **** 										break;
 4059              		.loc 1 4229 0
 4060 0060 0026     		movs	r6, #0
4230:..\FreeRTOS\Source/tasks.c **** 				}
 4061              		.loc 1 4230 0
 4062 0062 00E0     		b	.L358
 4063              	.LVL395:
 4064              	.L363:
4215:..\FreeRTOS\Source/tasks.c **** 										break;
 4065              		.loc 1 4215 0
 4066 0064 5226     		movs	r6, #82
 4067              	.L358:
 4068              	.LVL396:
4235:..\FreeRTOS\Source/tasks.c **** 
 4069              		.loc 1 4235 0 discriminator 2
 4070 0066 029B     		ldr	r3, [sp, #8]
 4071 0068 03EBC303 		add	r3, r3, r3, lsl #3
 4072 006c 9A00     		lsls	r2, r3, #2
 4073 006e 2244     		add	r2, r2, r4
 4074 0070 5168     		ldr	r1, [r2, #4]
 4075 0072 2846     		mov	r0, r5
 4076 0074 FFF7FEFF 		bl	prvWriteNameToBuffer
 4077              	.LVL397:
 4078 0078 0546     		mov	r5, r0
 4079              	.LVL398:
4238:..\FreeRTOS\Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
 4080              		.loc 1 4238 0 discriminator 2
 4081 007a 029B     		ldr	r3, [sp, #8]
 4082 007c 03EBC303 		add	r3, r3, r3, lsl #3
 4083 0080 9A00     		lsls	r2, r3, #2
 4084 0082 2244     		add	r2, r2, r4
 4085 0084 1369     		ldr	r3, [r2, #16]
 4086 0086 029A     		ldr	r2, [sp, #8]
 4087 0088 02EBC202 		add	r2, r2, r2, lsl #3
 4088 008c 9100     		lsls	r1, r2, #2
 4089 008e 2144     		add	r1, r1, r4
 4090 0090 0F8C     		ldrh	r7, [r1, #32]
 4091 0092 029A     		ldr	r2, [sp, #8]
 4092 0094 02EBC202 		add	r2, r2, r2, lsl #3
 4093 0098 9100     		lsls	r1, r2, #2
 4094 009a 2144     		add	r1, r1, r4
 4095 009c 8A68     		ldr	r2, [r1, #8]
 4096 009e 0192     		str	r2, [sp, #4]
 4097 00a0 0097     		str	r7, [sp]
 4098 00a2 3246     		mov	r2, r6
 4099 00a4 0A49     		ldr	r1, .L365+4
 4100 00a6 FFF7FEFF 		bl	sprintf
 4101              	.LVL399:
4239:..\FreeRTOS\Source/tasks.c **** 			}
 4102              		.loc 1 4239 0 discriminator 2
 4103 00aa 2846     		mov	r0, r5
 4104 00ac FFF7FEFF 		bl	strlen
 4105              	.LVL400:
 4106 00b0 0544     		add	r5, r5, r0
 4107              	.LVL401:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 174


4208:..\FreeRTOS\Source/tasks.c **** 			{
 4108              		.loc 1 4208 0 discriminator 2
 4109 00b2 029B     		ldr	r3, [sp, #8]
 4110 00b4 0133     		adds	r3, r3, #1
 4111 00b6 0293     		str	r3, [sp, #8]
 4112              	.LVL402:
 4113              	.L354:
4208:..\FreeRTOS\Source/tasks.c **** 			{
 4114              		.loc 1 4208 0 is_stmt 0 discriminator 1
 4115 00b8 029A     		ldr	r2, [sp, #8]
 4116 00ba 039B     		ldr	r3, [sp, #12]
 4117 00bc 9A42     		cmp	r2, r3
 4118 00be BAD3     		bcc	.L362
4244:..\FreeRTOS\Source/tasks.c **** 		}
 4119              		.loc 1 4244 0 is_stmt 1
 4120 00c0 2046     		mov	r0, r4
 4121 00c2 FFF7FEFF 		bl	vPortFree
 4122              	.LVL403:
 4123              	.L352:
4250:..\FreeRTOS\Source/tasks.c **** 
 4124              		.loc 1 4250 0
 4125 00c6 05B0     		add	sp, sp, #20
 4126              		.cfi_def_cfa_offset 20
 4127              		@ sp needed
 4128 00c8 F0BD     		pop	{r4, r5, r6, r7, pc}
 4129              	.LVL404:
 4130              	.L366:
 4131 00ca 00BF     		.align	2
 4132              	.L365:
 4133 00cc 00000000 		.word	.LANCHOR0
 4134 00d0 08000000 		.word	.LC1
 4135              		.cfi_endproc
 4136              	.LFE118:
 4137              		.size	vTaskList, .-vTaskList
 4138              		.section	.text.vTaskGetRunTimeStats,"ax",%progbits
 4139              		.align	2
 4140              		.global	vTaskGetRunTimeStats
 4141              		.thumb
 4142              		.thumb_func
 4143              		.type	vTaskGetRunTimeStats, %function
 4144              	vTaskGetRunTimeStats:
 4145              	.LFB119:
4258:..\FreeRTOS\Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 4146              		.loc 1 4258 0
 4147              		.cfi_startproc
 4148              		@ args = 0, pretend = 0, frame = 16
 4149              		@ frame_needed = 0, uses_anonymous_args = 0
 4150              	.LVL405:
 4151 0000 70B5     		push	{r4, r5, r6, lr}
 4152              		.cfi_def_cfa_offset 16
 4153              		.cfi_offset 4, -16
 4154              		.cfi_offset 5, -12
 4155              		.cfi_offset 6, -8
 4156              		.cfi_offset 14, -4
 4157 0002 84B0     		sub	sp, sp, #16
 4158              		.cfi_def_cfa_offset 32
 4159 0004 0446     		mov	r4, r0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 175


4295:..\FreeRTOS\Source/tasks.c **** 
 4160              		.loc 1 4295 0
 4161 0006 0023     		movs	r3, #0
 4162 0008 0370     		strb	r3, [r0]
4299:..\FreeRTOS\Source/tasks.c **** 
 4163              		.loc 1 4299 0
 4164 000a 2B4B     		ldr	r3, .L375
 4165 000c D3F8D420 		ldr	r2, [r3, #212]
 4166 0010 0392     		str	r2, [sp, #12]
4304:..\FreeRTOS\Source/tasks.c **** 
 4167              		.loc 1 4304 0
 4168 0012 D3F8D430 		ldr	r3, [r3, #212]
 4169 0016 03EBC303 		add	r3, r3, r3, lsl #3
 4170 001a 9800     		lsls	r0, r3, #2
 4171              	.LVL406:
 4172 001c FFF7FEFF 		bl	pvPortMalloc
 4173              	.LVL407:
4306:..\FreeRTOS\Source/tasks.c **** 		{
 4174              		.loc 1 4306 0
 4175 0020 0028     		cmp	r0, #0
 4176 0022 46D0     		beq	.L367
 4177 0024 0546     		mov	r5, r0
4309:..\FreeRTOS\Source/tasks.c **** 
 4178              		.loc 1 4309 0
 4179 0026 0399     		ldr	r1, [sp, #12]
 4180 0028 01AA     		add	r2, sp, #4
 4181 002a FFF7FEFF 		bl	uxTaskGetSystemState
 4182              	.LVL408:
 4183 002e 0390     		str	r0, [sp, #12]
4312:..\FreeRTOS\Source/tasks.c **** 
 4184              		.loc 1 4312 0
 4185 0030 224A     		ldr	r2, .L375+4
 4186 0032 019B     		ldr	r3, [sp, #4]
 4187 0034 A2FB0323 		umull	r2, r3, r2, r3
 4188 0038 5B09     		lsrs	r3, r3, #5
 4189 003a 0193     		str	r3, [sp, #4]
4315:..\FreeRTOS\Source/tasks.c **** 			{
 4190              		.loc 1 4315 0
 4191 003c 002B     		cmp	r3, #0
 4192 003e 35D0     		beq	.L369
4318:..\FreeRTOS\Source/tasks.c **** 				{
 4193              		.loc 1 4318 0
 4194 0040 0023     		movs	r3, #0
 4195 0042 0293     		str	r3, [sp, #8]
 4196 0044 2EE0     		b	.L370
 4197              	.L373:
4323:..\FreeRTOS\Source/tasks.c **** 
 4198              		.loc 1 4323 0
 4199 0046 029B     		ldr	r3, [sp, #8]
 4200 0048 03EBC303 		add	r3, r3, r3, lsl #3
 4201 004c 9A00     		lsls	r2, r3, #2
 4202 004e 2A44     		add	r2, r2, r5
 4203 0050 9669     		ldr	r6, [r2, #24]
 4204 0052 019B     		ldr	r3, [sp, #4]
 4205 0054 B6FBF3F6 		udiv	r6, r6, r3
 4206              	.LVL409:
4328:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 176


 4207              		.loc 1 4328 0
 4208 0058 029B     		ldr	r3, [sp, #8]
 4209 005a 03EBC303 		add	r3, r3, r3, lsl #3
 4210 005e 9A00     		lsls	r2, r3, #2
 4211 0060 2A44     		add	r2, r2, r5
 4212 0062 5168     		ldr	r1, [r2, #4]
 4213 0064 2046     		mov	r0, r4
 4214 0066 FFF7FEFF 		bl	prvWriteNameToBuffer
 4215              	.LVL410:
 4216 006a 0446     		mov	r4, r0
 4217              	.LVL411:
4330:..\FreeRTOS\Source/tasks.c **** 					{
 4218              		.loc 1 4330 0
 4219 006c 56B1     		cbz	r6, .L371
4340:..\FreeRTOS\Source/tasks.c **** 						}
 4220              		.loc 1 4340 0
 4221 006e 029B     		ldr	r3, [sp, #8]
 4222 0070 03EBC303 		add	r3, r3, r3, lsl #3
 4223 0074 9A00     		lsls	r2, r3, #2
 4224 0076 2A44     		add	r2, r2, r5
 4225 0078 3346     		mov	r3, r6
 4226 007a 9269     		ldr	r2, [r2, #24]
 4227 007c 1049     		ldr	r1, .L375+8
 4228 007e FFF7FEFF 		bl	sprintf
 4229              	.LVL412:
 4230 0082 08E0     		b	.L372
 4231              	.LVL413:
 4232              	.L371:
4356:..\FreeRTOS\Source/tasks.c **** 						}
 4233              		.loc 1 4356 0
 4234 0084 029B     		ldr	r3, [sp, #8]
 4235 0086 03EBC303 		add	r3, r3, r3, lsl #3
 4236 008a 9A00     		lsls	r2, r3, #2
 4237 008c 2A44     		add	r2, r2, r5
 4238 008e 9269     		ldr	r2, [r2, #24]
 4239 0090 0C49     		ldr	r1, .L375+12
 4240 0092 FFF7FEFF 		bl	sprintf
 4241              	.LVL414:
 4242              	.L372:
4361:..\FreeRTOS\Source/tasks.c **** 				}
 4243              		.loc 1 4361 0 discriminator 2
 4244 0096 2046     		mov	r0, r4
 4245 0098 FFF7FEFF 		bl	strlen
 4246              	.LVL415:
 4247 009c 0444     		add	r4, r4, r0
 4248              	.LVL416:
4318:..\FreeRTOS\Source/tasks.c **** 				{
 4249              		.loc 1 4318 0 discriminator 2
 4250 009e 029B     		ldr	r3, [sp, #8]
 4251 00a0 0133     		adds	r3, r3, #1
 4252 00a2 0293     		str	r3, [sp, #8]
 4253              	.LVL417:
 4254              	.L370:
4318:..\FreeRTOS\Source/tasks.c **** 				{
 4255              		.loc 1 4318 0 is_stmt 0 discriminator 1
 4256 00a4 029A     		ldr	r2, [sp, #8]
 4257 00a6 039B     		ldr	r3, [sp, #12]
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 177


 4258 00a8 9A42     		cmp	r2, r3
 4259 00aa CCD3     		bcc	.L373
 4260              	.L369:
4371:..\FreeRTOS\Source/tasks.c **** 		}
 4261              		.loc 1 4371 0 is_stmt 1
 4262 00ac 2846     		mov	r0, r5
 4263 00ae FFF7FEFF 		bl	vPortFree
 4264              	.LVL418:
 4265              	.L367:
4377:..\FreeRTOS\Source/tasks.c **** 
 4266              		.loc 1 4377 0
 4267 00b2 04B0     		add	sp, sp, #16
 4268              		.cfi_def_cfa_offset 16
 4269              		@ sp needed
 4270 00b4 70BD     		pop	{r4, r5, r6, pc}
 4271              	.LVL419:
 4272              	.L376:
 4273 00b6 00BF     		.align	2
 4274              	.L375:
 4275 00b8 00000000 		.word	.LANCHOR0
 4276 00bc 1F85EB51 		.word	1374389535
 4277 00c0 18000000 		.word	.LC2
 4278 00c4 24000000 		.word	.LC3
 4279              		.cfi_endproc
 4280              	.LFE119:
 4281              		.size	vTaskGetRunTimeStats, .-vTaskGetRunTimeStats
 4282              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4283              		.align	2
 4284              		.global	uxTaskResetEventItemValue
 4285              		.thumb
 4286              		.thumb_func
 4287              		.type	uxTaskResetEventItemValue, %function
 4288              	uxTaskResetEventItemValue:
 4289              	.LFB120:
4383:..\FreeRTOS\Source/tasks.c **** TickType_t uxReturn;
 4290              		.loc 1 4383 0
 4291              		.cfi_startproc
 4292              		@ args = 0, pretend = 0, frame = 0
 4293              		@ frame_needed = 0, uses_anonymous_args = 0
 4294              		@ link register save eliminated.
4386:..\FreeRTOS\Source/tasks.c **** 
 4295              		.loc 1 4386 0
 4296 0000 064B     		ldr	r3, .L378
 4297 0002 D3F8D820 		ldr	r2, [r3, #216]
 4298 0006 9069     		ldr	r0, [r2, #24]
 4299              	.LVL420:
4390:..\FreeRTOS\Source/tasks.c **** 
 4300              		.loc 1 4390 0
 4301 0008 D3F8D820 		ldr	r2, [r3, #216]
 4302 000c D3F8D830 		ldr	r3, [r3, #216]
 4303 0010 DB6A     		ldr	r3, [r3, #44]
 4304 0012 C3F10503 		rsb	r3, r3, #5
 4305 0016 9361     		str	r3, [r2, #24]
4393:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 4306              		.loc 1 4393 0
 4307 0018 7047     		bx	lr
 4308              	.L379:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 178


 4309 001a 00BF     		.align	2
 4310              	.L378:
 4311 001c 00000000 		.word	.LANCHOR0
 4312              		.cfi_endproc
 4313              	.LFE120:
 4314              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 4315              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4316              		.align	2
 4317              		.global	pvTaskIncrementMutexHeldCount
 4318              		.thumb
 4319              		.thumb_func
 4320              		.type	pvTaskIncrementMutexHeldCount, %function
 4321              	pvTaskIncrementMutexHeldCount:
 4322              	.LFB121:
4399:..\FreeRTOS\Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 4323              		.loc 1 4399 0
 4324              		.cfi_startproc
 4325              		@ args = 0, pretend = 0, frame = 0
 4326              		@ frame_needed = 0, uses_anonymous_args = 0
 4327              		@ link register save eliminated.
4402:..\FreeRTOS\Source/tasks.c **** 		{
 4328              		.loc 1 4402 0
 4329 0000 064B     		ldr	r3, .L382
 4330 0002 D3F8D830 		ldr	r3, [r3, #216]
 4331 0006 2BB1     		cbz	r3, .L381
4404:..\FreeRTOS\Source/tasks.c **** 		}
 4332              		.loc 1 4404 0
 4333 0008 044B     		ldr	r3, .L382
 4334 000a D3F8D820 		ldr	r2, [r3, #216]
 4335 000e D36C     		ldr	r3, [r2, #76]
 4336 0010 0133     		adds	r3, r3, #1
 4337 0012 D364     		str	r3, [r2, #76]
 4338              	.L381:
4407:..\FreeRTOS\Source/tasks.c **** 	}
 4339              		.loc 1 4407 0
 4340 0014 014B     		ldr	r3, .L382
 4341 0016 D3F8D800 		ldr	r0, [r3, #216]
4408:..\FreeRTOS\Source/tasks.c **** 
 4342              		.loc 1 4408 0
 4343 001a 7047     		bx	lr
 4344              	.L383:
 4345              		.align	2
 4346              	.L382:
 4347 001c 00000000 		.word	.LANCHOR0
 4348              		.cfi_endproc
 4349              	.LFE121:
 4350              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 4351              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4352              		.align	2
 4353              		.global	ulTaskNotifyTake
 4354              		.thumb
 4355              		.thumb_func
 4356              		.type	ulTaskNotifyTake, %function
 4357              	ulTaskNotifyTake:
 4358              	.LFB122:
4416:..\FreeRTOS\Source/tasks.c **** 	uint32_t ulReturn;
 4359              		.loc 1 4416 0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 179


 4360              		.cfi_startproc
 4361              		@ args = 0, pretend = 0, frame = 0
 4362              		@ frame_needed = 0, uses_anonymous_args = 0
 4363              	.LVL421:
 4364 0000 38B5     		push	{r3, r4, r5, lr}
 4365              		.cfi_def_cfa_offset 16
 4366              		.cfi_offset 3, -16
 4367              		.cfi_offset 4, -12
 4368              		.cfi_offset 5, -8
 4369              		.cfi_offset 14, -4
 4370 0002 0546     		mov	r5, r0
 4371 0004 0C46     		mov	r4, r1
4419:..\FreeRTOS\Source/tasks.c **** 		{
 4372              		.loc 1 4419 0
 4373 0006 FFF7FEFF 		bl	vPortEnterCritical
 4374              	.LVL422:
4422:..\FreeRTOS\Source/tasks.c **** 			{
 4375              		.loc 1 4422 0
 4376 000a 1B4B     		ldr	r3, .L389
 4377 000c D3F8D830 		ldr	r3, [r3, #216]
 4378 0010 5B6D     		ldr	r3, [r3, #84]
 4379 0012 93B9     		cbnz	r3, .L385
4425:..\FreeRTOS\Source/tasks.c **** 
 4380              		.loc 1 4425 0
 4381 0014 184B     		ldr	r3, .L389
 4382 0016 D3F8D830 		ldr	r3, [r3, #216]
 4383 001a 0122     		movs	r2, #1
 4384 001c 83F85820 		strb	r2, [r3, #88]
4427:..\FreeRTOS\Source/tasks.c **** 				{
 4385              		.loc 1 4427 0
 4386 0020 5CB1     		cbz	r4, .L385
4429:..\FreeRTOS\Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 4387              		.loc 1 4429 0
 4388 0022 1146     		mov	r1, r2
 4389 0024 2046     		mov	r0, r4
 4390 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4391              	.LVL423:
4436:..\FreeRTOS\Source/tasks.c **** 				}
 4392              		.loc 1 4436 0
 4393 002a 4FF08052 		mov	r2, #268435456
 4394 002e 134B     		ldr	r3, .L389+4
 4395 0030 1A60     		str	r2, [r3]
 4396              		.syntax unified
 4397              	@ 4436 "..\FreeRTOS\Source\tasks.c" 1
 4398 0032 BFF34F8F 		dsb
 4399              	@ 0 "" 2
 4400              	@ 4436 "..\FreeRTOS\Source\tasks.c" 1
 4401 0036 BFF36F8F 		isb
 4402              	@ 0 "" 2
 4403              		.thumb
 4404              		.syntax unified
 4405              	.L385:
4448:..\FreeRTOS\Source/tasks.c **** 
 4406              		.loc 1 4448 0
 4407 003a FFF7FEFF 		bl	vPortExitCritical
 4408              	.LVL424:
4450:..\FreeRTOS\Source/tasks.c **** 		{
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 180


 4409              		.loc 1 4450 0
 4410 003e FFF7FEFF 		bl	vPortEnterCritical
 4411              	.LVL425:
4453:..\FreeRTOS\Source/tasks.c **** 
 4412              		.loc 1 4453 0
 4413 0042 0D4B     		ldr	r3, .L389
 4414 0044 D3F8D830 		ldr	r3, [r3, #216]
 4415 0048 5C6D     		ldr	r4, [r3, #84]
 4416              	.LVL426:
4455:..\FreeRTOS\Source/tasks.c **** 			{
 4417              		.loc 1 4455 0
 4418 004a 5CB1     		cbz	r4, .L386
4457:..\FreeRTOS\Source/tasks.c **** 				{
 4419              		.loc 1 4457 0
 4420 004c 2DB1     		cbz	r5, .L387
4459:..\FreeRTOS\Source/tasks.c **** 				}
 4421              		.loc 1 4459 0
 4422 004e 0A4B     		ldr	r3, .L389
 4423 0050 D3F8D830 		ldr	r3, [r3, #216]
 4424 0054 0022     		movs	r2, #0
 4425 0056 5A65     		str	r2, [r3, #84]
 4426 0058 04E0     		b	.L386
 4427              	.L387:
4463:..\FreeRTOS\Source/tasks.c **** 				}
 4428              		.loc 1 4463 0
 4429 005a 074B     		ldr	r3, .L389
 4430 005c D3F8D830 		ldr	r3, [r3, #216]
 4431 0060 621E     		subs	r2, r4, #1
 4432 0062 5A65     		str	r2, [r3, #84]
 4433              	.L386:
4471:..\FreeRTOS\Source/tasks.c **** 		}
 4434              		.loc 1 4471 0
 4435 0064 044B     		ldr	r3, .L389
 4436 0066 D3F8D830 		ldr	r3, [r3, #216]
 4437 006a 0022     		movs	r2, #0
 4438 006c 83F85820 		strb	r2, [r3, #88]
4473:..\FreeRTOS\Source/tasks.c **** 
 4439              		.loc 1 4473 0
 4440 0070 FFF7FEFF 		bl	vPortExitCritical
 4441              	.LVL427:
4476:..\FreeRTOS\Source/tasks.c **** 
 4442              		.loc 1 4476 0
 4443 0074 2046     		mov	r0, r4
 4444 0076 38BD     		pop	{r3, r4, r5, pc}
 4445              	.LVL428:
 4446              	.L390:
 4447              		.align	2
 4448              	.L389:
 4449 0078 00000000 		.word	.LANCHOR0
 4450 007c 04ED00E0 		.word	-536810236
 4451              		.cfi_endproc
 4452              	.LFE122:
 4453              		.size	ulTaskNotifyTake, .-ulTaskNotifyTake
 4454              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4455              		.align	2
 4456              		.global	xTaskNotifyWait
 4457              		.thumb
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 181


 4458              		.thumb_func
 4459              		.type	xTaskNotifyWait, %function
 4460              	xTaskNotifyWait:
 4461              	.LFB123:
4484:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn;
 4462              		.loc 1 4484 0
 4463              		.cfi_startproc
 4464              		@ args = 0, pretend = 0, frame = 0
 4465              		@ frame_needed = 0, uses_anonymous_args = 0
 4466              	.LVL429:
 4467 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4468              		.cfi_def_cfa_offset 24
 4469              		.cfi_offset 3, -24
 4470              		.cfi_offset 4, -20
 4471              		.cfi_offset 5, -16
 4472              		.cfi_offset 6, -12
 4473              		.cfi_offset 7, -8
 4474              		.cfi_offset 14, -4
 4475 0002 0746     		mov	r7, r0
 4476 0004 0D46     		mov	r5, r1
 4477 0006 1446     		mov	r4, r2
 4478 0008 1E46     		mov	r6, r3
4487:..\FreeRTOS\Source/tasks.c **** 		{
 4479              		.loc 1 4487 0
 4480 000a FFF7FEFF 		bl	vPortEnterCritical
 4481              	.LVL430:
4490:..\FreeRTOS\Source/tasks.c **** 			{
 4482              		.loc 1 4490 0
 4483 000e 234B     		ldr	r3, .L397
 4484 0010 D3F8D830 		ldr	r3, [r3, #216]
 4485 0014 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 4486 0018 DBB2     		uxtb	r3, r3
 4487 001a 022B     		cmp	r3, #2
 4488 001c 18D0     		beq	.L392
4495:..\FreeRTOS\Source/tasks.c **** 
 4489              		.loc 1 4495 0
 4490 001e 1F4B     		ldr	r3, .L397
 4491 0020 D3F8D820 		ldr	r2, [r3, #216]
 4492 0024 506D     		ldr	r0, [r2, #84]
 4493 0026 20EA0700 		bic	r0, r0, r7
 4494 002a 5065     		str	r0, [r2, #84]
4498:..\FreeRTOS\Source/tasks.c **** 
 4495              		.loc 1 4498 0
 4496 002c D3F8D830 		ldr	r3, [r3, #216]
 4497 0030 0122     		movs	r2, #1
 4498 0032 83F85820 		strb	r2, [r3, #88]
4500:..\FreeRTOS\Source/tasks.c **** 				{
 4499              		.loc 1 4500 0
 4500 0036 5EB1     		cbz	r6, .L392
4502:..\FreeRTOS\Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 4501              		.loc 1 4502 0
 4502 0038 1146     		mov	r1, r2
 4503 003a 3046     		mov	r0, r6
 4504 003c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4505              	.LVL431:
4509:..\FreeRTOS\Source/tasks.c **** 				}
 4506              		.loc 1 4509 0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 182


 4507 0040 4FF08052 		mov	r2, #268435456
 4508 0044 164B     		ldr	r3, .L397+4
 4509 0046 1A60     		str	r2, [r3]
 4510              		.syntax unified
 4511              	@ 4509 "..\FreeRTOS\Source\tasks.c" 1
 4512 0048 BFF34F8F 		dsb
 4513              	@ 0 "" 2
 4514              	@ 4509 "..\FreeRTOS\Source\tasks.c" 1
 4515 004c BFF36F8F 		isb
 4516              	@ 0 "" 2
 4517              		.thumb
 4518              		.syntax unified
 4519              	.L392:
4521:..\FreeRTOS\Source/tasks.c **** 
 4520              		.loc 1 4521 0
 4521 0050 FFF7FEFF 		bl	vPortExitCritical
 4522              	.LVL432:
4523:..\FreeRTOS\Source/tasks.c **** 		{
 4523              		.loc 1 4523 0
 4524 0054 FFF7FEFF 		bl	vPortEnterCritical
 4525              	.LVL433:
4527:..\FreeRTOS\Source/tasks.c **** 			{
 4526              		.loc 1 4527 0
 4527 0058 24B1     		cbz	r4, .L393
4531:..\FreeRTOS\Source/tasks.c **** 			}
 4528              		.loc 1 4531 0
 4529 005a 104B     		ldr	r3, .L397
 4530 005c D3F8D830 		ldr	r3, [r3, #216]
 4531 0060 5B6D     		ldr	r3, [r3, #84]
 4532 0062 2360     		str	r3, [r4]
 4533              	.L393:
4538:..\FreeRTOS\Source/tasks.c **** 			{
 4534              		.loc 1 4538 0
 4535 0064 0D4B     		ldr	r3, .L397
 4536 0066 D3F8D830 		ldr	r3, [r3, #216]
 4537 006a 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 4538 006e DBB2     		uxtb	r3, r3
 4539 0070 022B     		cmp	r3, #2
 4540 0072 08D1     		bne	.L395
4547:..\FreeRTOS\Source/tasks.c **** 				xReturn = pdTRUE;
 4541              		.loc 1 4547 0
 4542 0074 094B     		ldr	r3, .L397
 4543 0076 D3F8D820 		ldr	r2, [r3, #216]
 4544 007a 536D     		ldr	r3, [r2, #84]
 4545 007c 23EA0505 		bic	r5, r3, r5
 4546              	.LVL434:
 4547 0080 5565     		str	r5, [r2, #84]
 4548              	.LVL435:
4548:..\FreeRTOS\Source/tasks.c **** 			}
 4549              		.loc 1 4548 0
 4550 0082 0124     		movs	r4, #1
 4551              	.LVL436:
 4552 0084 00E0     		b	.L394
 4553              	.LVL437:
 4554              	.L395:
4541:..\FreeRTOS\Source/tasks.c **** 			}
 4555              		.loc 1 4541 0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 183


 4556 0086 0024     		movs	r4, #0
 4557              	.LVL438:
 4558              	.L394:
4551:..\FreeRTOS\Source/tasks.c **** 		}
 4559              		.loc 1 4551 0
 4560 0088 044B     		ldr	r3, .L397
 4561 008a D3F8D830 		ldr	r3, [r3, #216]
 4562 008e 0022     		movs	r2, #0
 4563 0090 83F85820 		strb	r2, [r3, #88]
4553:..\FreeRTOS\Source/tasks.c **** 
 4564              		.loc 1 4553 0
 4565 0094 FFF7FEFF 		bl	vPortExitCritical
 4566              	.LVL439:
4556:..\FreeRTOS\Source/tasks.c **** 
 4567              		.loc 1 4556 0
 4568 0098 2046     		mov	r0, r4
 4569 009a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4570              	.LVL440:
 4571              	.L398:
 4572              		.align	2
 4573              	.L397:
 4574 009c 00000000 		.word	.LANCHOR0
 4575 00a0 04ED00E0 		.word	-536810236
 4576              		.cfi_endproc
 4577              	.LFE123:
 4578              		.size	xTaskNotifyWait, .-xTaskNotifyWait
 4579              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4580              		.align	2
 4581              		.global	xTaskGenericNotify
 4582              		.thumb
 4583              		.thumb_func
 4584              		.type	xTaskGenericNotify, %function
 4585              	xTaskGenericNotify:
 4586              	.LFB124:
4564:..\FreeRTOS\Source/tasks.c **** 	TCB_t * pxTCB;
 4587              		.loc 1 4564 0
 4588              		.cfi_startproc
 4589              		@ args = 0, pretend = 0, frame = 0
 4590              		@ frame_needed = 0, uses_anonymous_args = 0
 4591              	.LVL441:
 4592 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4593              		.cfi_def_cfa_offset 24
 4594              		.cfi_offset 3, -24
 4595              		.cfi_offset 4, -20
 4596              		.cfi_offset 5, -16
 4597              		.cfi_offset 6, -12
 4598              		.cfi_offset 7, -8
 4599              		.cfi_offset 14, -4
 4600 0002 0446     		mov	r4, r0
 4601 0004 0F46     		mov	r7, r1
 4602 0006 1546     		mov	r5, r2
 4603 0008 1E46     		mov	r6, r3
 4604              	.LVL442:
4572:..\FreeRTOS\Source/tasks.c **** 		{
 4605              		.loc 1 4572 0
 4606 000a FFF7FEFF 		bl	vPortEnterCritical
 4607              	.LVL443:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 184


4574:..\FreeRTOS\Source/tasks.c **** 			{
 4608              		.loc 1 4574 0
 4609 000e 0EB1     		cbz	r6, .L400
4576:..\FreeRTOS\Source/tasks.c **** 			}
 4610              		.loc 1 4576 0
 4611 0010 636D     		ldr	r3, [r4, #84]
 4612 0012 3360     		str	r3, [r6]
 4613              	.L400:
4579:..\FreeRTOS\Source/tasks.c **** 
 4614              		.loc 1 4579 0
 4615 0014 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 4616 0018 DBB2     		uxtb	r3, r3
 4617              	.LVL444:
4581:..\FreeRTOS\Source/tasks.c **** 
 4618              		.loc 1 4581 0
 4619 001a 0222     		movs	r2, #2
 4620 001c 84F85820 		strb	r2, [r4, #88]
4583:..\FreeRTOS\Source/tasks.c **** 			{
 4621              		.loc 1 4583 0
 4622 0020 6A1E     		subs	r2, r5, #1
 4623 0022 032A     		cmp	r2, #3
 4624 0024 15D8     		bhi	.L408
 4625 0026 DFE802F0 		tbb	[pc, r2]
 4626              	.L403:
 4627 002a 02       		.byte	(.L402-.L403)/2
 4628 002b 07       		.byte	(.L404-.L403)/2
 4629 002c 0C       		.byte	(.L405-.L403)/2
 4630 002d 0F       		.byte	(.L406-.L403)/2
 4631              		.p2align 1
 4632              	.L402:
4586:..\FreeRTOS\Source/tasks.c **** 					break;
 4633              		.loc 1 4586 0
 4634 002e 626D     		ldr	r2, [r4, #84]
 4635 0030 1743     		orrs	r7, r7, r2
 4636              	.LVL445:
 4637 0032 6765     		str	r7, [r4, #84]
4566:..\FreeRTOS\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4638              		.loc 1 4566 0
 4639 0034 0125     		movs	r5, #1
4587:..\FreeRTOS\Source/tasks.c **** 
 4640              		.loc 1 4587 0
 4641 0036 0FE0     		b	.L401
 4642              	.LVL446:
 4643              	.L404:
4590:..\FreeRTOS\Source/tasks.c **** 					break;
 4644              		.loc 1 4590 0
 4645 0038 626D     		ldr	r2, [r4, #84]
 4646 003a 0132     		adds	r2, r2, #1
 4647 003c 6265     		str	r2, [r4, #84]
4566:..\FreeRTOS\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4648              		.loc 1 4566 0
 4649 003e 0125     		movs	r5, #1
4591:..\FreeRTOS\Source/tasks.c **** 
 4650              		.loc 1 4591 0
 4651 0040 0AE0     		b	.L401
 4652              	.L405:
4594:..\FreeRTOS\Source/tasks.c **** 					break;
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 185


 4653              		.loc 1 4594 0
 4654 0042 6765     		str	r7, [r4, #84]
4566:..\FreeRTOS\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4655              		.loc 1 4566 0
 4656 0044 0125     		movs	r5, #1
4595:..\FreeRTOS\Source/tasks.c **** 
 4657              		.loc 1 4595 0
 4658 0046 07E0     		b	.L401
 4659              	.L406:
4598:..\FreeRTOS\Source/tasks.c **** 					{
 4660              		.loc 1 4598 0
 4661 0048 022B     		cmp	r3, #2
 4662 004a 04D0     		beq	.L409
4600:..\FreeRTOS\Source/tasks.c **** 					}
 4663              		.loc 1 4600 0
 4664 004c 6765     		str	r7, [r4, #84]
4566:..\FreeRTOS\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4665              		.loc 1 4566 0
 4666 004e 0125     		movs	r5, #1
 4667 0050 02E0     		b	.L401
 4668              	.L408:
 4669 0052 0125     		movs	r5, #1
 4670 0054 00E0     		b	.L401
 4671              	.L409:
4605:..\FreeRTOS\Source/tasks.c **** 					}
 4672              		.loc 1 4605 0
 4673 0056 0025     		movs	r5, #0
 4674              	.LVL447:
 4675              	.L401:
4619:..\FreeRTOS\Source/tasks.c **** 			{
 4676              		.loc 1 4619 0
 4677 0058 012B     		cmp	r3, #1
 4678 005a 24D1     		bne	.L407
4621:..\FreeRTOS\Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4679              		.loc 1 4621 0
 4680 005c 271D     		adds	r7, r4, #4
 4681 005e 3846     		mov	r0, r7
 4682 0060 FFF7FEFF 		bl	uxListRemove
 4683              	.LVL448:
4622:..\FreeRTOS\Source/tasks.c **** 
 4684              		.loc 1 4622 0
 4685 0064 E36A     		ldr	r3, [r4, #44]
 4686 0066 0122     		movs	r2, #1
 4687 0068 02FA03F1 		lsl	r1, r2, r3
 4688 006c 104E     		ldr	r6, .L411
 4689              	.LVL449:
 4690 006e D6F8E420 		ldr	r2, [r6, #228]
 4691 0072 0A43     		orrs	r2, r2, r1
 4692 0074 C6F8E420 		str	r2, [r6, #228]
 4693 0078 06F13000 		add	r0, r6, #48
 4694 007c 03EB8303 		add	r3, r3, r3, lsl #2
 4695 0080 9A00     		lsls	r2, r3, #2
 4696 0082 3946     		mov	r1, r7
 4697 0084 1044     		add	r0, r0, r2
 4698 0086 FFF7FEFF 		bl	vListInsertEnd
 4699              	.LVL450:
4643:..\FreeRTOS\Source/tasks.c **** 				{
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 186


 4700              		.loc 1 4643 0
 4701 008a E26A     		ldr	r2, [r4, #44]
 4702 008c D6F8D830 		ldr	r3, [r6, #216]
 4703 0090 DB6A     		ldr	r3, [r3, #44]
 4704 0092 9A42     		cmp	r2, r3
 4705 0094 07D9     		bls	.L407
4647:..\FreeRTOS\Source/tasks.c **** 				}
 4706              		.loc 1 4647 0
 4707 0096 4FF08052 		mov	r2, #268435456
 4708 009a 064B     		ldr	r3, .L411+4
 4709 009c 1A60     		str	r2, [r3]
 4710              		.syntax unified
 4711              	@ 4647 "..\FreeRTOS\Source\tasks.c" 1
 4712 009e BFF34F8F 		dsb
 4713              	@ 0 "" 2
 4714              	@ 4647 "..\FreeRTOS\Source\tasks.c" 1
 4715 00a2 BFF36F8F 		isb
 4716              	@ 0 "" 2
 4717              		.thumb
 4718              		.syntax unified
 4719              	.L407:
4659:..\FreeRTOS\Source/tasks.c **** 
 4720              		.loc 1 4659 0
 4721 00a6 FFF7FEFF 		bl	vPortExitCritical
 4722              	.LVL451:
4662:..\FreeRTOS\Source/tasks.c **** 
 4723              		.loc 1 4662 0
 4724 00aa 2846     		mov	r0, r5
 4725 00ac F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4726              	.LVL452:
 4727              	.L412:
 4728 00ae 00BF     		.align	2
 4729              	.L411:
 4730 00b0 00000000 		.word	.LANCHOR0
 4731 00b4 04ED00E0 		.word	-536810236
 4732              		.cfi_endproc
 4733              	.LFE124:
 4734              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 4735              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4736              		.align	2
 4737              		.global	xTaskGenericNotifyFromISR
 4738              		.thumb
 4739              		.thumb_func
 4740              		.type	xTaskGenericNotifyFromISR, %function
 4741              	xTaskGenericNotifyFromISR:
 4742              	.LFB125:
4670:..\FreeRTOS\Source/tasks.c **** 	TCB_t * pxTCB;
 4743              		.loc 1 4670 0
 4744              		.cfi_startproc
 4745              		@ args = 4, pretend = 0, frame = 0
 4746              		@ frame_needed = 0, uses_anonymous_args = 0
 4747              	.LVL453:
 4748 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4749              		.cfi_def_cfa_offset 24
 4750              		.cfi_offset 3, -24
 4751              		.cfi_offset 4, -20
 4752              		.cfi_offset 5, -16
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 187


 4753              		.cfi_offset 6, -12
 4754              		.cfi_offset 7, -8
 4755              		.cfi_offset 14, -4
 4756              	.LVL454:
 4757              	.LBB57:
 4758              	.LBB58:
 211:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 4759              		.loc 2 211 0
 4760              		.syntax unified
 4761              	@ 211 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 4762 0002 EFF31184 			mrs r4, basepri											
 4763 0006 4FF0A005 		mov r5, #160												
 4764 000a 85F31188 		msr basepri, r5											
 4765 000e BFF36F8F 		isb														
 4766 0012 BFF34F8F 		dsb														
 4767              	
 4768              	@ 0 "" 2
 4769              		.thumb
 4770              		.syntax unified
 4771              	.LBE58:
 4772              	.LBE57:
4700:..\FreeRTOS\Source/tasks.c **** 			{
 4773              		.loc 1 4700 0
 4774 0016 0BB1     		cbz	r3, .L414
4702:..\FreeRTOS\Source/tasks.c **** 			}
 4775              		.loc 1 4702 0
 4776 0018 456D     		ldr	r5, [r0, #84]
 4777 001a 1D60     		str	r5, [r3]
 4778              	.L414:
4705:..\FreeRTOS\Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4779              		.loc 1 4705 0
 4780 001c 90F85830 		ldrb	r3, [r0, #88]	@ zero_extendqisi2
 4781              	.LVL455:
 4782 0020 DBB2     		uxtb	r3, r3
 4783              	.LVL456:
4706:..\FreeRTOS\Source/tasks.c **** 
 4784              		.loc 1 4706 0
 4785 0022 0225     		movs	r5, #2
 4786 0024 80F85850 		strb	r5, [r0, #88]
4708:..\FreeRTOS\Source/tasks.c **** 			{
 4787              		.loc 1 4708 0
 4788 0028 013A     		subs	r2, r2, #1
 4789              	.LVL457:
 4790 002a 032A     		cmp	r2, #3
 4791 002c 15D8     		bhi	.L425
 4792 002e DFE802F0 		tbb	[pc, r2]
 4793              	.L417:
 4794 0032 02       		.byte	(.L416-.L417)/2
 4795 0033 07       		.byte	(.L418-.L417)/2
 4796 0034 0C       		.byte	(.L419-.L417)/2
 4797 0035 0F       		.byte	(.L420-.L417)/2
 4798              		.p2align 1
 4799              	.L416:
4711:..\FreeRTOS\Source/tasks.c **** 					break;
 4800              		.loc 1 4711 0
 4801 0036 426D     		ldr	r2, [r0, #84]
 4802 0038 1143     		orrs	r1, r1, r2
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 188


 4803              	.LVL458:
 4804 003a 4165     		str	r1, [r0, #84]
4673:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4805              		.loc 1 4673 0
 4806 003c 0125     		movs	r5, #1
4712:..\FreeRTOS\Source/tasks.c **** 
 4807              		.loc 1 4712 0
 4808 003e 0FE0     		b	.L415
 4809              	.LVL459:
 4810              	.L418:
4715:..\FreeRTOS\Source/tasks.c **** 					break;
 4811              		.loc 1 4715 0
 4812 0040 426D     		ldr	r2, [r0, #84]
 4813 0042 0132     		adds	r2, r2, #1
 4814 0044 4265     		str	r2, [r0, #84]
4673:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4815              		.loc 1 4673 0
 4816 0046 0125     		movs	r5, #1
4716:..\FreeRTOS\Source/tasks.c **** 
 4817              		.loc 1 4716 0
 4818 0048 0AE0     		b	.L415
 4819              	.L419:
4719:..\FreeRTOS\Source/tasks.c **** 					break;
 4820              		.loc 1 4719 0
 4821 004a 4165     		str	r1, [r0, #84]
4673:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4822              		.loc 1 4673 0
 4823 004c 0125     		movs	r5, #1
4720:..\FreeRTOS\Source/tasks.c **** 
 4824              		.loc 1 4720 0
 4825 004e 07E0     		b	.L415
 4826              	.L420:
4723:..\FreeRTOS\Source/tasks.c **** 					{
 4827              		.loc 1 4723 0
 4828 0050 022B     		cmp	r3, #2
 4829 0052 04D0     		beq	.L426
4725:..\FreeRTOS\Source/tasks.c **** 					}
 4830              		.loc 1 4725 0
 4831 0054 4165     		str	r1, [r0, #84]
4673:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4832              		.loc 1 4673 0
 4833 0056 0125     		movs	r5, #1
 4834 0058 02E0     		b	.L415
 4835              	.L425:
 4836 005a 0125     		movs	r5, #1
 4837 005c 00E0     		b	.L415
 4838              	.L426:
4730:..\FreeRTOS\Source/tasks.c **** 					}
 4839              		.loc 1 4730 0
 4840 005e 0025     		movs	r5, #0
 4841              	.LVL460:
 4842              	.L415:
4744:..\FreeRTOS\Source/tasks.c **** 			{
 4843              		.loc 1 4744 0
 4844 0060 012B     		cmp	r3, #1
 4845 0062 31D1     		bne	.L421
 4846 0064 0646     		mov	r6, r0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 189


4749:..\FreeRTOS\Source/tasks.c **** 				{
 4847              		.loc 1 4749 0
 4848 0066 1A4B     		ldr	r3, .L428
 4849              	.LVL461:
 4850 0068 D3F8F030 		ldr	r3, [r3, #240]
 4851 006c B3B9     		cbnz	r3, .L422
4751:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4852              		.loc 1 4751 0
 4853 006e 071D     		adds	r7, r0, #4
 4854 0070 3846     		mov	r0, r7
 4855              	.LVL462:
 4856 0072 FFF7FEFF 		bl	uxListRemove
 4857              	.LVL463:
4752:..\FreeRTOS\Source/tasks.c **** 				}
 4858              		.loc 1 4752 0
 4859 0076 F36A     		ldr	r3, [r6, #44]
 4860 0078 0122     		movs	r2, #1
 4861 007a 02FA03F1 		lsl	r1, r2, r3
 4862 007e 1448     		ldr	r0, .L428
 4863 0080 D0F8E420 		ldr	r2, [r0, #228]
 4864 0084 0A43     		orrs	r2, r2, r1
 4865 0086 C0F8E420 		str	r2, [r0, #228]
 4866 008a 3030     		adds	r0, r0, #48
 4867 008c 03EB8303 		add	r3, r3, r3, lsl #2
 4868 0090 9A00     		lsls	r2, r3, #2
 4869 0092 3946     		mov	r1, r7
 4870 0094 1044     		add	r0, r0, r2
 4871 0096 FFF7FEFF 		bl	vListInsertEnd
 4872              	.LVL464:
 4873 009a 04E0     		b	.L423
 4874              	.LVL465:
 4875              	.L422:
4758:..\FreeRTOS\Source/tasks.c **** 				}
 4876              		.loc 1 4758 0
 4877 009c 00F11801 		add	r1, r0, #24
 4878 00a0 0C48     		ldr	r0, .L428+4
 4879              	.LVL466:
 4880 00a2 FFF7FEFF 		bl	vListInsertEnd
 4881              	.LVL467:
 4882              	.L423:
4761:..\FreeRTOS\Source/tasks.c **** 				{
 4883              		.loc 1 4761 0
 4884 00a6 F26A     		ldr	r2, [r6, #44]
 4885 00a8 094B     		ldr	r3, .L428
 4886 00aa D3F8D830 		ldr	r3, [r3, #216]
 4887 00ae DB6A     		ldr	r3, [r3, #44]
 4888 00b0 9A42     		cmp	r2, r3
 4889 00b2 09D9     		bls	.L421
4765:..\FreeRTOS\Source/tasks.c **** 					{
 4890              		.loc 1 4765 0
 4891 00b4 069B     		ldr	r3, [sp, #24]
 4892 00b6 1BB1     		cbz	r3, .L424
4767:..\FreeRTOS\Source/tasks.c **** 					}
 4893              		.loc 1 4767 0
 4894 00b8 0123     		movs	r3, #1
 4895 00ba 069A     		ldr	r2, [sp, #24]
 4896 00bc 1360     		str	r3, [r2]
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 190


 4897 00be 03E0     		b	.L421
 4898              	.L424:
4774:..\FreeRTOS\Source/tasks.c **** 					}
 4899              		.loc 1 4774 0
 4900 00c0 0122     		movs	r2, #1
 4901 00c2 034B     		ldr	r3, .L428
 4902 00c4 C3F80021 		str	r2, [r3, #256]
 4903              	.LVL468:
 4904              	.L421:
 4905              	.LBB59:
 4906              	.LBB60:
 4907              		.loc 2 229 0
 4908              		.syntax unified
 4909              	@ 229 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 4910 00c8 84F31188 			msr basepri, r4	
 4911              	@ 0 "" 2
 4912              	.LVL469:
 4913              		.thumb
 4914              		.syntax unified
 4915              	.LBE60:
 4916              	.LBE59:
4786:..\FreeRTOS\Source/tasks.c **** 
 4917              		.loc 1 4786 0
 4918 00cc 2846     		mov	r0, r5
 4919 00ce F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4920              	.LVL470:
 4921              	.L429:
 4922              		.align	2
 4923              	.L428:
 4924 00d0 00000000 		.word	.LANCHOR0
 4925 00d4 14000000 		.word	.LANCHOR0+20
 4926              		.cfi_endproc
 4927              	.LFE125:
 4928              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
 4929              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4930              		.align	2
 4931              		.global	vTaskNotifyGiveFromISR
 4932              		.thumb
 4933              		.thumb_func
 4934              		.type	vTaskNotifyGiveFromISR, %function
 4935              	vTaskNotifyGiveFromISR:
 4936              	.LFB126:
4794:..\FreeRTOS\Source/tasks.c **** 	TCB_t * pxTCB;
 4937              		.loc 1 4794 0
 4938              		.cfi_startproc
 4939              		@ args = 0, pretend = 0, frame = 0
 4940              		@ frame_needed = 0, uses_anonymous_args = 0
 4941              	.LVL471:
 4942 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4943              		.cfi_def_cfa_offset 24
 4944              		.cfi_offset 3, -24
 4945              		.cfi_offset 4, -20
 4946              		.cfi_offset 5, -16
 4947              		.cfi_offset 6, -12
 4948              		.cfi_offset 7, -8
 4949              		.cfi_offset 14, -4
 4950              	.LVL472:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 191


 4951              	.LBB61:
 4952              	.LBB62:
 211:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 4953              		.loc 2 211 0
 4954              		.syntax unified
 4955              	@ 211 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 4956 0002 EFF31185 			mrs r5, basepri											
 4957 0006 4FF0A003 		mov r3, #160												
 4958 000a 83F31188 		msr basepri, r3											
 4959 000e BFF36F8F 		isb														
 4960 0012 BFF34F8F 		dsb														
 4961              	
 4962              	@ 0 "" 2
 4963              		.thumb
 4964              		.syntax unified
 4965              	.LBE62:
 4966              	.LBE61:
4823:..\FreeRTOS\Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4967              		.loc 1 4823 0
 4968 0016 90F85830 		ldrb	r3, [r0, #88]	@ zero_extendqisi2
 4969 001a DBB2     		uxtb	r3, r3
 4970              	.LVL473:
4824:..\FreeRTOS\Source/tasks.c **** 
 4971              		.loc 1 4824 0
 4972 001c 0222     		movs	r2, #2
 4973 001e 80F85820 		strb	r2, [r0, #88]
4828:..\FreeRTOS\Source/tasks.c **** 
 4974              		.loc 1 4828 0
 4975 0022 426D     		ldr	r2, [r0, #84]
 4976 0024 0132     		adds	r2, r2, #1
 4977 0026 4265     		str	r2, [r0, #84]
4834:..\FreeRTOS\Source/tasks.c **** 			{
 4978              		.loc 1 4834 0
 4979 0028 012B     		cmp	r3, #1
 4980 002a 30D1     		bne	.L431
 4981 002c 0E46     		mov	r6, r1
 4982 002e 0446     		mov	r4, r0
4839:..\FreeRTOS\Source/tasks.c **** 				{
 4983              		.loc 1 4839 0
 4984 0030 184B     		ldr	r3, .L436
 4985              	.LVL474:
 4986 0032 D3F8F030 		ldr	r3, [r3, #240]
 4987 0036 B3B9     		cbnz	r3, .L432
4841:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4988              		.loc 1 4841 0
 4989 0038 071D     		adds	r7, r0, #4
 4990 003a 3846     		mov	r0, r7
 4991              	.LVL475:
 4992 003c FFF7FEFF 		bl	uxListRemove
 4993              	.LVL476:
4842:..\FreeRTOS\Source/tasks.c **** 				}
 4994              		.loc 1 4842 0
 4995 0040 E36A     		ldr	r3, [r4, #44]
 4996 0042 0122     		movs	r2, #1
 4997 0044 02FA03F1 		lsl	r1, r2, r3
 4998 0048 1248     		ldr	r0, .L436
 4999 004a D0F8E420 		ldr	r2, [r0, #228]
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 192


 5000 004e 0A43     		orrs	r2, r2, r1
 5001 0050 C0F8E420 		str	r2, [r0, #228]
 5002 0054 3030     		adds	r0, r0, #48
 5003 0056 03EB8303 		add	r3, r3, r3, lsl #2
 5004 005a 9A00     		lsls	r2, r3, #2
 5005 005c 3946     		mov	r1, r7
 5006 005e 1044     		add	r0, r0, r2
 5007 0060 FFF7FEFF 		bl	vListInsertEnd
 5008              	.LVL477:
 5009 0064 04E0     		b	.L433
 5010              	.LVL478:
 5011              	.L432:
4848:..\FreeRTOS\Source/tasks.c **** 				}
 5012              		.loc 1 4848 0
 5013 0066 00F11801 		add	r1, r0, #24
 5014              	.LVL479:
 5015 006a 0B48     		ldr	r0, .L436+4
 5016              	.LVL480:
 5017 006c FFF7FEFF 		bl	vListInsertEnd
 5018              	.LVL481:
 5019              	.L433:
4851:..\FreeRTOS\Source/tasks.c **** 				{
 5020              		.loc 1 4851 0
 5021 0070 E26A     		ldr	r2, [r4, #44]
 5022 0072 084B     		ldr	r3, .L436
 5023 0074 D3F8D830 		ldr	r3, [r3, #216]
 5024 0078 DB6A     		ldr	r3, [r3, #44]
 5025 007a 9A42     		cmp	r2, r3
 5026 007c 07D9     		bls	.L431
4855:..\FreeRTOS\Source/tasks.c **** 					{
 5027              		.loc 1 4855 0
 5028 007e 16B1     		cbz	r6, .L434
4857:..\FreeRTOS\Source/tasks.c **** 					}
 5029              		.loc 1 4857 0
 5030 0080 0123     		movs	r3, #1
 5031 0082 3360     		str	r3, [r6]
 5032 0084 03E0     		b	.L431
 5033              	.L434:
4864:..\FreeRTOS\Source/tasks.c **** 					}
 5034              		.loc 1 4864 0
 5035 0086 0122     		movs	r2, #1
 5036 0088 024B     		ldr	r3, .L436
 5037 008a C3F80021 		str	r2, [r3, #256]
 5038              	.LVL482:
 5039              	.L431:
 5040              	.LBB63:
 5041              	.LBB64:
 5042              		.loc 2 229 0
 5043              		.syntax unified
 5044              	@ 229 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 5045 008e 85F31188 			msr basepri, r5	
 5046              	@ 0 "" 2
 5047              	.LVL483:
 5048              		.thumb
 5049              		.syntax unified
 5050 0092 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5051              	.L437:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 193


 5052              		.align	2
 5053              	.L436:
 5054 0094 00000000 		.word	.LANCHOR0
 5055 0098 14000000 		.word	.LANCHOR0+20
 5056              	.LBE64:
 5057              	.LBE63:
 5058              		.cfi_endproc
 5059              	.LFE126:
 5060              		.size	vTaskNotifyGiveFromISR, .-vTaskNotifyGiveFromISR
 5061              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5062              		.align	2
 5063              		.global	xTaskNotifyStateClear
 5064              		.thumb
 5065              		.thumb_func
 5066              		.type	xTaskNotifyStateClear, %function
 5067              	xTaskNotifyStateClear:
 5068              	.LFB127:
4883:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
 5069              		.loc 1 4883 0
 5070              		.cfi_startproc
 5071              		@ args = 0, pretend = 0, frame = 0
 5072              		@ frame_needed = 0, uses_anonymous_args = 0
 5073              	.LVL484:
 5074 0000 10B5     		push	{r4, lr}
 5075              		.cfi_def_cfa_offset 8
 5076              		.cfi_offset 4, -8
 5077              		.cfi_offset 14, -4
4889:..\FreeRTOS\Source/tasks.c **** 
 5078              		.loc 1 4889 0
 5079 0002 0446     		mov	r4, r0
 5080 0004 10B9     		cbnz	r0, .L439
4889:..\FreeRTOS\Source/tasks.c **** 
 5081              		.loc 1 4889 0 is_stmt 0 discriminator 1
 5082 0006 0A4B     		ldr	r3, .L443
 5083 0008 D3F8D840 		ldr	r4, [r3, #216]
 5084              	.LVL485:
 5085              	.L439:
4891:..\FreeRTOS\Source/tasks.c **** 		{
 5086              		.loc 1 4891 0 is_stmt 1 discriminator 4
 5087 000c FFF7FEFF 		bl	vPortEnterCritical
 5088              	.LVL486:
4893:..\FreeRTOS\Source/tasks.c **** 			{
 5089              		.loc 1 4893 0 discriminator 4
 5090 0010 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5091 0014 DBB2     		uxtb	r3, r3
 5092 0016 022B     		cmp	r3, #2
 5093 0018 04D1     		bne	.L441
4895:..\FreeRTOS\Source/tasks.c **** 				xReturn = pdPASS;
 5094              		.loc 1 4895 0
 5095 001a 0023     		movs	r3, #0
 5096 001c 84F85830 		strb	r3, [r4, #88]
 5097              	.LVL487:
4896:..\FreeRTOS\Source/tasks.c **** 			}
 5098              		.loc 1 4896 0
 5099 0020 0124     		movs	r4, #1
 5100              	.LVL488:
 5101 0022 00E0     		b	.L440
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 194


 5102              	.LVL489:
 5103              	.L441:
4900:..\FreeRTOS\Source/tasks.c **** 			}
 5104              		.loc 1 4900 0
 5105 0024 0024     		movs	r4, #0
 5106              	.LVL490:
 5107              	.L440:
4903:..\FreeRTOS\Source/tasks.c **** 
 5108              		.loc 1 4903 0
 5109 0026 FFF7FEFF 		bl	vPortExitCritical
 5110              	.LVL491:
4906:..\FreeRTOS\Source/tasks.c **** 
 5111              		.loc 1 4906 0
 5112 002a 2046     		mov	r0, r4
 5113 002c 10BD     		pop	{r4, pc}
 5114              	.LVL492:
 5115              	.L444:
 5116 002e 00BF     		.align	2
 5117              	.L443:
 5118 0030 00000000 		.word	.LANCHOR0
 5119              		.cfi_endproc
 5120              	.LFE127:
 5121              		.size	xTaskNotifyStateClear, .-xTaskNotifyStateClear
 5122              		.global	pxCurrentTCB
 5123              		.section	.rodata.str1.4,"aMS",%progbits,1
 5124              		.align	2
 5125              	.LC0:
 5126 0000 49444C45 		.ascii	"IDLE\000"
 5126      00
 5127 0005 000000   		.space	3
 5128              	.LC1:
 5129 0008 09256309 		.ascii	"\011%c\011%u\011%u\011%u\015\012\000"
 5129      25750925 
 5129      75092575 
 5129      0D0A00
 5130 0017 00       		.space	1
 5131              	.LC2:
 5132 0018 09257509 		.ascii	"\011%u\011\011%u%%\015\012\000"
 5132      09257525 
 5132      250D0A00 
 5133              	.LC3:
 5134 0024 09257509 		.ascii	"\011%u\011\011<1%%\015\012\000"
 5134      093C3125 
 5134      250D0A00 
 5135              		.bss
 5136              		.align	2
 5137              		.set	.LANCHOR0,. + 0
 5138              		.type	xSuspendedTaskList, %object
 5139              		.size	xSuspendedTaskList, 20
 5140              	xSuspendedTaskList:
 5141 0000 00000000 		.space	20
 5141      00000000 
 5141      00000000 
 5141      00000000 
 5141      00000000 
 5142              		.type	xPendingReadyList, %object
 5143              		.size	xPendingReadyList, 20
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 195


 5144              	xPendingReadyList:
 5145 0014 00000000 		.space	20
 5145      00000000 
 5145      00000000 
 5145      00000000 
 5145      00000000 
 5146              		.type	pxDelayedTaskList, %object
 5147              		.size	pxDelayedTaskList, 4
 5148              	pxDelayedTaskList:
 5149 0028 00000000 		.space	4
 5150              		.type	xNextTaskUnblockTime, %object
 5151              		.size	xNextTaskUnblockTime, 4
 5152              	xNextTaskUnblockTime:
 5153 002c 00000000 		.space	4
 5154              		.type	pxReadyTasksLists, %object
 5155              		.size	pxReadyTasksLists, 100
 5156              	pxReadyTasksLists:
 5157 0030 00000000 		.space	100
 5157      00000000 
 5157      00000000 
 5157      00000000 
 5157      00000000 
 5158              		.type	xDelayedTaskList1, %object
 5159              		.size	xDelayedTaskList1, 20
 5160              	xDelayedTaskList1:
 5161 0094 00000000 		.space	20
 5161      00000000 
 5161      00000000 
 5161      00000000 
 5161      00000000 
 5162              		.type	xDelayedTaskList2, %object
 5163              		.size	xDelayedTaskList2, 20
 5164              	xDelayedTaskList2:
 5165 00a8 00000000 		.space	20
 5165      00000000 
 5165      00000000 
 5165      00000000 
 5165      00000000 
 5166              		.type	xTasksWaitingTermination, %object
 5167              		.size	xTasksWaitingTermination, 20
 5168              	xTasksWaitingTermination:
 5169 00bc 00000000 		.space	20
 5169      00000000 
 5169      00000000 
 5169      00000000 
 5169      00000000 
 5170              		.type	pxOverflowDelayedTaskList, %object
 5171              		.size	pxOverflowDelayedTaskList, 4
 5172              	pxOverflowDelayedTaskList:
 5173 00d0 00000000 		.space	4
 5174              		.type	uxCurrentNumberOfTasks, %object
 5175              		.size	uxCurrentNumberOfTasks, 4
 5176              	uxCurrentNumberOfTasks:
 5177 00d4 00000000 		.space	4
 5178              		.type	pxCurrentTCB, %object
 5179              		.size	pxCurrentTCB, 4
 5180              	pxCurrentTCB:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 196


 5181 00d8 00000000 		.space	4
 5182              		.type	xSchedulerRunning, %object
 5183              		.size	xSchedulerRunning, 4
 5184              	xSchedulerRunning:
 5185 00dc 00000000 		.space	4
 5186              		.type	uxTaskNumber, %object
 5187              		.size	uxTaskNumber, 4
 5188              	uxTaskNumber:
 5189 00e0 00000000 		.space	4
 5190              		.type	uxTopReadyPriority, %object
 5191              		.size	uxTopReadyPriority, 4
 5192              	uxTopReadyPriority:
 5193 00e4 00000000 		.space	4
 5194              		.type	uxDeletedTasksWaitingCleanUp, %object
 5195              		.size	uxDeletedTasksWaitingCleanUp, 4
 5196              	uxDeletedTasksWaitingCleanUp:
 5197 00e8 00000000 		.space	4
 5198              		.type	xTickCount, %object
 5199              		.size	xTickCount, 4
 5200              	xTickCount:
 5201 00ec 00000000 		.space	4
 5202              		.type	uxSchedulerSuspended, %object
 5203              		.size	uxSchedulerSuspended, 4
 5204              	uxSchedulerSuspended:
 5205 00f0 00000000 		.space	4
 5206              		.type	xIdleTaskHandle, %object
 5207              		.size	xIdleTaskHandle, 4
 5208              	xIdleTaskHandle:
 5209 00f4 00000000 		.space	4
 5210              		.type	xNumOfOverflows, %object
 5211              		.size	xNumOfOverflows, 4
 5212              	xNumOfOverflows:
 5213 00f8 00000000 		.space	4
 5214              		.type	uxPendedTicks, %object
 5215              		.size	uxPendedTicks, 4
 5216              	uxPendedTicks:
 5217 00fc 00000000 		.space	4
 5218              		.type	xYieldPending, %object
 5219              		.size	xYieldPending, 4
 5220              	xYieldPending:
 5221 0100 00000000 		.space	4
 5222              		.type	ulTaskSwitchedInTime, %object
 5223              		.size	ulTaskSwitchedInTime, 4
 5224              	ulTaskSwitchedInTime:
 5225 0104 00000000 		.space	4
 5226              		.text
 5227              	.Letext0:
 5228              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4.
 5229              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4.
 5230              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4.
 5231              		.file 6 "..\\FreeRTOS\\Source\\include/projdefs.h"
 5232              		.file 7 "..\\FreeRTOS\\Source\\include/list.h"
 5233              		.file 8 "..\\FreeRTOS\\Source\\include/task.h"
 5234              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 5235              		.file 10 "..\\FreeRTOS\\Source\\include/portable.h"
 5236              		.file 11 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4
 5237              		.file 12 "Generated_Source\\PSoC5/StatisticsCounter.h"
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 197


 5238              		.file 13 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4
 5239              		.section	.debug_info,"",%progbits
 5240              	.Ldebug_info0:
 5241 0000 F6260000 		.4byte	0x26f6
 5242 0004 0400     		.2byte	0x4
 5243 0006 00000000 		.4byte	.Ldebug_abbrev0
 5244 000a 04       		.byte	0x4
 5245 000b 01       		.uleb128 0x1
 5246 000c FB020000 		.4byte	.LASF283
 5247 0010 0C       		.byte	0xc
 5248 0011 BA080000 		.4byte	.LASF284
 5249 0015 44020000 		.4byte	.LASF285
 5250 0019 40000000 		.4byte	.Ldebug_ranges0+0x40
 5251 001d 00000000 		.4byte	0
 5252 0021 00000000 		.4byte	.Ldebug_line0
 5253 0025 02       		.uleb128 0x2
 5254 0026 1D000000 		.4byte	.LASF4
 5255 002a 03       		.byte	0x3
 5256 002b D8       		.byte	0xd8
 5257 002c 30000000 		.4byte	0x30
 5258 0030 03       		.uleb128 0x3
 5259 0031 04       		.byte	0x4
 5260 0032 07       		.byte	0x7
 5261 0033 520A0000 		.4byte	.LASF0
 5262 0037 04       		.uleb128 0x4
 5263 0038 04       		.byte	0x4
 5264 0039 05       		.byte	0x5
 5265 003a 696E7400 		.ascii	"int\000"
 5266 003e 03       		.uleb128 0x3
 5267 003f 08       		.byte	0x8
 5268 0040 05       		.byte	0x5
 5269 0041 62090000 		.4byte	.LASF1
 5270 0045 03       		.uleb128 0x3
 5271 0046 08       		.byte	0x8
 5272 0047 04       		.byte	0x4
 5273 0048 050C0000 		.4byte	.LASF2
 5274 004c 03       		.uleb128 0x3
 5275 004d 01       		.byte	0x1
 5276 004e 06       		.byte	0x6
 5277 004f FC030000 		.4byte	.LASF3
 5278 0053 02       		.uleb128 0x2
 5279 0054 FC010000 		.4byte	.LASF5
 5280 0058 04       		.byte	0x4
 5281 0059 1D       		.byte	0x1d
 5282 005a 5E000000 		.4byte	0x5e
 5283 005e 03       		.uleb128 0x3
 5284 005f 01       		.byte	0x1
 5285 0060 08       		.byte	0x8
 5286 0061 6E040000 		.4byte	.LASF6
 5287 0065 03       		.uleb128 0x3
 5288 0066 02       		.byte	0x2
 5289 0067 05       		.byte	0x5
 5290 0068 4A0F0000 		.4byte	.LASF7
 5291 006c 02       		.uleb128 0x2
 5292 006d CC050000 		.4byte	.LASF8
 5293 0071 04       		.byte	0x4
 5294 0072 2B       		.byte	0x2b
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 198


 5295 0073 77000000 		.4byte	0x77
 5296 0077 03       		.uleb128 0x3
 5297 0078 02       		.byte	0x2
 5298 0079 07       		.byte	0x7
 5299 007a F3100000 		.4byte	.LASF9
 5300 007e 02       		.uleb128 0x2
 5301 007f 5D110000 		.4byte	.LASF10
 5302 0083 04       		.byte	0x4
 5303 0084 3F       		.byte	0x3f
 5304 0085 89000000 		.4byte	0x89
 5305 0089 03       		.uleb128 0x3
 5306 008a 04       		.byte	0x4
 5307 008b 05       		.byte	0x5
 5308 008c 7A020000 		.4byte	.LASF11
 5309 0090 02       		.uleb128 0x2
 5310 0091 40090000 		.4byte	.LASF12
 5311 0095 04       		.byte	0x4
 5312 0096 41       		.byte	0x41
 5313 0097 9B000000 		.4byte	0x9b
 5314 009b 03       		.uleb128 0x3
 5315 009c 04       		.byte	0x4
 5316 009d 07       		.byte	0x7
 5317 009e C9070000 		.4byte	.LASF13
 5318 00a2 03       		.uleb128 0x3
 5319 00a3 08       		.byte	0x8
 5320 00a4 07       		.byte	0x7
 5321 00a5 E80C0000 		.4byte	.LASF14
 5322 00a9 03       		.uleb128 0x3
 5323 00aa 04       		.byte	0x4
 5324 00ab 07       		.byte	0x7
 5325 00ac 24000000 		.4byte	.LASF15
 5326 00b0 05       		.uleb128 0x5
 5327 00b1 04       		.byte	0x4
 5328 00b2 06       		.uleb128 0x6
 5329 00b3 04       		.byte	0x4
 5330 00b4 B8000000 		.4byte	0xb8
 5331 00b8 03       		.uleb128 0x3
 5332 00b9 01       		.byte	0x1
 5333 00ba 08       		.byte	0x8
 5334 00bb 8F050000 		.4byte	.LASF16
 5335 00bf 06       		.uleb128 0x6
 5336 00c0 04       		.byte	0x4
 5337 00c1 C5000000 		.4byte	0xc5
 5338 00c5 07       		.uleb128 0x7
 5339 00c6 B8000000 		.4byte	0xb8
 5340 00ca 02       		.uleb128 0x2
 5341 00cb 13040000 		.4byte	.LASF17
 5342 00cf 05       		.byte	0x5
 5343 00d0 18       		.byte	0x18
 5344 00d1 53000000 		.4byte	0x53
 5345 00d5 02       		.uleb128 0x2
 5346 00d6 260D0000 		.4byte	.LASF18
 5347 00da 05       		.byte	0x5
 5348 00db 24       		.byte	0x24
 5349 00dc 6C000000 		.4byte	0x6c
 5350 00e0 02       		.uleb128 0x2
 5351 00e1 B8000000 		.4byte	.LASF19
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 199


 5352 00e5 05       		.byte	0x5
 5353 00e6 2C       		.byte	0x2c
 5354 00e7 7E000000 		.4byte	0x7e
 5355 00eb 02       		.uleb128 0x2
 5356 00ec 6F100000 		.4byte	.LASF20
 5357 00f0 05       		.byte	0x5
 5358 00f1 30       		.byte	0x30
 5359 00f2 90000000 		.4byte	0x90
 5360 00f6 03       		.uleb128 0x3
 5361 00f7 04       		.byte	0x4
 5362 00f8 04       		.byte	0x4
 5363 00f9 190A0000 		.4byte	.LASF21
 5364 00fd 03       		.uleb128 0x3
 5365 00fe 08       		.byte	0x8
 5366 00ff 04       		.byte	0x4
 5367 0100 8B090000 		.4byte	.LASF22
 5368 0104 08       		.uleb128 0x8
 5369 0105 EB000000 		.4byte	0xeb
 5370 0109 08       		.uleb128 0x8
 5371 010a CA000000 		.4byte	0xca
 5372 010e 02       		.uleb128 0x2
 5373 010f 280A0000 		.4byte	.LASF23
 5374 0113 06       		.byte	0x6
 5375 0114 23       		.byte	0x23
 5376 0115 19010000 		.4byte	0x119
 5377 0119 06       		.uleb128 0x6
 5378 011a 04       		.byte	0x4
 5379 011b 1F010000 		.4byte	0x11f
 5380 011f 09       		.uleb128 0x9
 5381 0120 2A010000 		.4byte	0x12a
 5382 0124 0A       		.uleb128 0xa
 5383 0125 B0000000 		.4byte	0xb0
 5384 0129 00       		.byte	0
 5385 012a 02       		.uleb128 0x2
 5386 012b D0100000 		.4byte	.LASF24
 5387 012f 02       		.byte	0x2
 5388 0130 37       		.byte	0x37
 5389 0131 EB000000 		.4byte	0xeb
 5390 0135 02       		.uleb128 0x2
 5391 0136 4D010000 		.4byte	.LASF25
 5392 013a 02       		.byte	0x2
 5393 013b 38       		.byte	0x38
 5394 013c 89000000 		.4byte	0x89
 5395 0140 02       		.uleb128 0x2
 5396 0141 610D0000 		.4byte	.LASF26
 5397 0145 02       		.byte	0x2
 5398 0146 39       		.byte	0x39
 5399 0147 9B000000 		.4byte	0x9b
 5400 014b 02       		.uleb128 0x2
 5401 014c 9A0D0000 		.4byte	.LASF27
 5402 0150 02       		.byte	0x2
 5403 0151 3F       		.byte	0x3f
 5404 0152 EB000000 		.4byte	0xeb
 5405 0156 06       		.uleb128 0x6
 5406 0157 04       		.byte	0x4
 5407 0158 CA000000 		.4byte	0xca
 5408 015c 0B       		.uleb128 0xb
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 200


 5409 015d A2090000 		.4byte	.LASF34
 5410 0161 14       		.byte	0x14
 5411 0162 07       		.byte	0x7
 5412 0163 8B       		.byte	0x8b
 5413 0164 A5010000 		.4byte	0x1a5
 5414 0168 0C       		.uleb128 0xc
 5415 0169 CB110000 		.4byte	.LASF28
 5416 016d 07       		.byte	0x7
 5417 016e 8E       		.byte	0x8e
 5418 016f 4B010000 		.4byte	0x14b
 5419 0173 00       		.byte	0
 5420 0174 0C       		.uleb128 0xc
 5421 0175 EC010000 		.4byte	.LASF29
 5422 0179 07       		.byte	0x7
 5423 017a 8F       		.byte	0x8f
 5424 017b A5010000 		.4byte	0x1a5
 5425 017f 04       		.byte	0x4
 5426 0180 0C       		.uleb128 0xc
 5427 0181 6D0D0000 		.4byte	.LASF30
 5428 0185 07       		.byte	0x7
 5429 0186 90       		.byte	0x90
 5430 0187 A5010000 		.4byte	0x1a5
 5431 018b 08       		.byte	0x8
 5432 018c 0C       		.uleb128 0xc
 5433 018d 4C0C0000 		.4byte	.LASF31
 5434 0191 07       		.byte	0x7
 5435 0192 91       		.byte	0x91
 5436 0193 B0000000 		.4byte	0xb0
 5437 0197 0C       		.byte	0xc
 5438 0198 0C       		.uleb128 0xc
 5439 0199 34090000 		.4byte	.LASF32
 5440 019d 07       		.byte	0x7
 5441 019e 92       		.byte	0x92
 5442 019f B0000000 		.4byte	0xb0
 5443 01a3 10       		.byte	0x10
 5444 01a4 00       		.byte	0
 5445 01a5 06       		.uleb128 0x6
 5446 01a6 04       		.byte	0x4
 5447 01a7 5C010000 		.4byte	0x15c
 5448 01ab 02       		.uleb128 0x2
 5449 01ac D90F0000 		.4byte	.LASF33
 5450 01b0 07       		.byte	0x7
 5451 01b1 95       		.byte	0x95
 5452 01b2 5C010000 		.4byte	0x15c
 5453 01b6 0B       		.uleb128 0xb
 5454 01b7 BC050000 		.4byte	.LASF35
 5455 01bb 0C       		.byte	0xc
 5456 01bc 07       		.byte	0x7
 5457 01bd 97       		.byte	0x97
 5458 01be E7010000 		.4byte	0x1e7
 5459 01c2 0C       		.uleb128 0xc
 5460 01c3 CB110000 		.4byte	.LASF28
 5461 01c7 07       		.byte	0x7
 5462 01c8 9A       		.byte	0x9a
 5463 01c9 4B010000 		.4byte	0x14b
 5464 01cd 00       		.byte	0
 5465 01ce 0C       		.uleb128 0xc
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 201


 5466 01cf EC010000 		.4byte	.LASF29
 5467 01d3 07       		.byte	0x7
 5468 01d4 9B       		.byte	0x9b
 5469 01d5 A5010000 		.4byte	0x1a5
 5470 01d9 04       		.byte	0x4
 5471 01da 0C       		.uleb128 0xc
 5472 01db 6D0D0000 		.4byte	.LASF30
 5473 01df 07       		.byte	0x7
 5474 01e0 9C       		.byte	0x9c
 5475 01e1 A5010000 		.4byte	0x1a5
 5476 01e5 08       		.byte	0x8
 5477 01e6 00       		.byte	0
 5478 01e7 02       		.uleb128 0x2
 5479 01e8 94040000 		.4byte	.LASF36
 5480 01ec 07       		.byte	0x7
 5481 01ed 9E       		.byte	0x9e
 5482 01ee B6010000 		.4byte	0x1b6
 5483 01f2 0B       		.uleb128 0xb
 5484 01f3 90020000 		.4byte	.LASF37
 5485 01f7 14       		.byte	0x14
 5486 01f8 07       		.byte	0x7
 5487 01f9 A3       		.byte	0xa3
 5488 01fa 23020000 		.4byte	0x223
 5489 01fe 0C       		.uleb128 0xc
 5490 01ff 900A0000 		.4byte	.LASF38
 5491 0203 07       		.byte	0x7
 5492 0204 A6       		.byte	0xa6
 5493 0205 23020000 		.4byte	0x223
 5494 0209 00       		.byte	0
 5495 020a 0C       		.uleb128 0xc
 5496 020b 51050000 		.4byte	.LASF39
 5497 020f 07       		.byte	0x7
 5498 0210 A7       		.byte	0xa7
 5499 0211 28020000 		.4byte	0x228
 5500 0215 04       		.byte	0x4
 5501 0216 0C       		.uleb128 0xc
 5502 0217 8E0B0000 		.4byte	.LASF40
 5503 021b 07       		.byte	0x7
 5504 021c A8       		.byte	0xa8
 5505 021d E7010000 		.4byte	0x1e7
 5506 0221 08       		.byte	0x8
 5507 0222 00       		.byte	0
 5508 0223 08       		.uleb128 0x8
 5509 0224 40010000 		.4byte	0x140
 5510 0228 06       		.uleb128 0x6
 5511 0229 04       		.byte	0x4
 5512 022a AB010000 		.4byte	0x1ab
 5513 022e 02       		.uleb128 0x2
 5514 022f 290B0000 		.4byte	.LASF41
 5515 0233 07       		.byte	0x7
 5516 0234 AA       		.byte	0xaa
 5517 0235 F2010000 		.4byte	0x1f2
 5518 0239 02       		.uleb128 0x2
 5519 023a 040B0000 		.4byte	.LASF42
 5520 023e 08       		.byte	0x8
 5521 023f 3D       		.byte	0x3d
 5522 0240 B0000000 		.4byte	0xb0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 202


 5523 0244 0D       		.uleb128 0xd
 5524 0245 01       		.byte	0x1
 5525 0246 5E000000 		.4byte	0x5e
 5526 024a 08       		.byte	0x8
 5527 024b 47       		.byte	0x47
 5528 024c 75020000 		.4byte	0x275
 5529 0250 0E       		.uleb128 0xe
 5530 0251 1F0A0000 		.4byte	.LASF43
 5531 0255 00       		.byte	0
 5532 0256 0E       		.uleb128 0xe
 5533 0257 B6070000 		.4byte	.LASF44
 5534 025b 01       		.byte	0x1
 5535 025c 0E       		.uleb128 0xe
 5536 025d A70B0000 		.4byte	.LASF45
 5537 0261 02       		.byte	0x2
 5538 0262 0E       		.uleb128 0xe
 5539 0263 08040000 		.4byte	.LASF46
 5540 0267 03       		.byte	0x3
 5541 0268 0E       		.uleb128 0xe
 5542 0269 61010000 		.4byte	.LASF47
 5543 026d 04       		.byte	0x4
 5544 026e 0E       		.uleb128 0xe
 5545 026f 4D0E0000 		.4byte	.LASF48
 5546 0273 05       		.byte	0x5
 5547 0274 00       		.byte	0
 5548 0275 02       		.uleb128 0x2
 5549 0276 C0000000 		.4byte	.LASF49
 5550 027a 08       		.byte	0x8
 5551 027b 4E       		.byte	0x4e
 5552 027c 44020000 		.4byte	0x244
 5553 0280 0D       		.uleb128 0xd
 5554 0281 01       		.byte	0x1
 5555 0282 5E000000 		.4byte	0x5e
 5556 0286 08       		.byte	0x8
 5557 0287 52       		.byte	0x52
 5558 0288 AB020000 		.4byte	0x2ab
 5559 028c 0E       		.uleb128 0xe
 5560 028d 67110000 		.4byte	.LASF50
 5561 0291 00       		.byte	0
 5562 0292 0E       		.uleb128 0xe
 5563 0293 D9020000 		.4byte	.LASF51
 5564 0297 01       		.byte	0x1
 5565 0298 0E       		.uleb128 0xe
 5566 0299 1D0C0000 		.4byte	.LASF52
 5567 029d 02       		.byte	0x2
 5568 029e 0E       		.uleb128 0xe
 5569 029f 350C0000 		.4byte	.LASF53
 5570 02a3 03       		.byte	0x3
 5571 02a4 0E       		.uleb128 0xe
 5572 02a5 D7050000 		.4byte	.LASF54
 5573 02a9 04       		.byte	0x4
 5574 02aa 00       		.byte	0
 5575 02ab 02       		.uleb128 0x2
 5576 02ac AD100000 		.4byte	.LASF55
 5577 02b0 08       		.byte	0x8
 5578 02b1 58       		.byte	0x58
 5579 02b2 80020000 		.4byte	0x280
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 203


 5580 02b6 0B       		.uleb128 0xb
 5581 02b7 F0000000 		.4byte	.LASF56
 5582 02bb 08       		.byte	0x8
 5583 02bc 08       		.byte	0x8
 5584 02bd 5D       		.byte	0x5d
 5585 02be DB020000 		.4byte	0x2db
 5586 02c2 0C       		.uleb128 0xc
 5587 02c3 9D070000 		.4byte	.LASF57
 5588 02c7 08       		.byte	0x8
 5589 02c8 5F       		.byte	0x5f
 5590 02c9 35010000 		.4byte	0x135
 5591 02cd 00       		.byte	0
 5592 02ce 0C       		.uleb128 0xc
 5593 02cf F7040000 		.4byte	.LASF58
 5594 02d3 08       		.byte	0x8
 5595 02d4 60       		.byte	0x60
 5596 02d5 4B010000 		.4byte	0x14b
 5597 02d9 04       		.byte	0x4
 5598 02da 00       		.byte	0
 5599 02db 02       		.uleb128 0x2
 5600 02dc B2050000 		.4byte	.LASF59
 5601 02e0 08       		.byte	0x8
 5602 02e1 61       		.byte	0x61
 5603 02e2 B6020000 		.4byte	0x2b6
 5604 02e6 0B       		.uleb128 0xb
 5605 02e7 5D080000 		.4byte	.LASF60
 5606 02eb 0C       		.byte	0xc
 5607 02ec 08       		.byte	0x8
 5608 02ed 66       		.byte	0x66
 5609 02ee 17030000 		.4byte	0x317
 5610 02f2 0C       		.uleb128 0xc
 5611 02f3 67070000 		.4byte	.LASF61
 5612 02f7 08       		.byte	0x8
 5613 02f8 68       		.byte	0x68
 5614 02f9 B0000000 		.4byte	0xb0
 5615 02fd 00       		.byte	0
 5616 02fe 0C       		.uleb128 0xc
 5617 02ff CF090000 		.4byte	.LASF62
 5618 0303 08       		.byte	0x8
 5619 0304 69       		.byte	0x69
 5620 0305 EB000000 		.4byte	0xeb
 5621 0309 04       		.byte	0x4
 5622 030a 0C       		.uleb128 0xc
 5623 030b 88110000 		.4byte	.LASF63
 5624 030f 08       		.byte	0x8
 5625 0310 6A       		.byte	0x6a
 5626 0311 EB000000 		.4byte	0xeb
 5627 0315 08       		.byte	0x8
 5628 0316 00       		.byte	0
 5629 0317 02       		.uleb128 0x2
 5630 0318 9A000000 		.4byte	.LASF64
 5631 031c 08       		.byte	0x8
 5632 031d 6B       		.byte	0x6b
 5633 031e E6020000 		.4byte	0x2e6
 5634 0322 07       		.uleb128 0x7
 5635 0323 BF000000 		.4byte	0xbf
 5636 0327 06       		.uleb128 0x6
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 204


 5637 0328 04       		.byte	0x4
 5638 0329 2A010000 		.4byte	0x12a
 5639 032d 0B       		.uleb128 0xb
 5640 032e 2C080000 		.4byte	.LASF65
 5641 0332 24       		.byte	0x24
 5642 0333 08       		.byte	0x8
 5643 0334 80       		.byte	0x80
 5644 0335 A6030000 		.4byte	0x3a6
 5645 0339 0C       		.uleb128 0xc
 5646 033a 7E010000 		.4byte	.LASF66
 5647 033e 08       		.byte	0x8
 5648 033f 82       		.byte	0x82
 5649 0340 39020000 		.4byte	0x239
 5650 0344 00       		.byte	0
 5651 0345 0C       		.uleb128 0xc
 5652 0346 540C0000 		.4byte	.LASF67
 5653 034a 08       		.byte	0x8
 5654 034b 83       		.byte	0x83
 5655 034c BF000000 		.4byte	0xbf
 5656 0350 04       		.byte	0x4
 5657 0351 0C       		.uleb128 0xc
 5658 0352 110C0000 		.4byte	.LASF68
 5659 0356 08       		.byte	0x8
 5660 0357 84       		.byte	0x84
 5661 0358 40010000 		.4byte	0x140
 5662 035c 08       		.byte	0x8
 5663 035d 0C       		.uleb128 0xc
 5664 035e 8B0E0000 		.4byte	.LASF69
 5665 0362 08       		.byte	0x8
 5666 0363 85       		.byte	0x85
 5667 0364 75020000 		.4byte	0x275
 5668 0368 0C       		.byte	0xc
 5669 0369 0C       		.uleb128 0xc
 5670 036a 1C020000 		.4byte	.LASF70
 5671 036e 08       		.byte	0x8
 5672 036f 86       		.byte	0x86
 5673 0370 40010000 		.4byte	0x140
 5674 0374 10       		.byte	0x10
 5675 0375 0C       		.uleb128 0xc
 5676 0376 06020000 		.4byte	.LASF71
 5677 037a 08       		.byte	0x8
 5678 037b 87       		.byte	0x87
 5679 037c 40010000 		.4byte	0x140
 5680 0380 14       		.byte	0x14
 5681 0381 0C       		.uleb128 0xc
 5682 0382 1B060000 		.4byte	.LASF72
 5683 0386 08       		.byte	0x8
 5684 0387 88       		.byte	0x88
 5685 0388 EB000000 		.4byte	0xeb
 5686 038c 18       		.byte	0x18
 5687 038d 0C       		.uleb128 0xc
 5688 038e 120D0000 		.4byte	.LASF73
 5689 0392 08       		.byte	0x8
 5690 0393 89       		.byte	0x89
 5691 0394 27030000 		.4byte	0x327
 5692 0398 1C       		.byte	0x1c
 5693 0399 0C       		.uleb128 0xc
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 205


 5694 039a D60B0000 		.4byte	.LASF74
 5695 039e 08       		.byte	0x8
 5696 039f 8A       		.byte	0x8a
 5697 03a0 D5000000 		.4byte	0xd5
 5698 03a4 20       		.byte	0x20
 5699 03a5 00       		.byte	0
 5700 03a6 02       		.uleb128 0x2
 5701 03a7 C1010000 		.4byte	.LASF75
 5702 03ab 08       		.byte	0x8
 5703 03ac 8B       		.byte	0x8b
 5704 03ad 2D030000 		.4byte	0x32d
 5705 03b1 0F       		.uleb128 0xf
 5706 03b2 5F0C0000 		.4byte	.LASF76
 5707 03b6 5C       		.byte	0x5c
 5708 03b7 01       		.byte	0x1
 5709 03b8 0D01     		.2byte	0x10d
 5710 03ba 68040000 		.4byte	0x468
 5711 03be 10       		.uleb128 0x10
 5712 03bf 59050000 		.4byte	.LASF77
 5713 03c3 01       		.byte	0x1
 5714 03c4 0F01     		.2byte	0x10f
 5715 03c6 68040000 		.4byte	0x468
 5716 03ca 00       		.byte	0
 5717 03cb 10       		.uleb128 0x10
 5718 03cc 950C0000 		.4byte	.LASF78
 5719 03d0 01       		.byte	0x1
 5720 03d1 1501     		.2byte	0x115
 5721 03d3 AB010000 		.4byte	0x1ab
 5722 03d7 04       		.byte	0x4
 5723 03d8 10       		.uleb128 0x10
 5724 03d9 A9000000 		.4byte	.LASF79
 5725 03dd 01       		.byte	0x1
 5726 03de 1601     		.2byte	0x116
 5727 03e0 AB010000 		.4byte	0x1ab
 5728 03e4 18       		.byte	0x18
 5729 03e5 10       		.uleb128 0x10
 5730 03e6 DC110000 		.4byte	.LASF80
 5731 03ea 01       		.byte	0x1
 5732 03eb 1701     		.2byte	0x117
 5733 03ed 40010000 		.4byte	0x140
 5734 03f1 2C       		.byte	0x2c
 5735 03f2 10       		.uleb128 0x10
 5736 03f3 6A010000 		.4byte	.LASF81
 5737 03f7 01       		.byte	0x1
 5738 03f8 1801     		.2byte	0x118
 5739 03fa 27030000 		.4byte	0x327
 5740 03fe 30       		.byte	0x30
 5741 03ff 10       		.uleb128 0x10
 5742 0400 540C0000 		.4byte	.LASF67
 5743 0404 01       		.byte	0x1
 5744 0405 1901     		.2byte	0x119
 5745 0407 73040000 		.4byte	0x473
 5746 040b 34       		.byte	0x34
 5747 040c 10       		.uleb128 0x10
 5748 040d 0D100000 		.4byte	.LASF82
 5749 0411 01       		.byte	0x1
 5750 0412 2401     		.2byte	0x124
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 206


 5751 0414 40010000 		.4byte	0x140
 5752 0418 40       		.byte	0x40
 5753 0419 10       		.uleb128 0x10
 5754 041a 05010000 		.4byte	.LASF83
 5755 041e 01       		.byte	0x1
 5756 041f 2501     		.2byte	0x125
 5757 0421 40010000 		.4byte	0x140
 5758 0425 44       		.byte	0x44
 5759 0426 10       		.uleb128 0x10
 5760 0427 06020000 		.4byte	.LASF71
 5761 042b 01       		.byte	0x1
 5762 042c 2901     		.2byte	0x129
 5763 042e 40010000 		.4byte	0x140
 5764 0432 48       		.byte	0x48
 5765 0433 10       		.uleb128 0x10
 5766 0434 DA0A0000 		.4byte	.LASF84
 5767 0438 01       		.byte	0x1
 5768 0439 2A01     		.2byte	0x12a
 5769 043b 40010000 		.4byte	0x140
 5770 043f 4C       		.byte	0x4c
 5771 0440 10       		.uleb128 0x10
 5772 0441 1B060000 		.4byte	.LASF72
 5773 0445 01       		.byte	0x1
 5774 0446 3601     		.2byte	0x136
 5775 0448 EB000000 		.4byte	0xeb
 5776 044c 50       		.byte	0x50
 5777 044d 10       		.uleb128 0x10
 5778 044e B6060000 		.4byte	.LASF85
 5779 0452 01       		.byte	0x1
 5780 0453 4501     		.2byte	0x145
 5781 0455 04010000 		.4byte	0x104
 5782 0459 54       		.byte	0x54
 5783 045a 10       		.uleb128 0x10
 5784 045b D30D0000 		.4byte	.LASF86
 5785 045f 01       		.byte	0x1
 5786 0460 4601     		.2byte	0x146
 5787 0462 09010000 		.4byte	0x109
 5788 0466 58       		.byte	0x58
 5789 0467 00       		.byte	0
 5790 0468 06       		.uleb128 0x6
 5791 0469 04       		.byte	0x4
 5792 046a 6E040000 		.4byte	0x46e
 5793 046e 08       		.uleb128 0x8
 5794 046f 2A010000 		.4byte	0x12a
 5795 0473 11       		.uleb128 0x11
 5796 0474 B8000000 		.4byte	0xb8
 5797 0478 83040000 		.4byte	0x483
 5798 047c 12       		.uleb128 0x12
 5799 047d A9000000 		.4byte	0xa9
 5800 0481 0B       		.byte	0xb
 5801 0482 00       		.byte	0
 5802 0483 13       		.uleb128 0x13
 5803 0484 15020000 		.4byte	.LASF87
 5804 0488 01       		.byte	0x1
 5805 0489 5301     		.2byte	0x153
 5806 048b B1030000 		.4byte	0x3b1
 5807 048f 13       		.uleb128 0x13
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 207


 5808 0490 19100000 		.4byte	.LASF88
 5809 0494 01       		.byte	0x1
 5810 0495 5701     		.2byte	0x157
 5811 0497 83040000 		.4byte	0x483
 5812 049b 14       		.uleb128 0x14
 5813 049c FB060000 		.4byte	.LASF93
 5814 04a0 02       		.byte	0x2
 5815 04a1 CF       		.byte	0xcf
 5816 04a2 EB000000 		.4byte	0xeb
 5817 04a6 03       		.byte	0x3
 5818 04a7 C2040000 		.4byte	0x4c2
 5819 04ab 15       		.uleb128 0x15
 5820 04ac 5F0A0000 		.4byte	.LASF89
 5821 04b0 02       		.byte	0x2
 5822 04b1 D1       		.byte	0xd1
 5823 04b2 EB000000 		.4byte	0xeb
 5824 04b6 15       		.uleb128 0x15
 5825 04b7 EB0B0000 		.4byte	.LASF90
 5826 04bb 02       		.byte	0x2
 5827 04bc D1       		.byte	0xd1
 5828 04bd EB000000 		.4byte	0xeb
 5829 04c1 00       		.byte	0
 5830 04c2 16       		.uleb128 0x16
 5831 04c3 A3040000 		.4byte	.LASF91
 5832 04c7 02       		.byte	0x2
 5833 04c8 E3       		.byte	0xe3
 5834 04c9 03       		.byte	0x3
 5835 04ca DA040000 		.4byte	0x4da
 5836 04ce 17       		.uleb128 0x17
 5837 04cf 5F040000 		.4byte	.LASF95
 5838 04d3 02       		.byte	0x2
 5839 04d4 E3       		.byte	0xe3
 5840 04d5 EB000000 		.4byte	0xeb
 5841 04d9 00       		.byte	0
 5842 04da 16       		.uleb128 0x16
 5843 04db 910F0000 		.4byte	.LASF92
 5844 04df 02       		.byte	0x2
 5845 04e0 BF       		.byte	0xbf
 5846 04e1 03       		.byte	0x3
 5847 04e2 F2040000 		.4byte	0x4f2
 5848 04e6 15       		.uleb128 0x15
 5849 04e7 EB0B0000 		.4byte	.LASF90
 5850 04eb 02       		.byte	0x2
 5851 04ec C1       		.byte	0xc1
 5852 04ed EB000000 		.4byte	0xeb
 5853 04f1 00       		.byte	0
 5854 04f2 14       		.uleb128 0x14
 5855 04f3 9E060000 		.4byte	.LASF94
 5856 04f7 02       		.byte	0x2
 5857 04f8 82       		.byte	0x82
 5858 04f9 CA000000 		.4byte	0xca
 5859 04fd 03       		.byte	0x3
 5860 04fe 19050000 		.4byte	0x519
 5861 0502 17       		.uleb128 0x17
 5862 0503 DC100000 		.4byte	.LASF96
 5863 0507 02       		.byte	0x2
 5864 0508 82       		.byte	0x82
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 208


 5865 0509 EB000000 		.4byte	0xeb
 5866 050d 15       		.uleb128 0x15
 5867 050e 58010000 		.4byte	.LASF97
 5868 0512 02       		.byte	0x2
 5869 0513 84       		.byte	0x84
 5870 0514 CA000000 		.4byte	0xca
 5871 0518 00       		.byte	0
 5872 0519 18       		.uleb128 0x18
 5873 051a 78050000 		.4byte	.LASF100
 5874 051e 01       		.byte	0x1
 5875 051f C306     		.2byte	0x6c3
 5876 0521 35010000 		.4byte	0x135
 5877 0525 00000000 		.4byte	.LFB80
 5878 0529 38000000 		.4byte	.LFE80-.LFB80
 5879 052d 01       		.uleb128 0x1
 5880 052e 9C       		.byte	0x9c
 5881 052f 64050000 		.4byte	0x564
 5882 0533 19       		.uleb128 0x19
 5883 0534 DD010000 		.4byte	.LASF102
 5884 0538 01       		.byte	0x1
 5885 0539 C306     		.2byte	0x6c3
 5886 053b 64050000 		.4byte	0x564
 5887 053f 00000000 		.4byte	.LLST0
 5888 0543 1A       		.uleb128 0x1a
 5889 0544 8C040000 		.4byte	.LASF98
 5890 0548 01       		.byte	0x1
 5891 0549 C506     		.2byte	0x6c5
 5892 054b 35010000 		.4byte	0x135
 5893 054f 6C000000 		.4byte	.LLST1
 5894 0553 1A       		.uleb128 0x1a
 5895 0554 D6110000 		.4byte	.LASF99
 5896 0558 01       		.byte	0x1
 5897 0559 C606     		.2byte	0x6c6
 5898 055b 74050000 		.4byte	0x574
 5899 055f 8B000000 		.4byte	.LLST2
 5900 0563 00       		.byte	0
 5901 0564 07       		.uleb128 0x7
 5902 0565 39020000 		.4byte	0x239
 5903 0569 06       		.uleb128 0x6
 5904 056a 04       		.byte	0x4
 5905 056b 6F050000 		.4byte	0x56f
 5906 056f 07       		.uleb128 0x7
 5907 0570 8F040000 		.4byte	0x48f
 5908 0574 07       		.uleb128 0x7
 5909 0575 69050000 		.4byte	0x569
 5910 0579 18       		.uleb128 0x18
 5911 057a B00A0000 		.4byte	.LASF101
 5912 057e 01       		.byte	0x1
 5913 057f 2C0E     		.2byte	0xe2c
 5914 0581 D5000000 		.4byte	0xd5
 5915 0585 00000000 		.4byte	.LFB109
 5916 0589 14000000 		.4byte	.LFE109-.LFB109
 5917 058d 01       		.uleb128 0x1
 5918 058e 9C       		.byte	0x9c
 5919 058f B4050000 		.4byte	0x5b4
 5920 0593 19       		.uleb128 0x19
 5921 0594 B30E0000 		.4byte	.LASF103
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 209


 5922 0598 01       		.byte	0x1
 5923 0599 2C0E     		.2byte	0xe2c
 5924 059b B4050000 		.4byte	0x5b4
 5925 059f F7000000 		.4byte	.LLST3
 5926 05a3 1A       		.uleb128 0x1a
 5927 05a4 13060000 		.4byte	.LASF104
 5928 05a8 01       		.byte	0x1
 5929 05a9 2E0E     		.2byte	0xe2e
 5930 05ab EB000000 		.4byte	0xeb
 5931 05af 15010000 		.4byte	.LLST4
 5932 05b3 00       		.byte	0
 5933 05b4 06       		.uleb128 0x6
 5934 05b5 04       		.byte	0x4
 5935 05b6 BA050000 		.4byte	0x5ba
 5936 05ba 07       		.uleb128 0x7
 5937 05bb CA000000 		.4byte	0xca
 5938 05bf 1B       		.uleb128 0x1b
 5939 05c0 B3040000 		.4byte	.LASF105
 5940 05c4 01       		.byte	0x1
 5941 05c5 920E     		.2byte	0xe92
 5942 05c7 00000000 		.4byte	.LFB112
 5943 05cb 2C000000 		.4byte	.LFE112-.LFB112
 5944 05cf 01       		.uleb128 0x1
 5945 05d0 9C       		.byte	0x9c
 5946 05d1 E6050000 		.4byte	0x5e6
 5947 05d5 1A       		.uleb128 0x1a
 5948 05d6 D6110000 		.4byte	.LASF99
 5949 05da 01       		.byte	0x1
 5950 05db 940E     		.2byte	0xe94
 5951 05dd E6050000 		.4byte	0x5e6
 5952 05e1 43010000 		.4byte	.LLST5
 5953 05e5 00       		.byte	0
 5954 05e6 06       		.uleb128 0x6
 5955 05e7 04       		.byte	0x4
 5956 05e8 8F040000 		.4byte	0x48f
 5957 05ec 1B       		.uleb128 0x1b
 5958 05ed 710A0000 		.4byte	.LASF106
 5959 05f1 01       		.byte	0x1
 5960 05f2 5C0E     		.2byte	0xe5c
 5961 05f4 00000000 		.4byte	.LFB111
 5962 05f8 12000000 		.4byte	.LFE111-.LFB111
 5963 05fc 01       		.uleb128 0x1
 5964 05fd 9C       		.byte	0x9c
 5965 05fe 2C060000 		.4byte	0x62c
 5966 0602 19       		.uleb128 0x19
 5967 0603 D6110000 		.4byte	.LASF99
 5968 0607 01       		.byte	0x1
 5969 0608 5C0E     		.2byte	0xe5c
 5970 060a E6050000 		.4byte	0x5e6
 5971 060e 56010000 		.4byte	.LLST6
 5972 0612 1C       		.uleb128 0x1c
 5973 0613 0A000000 		.4byte	.LVL18
 5974 0617 22260000 		.4byte	0x2622
 5975 061b 1D       		.uleb128 0x1d
 5976 061c 10000000 		.4byte	.LVL19
 5977 0620 22260000 		.4byte	0x2622
 5978 0624 1E       		.uleb128 0x1e
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 210


 5979 0625 01       		.uleb128 0x1
 5980 0626 50       		.byte	0x50
 5981 0627 02       		.uleb128 0x2
 5982 0628 74       		.byte	0x74
 5983 0629 00       		.sleb128 0
 5984 062a 00       		.byte	0
 5985 062b 00       		.byte	0
 5986 062c 1B       		.uleb128 0x1b
 5987 062d CF040000 		.4byte	.LASF107
 5988 0631 01       		.byte	0x1
 5989 0632 3703     		.2byte	0x337
 5990 0634 00000000 		.4byte	.LFB70
 5991 0638 92000000 		.4byte	.LFE70-.LFB70
 5992 063c 01       		.uleb128 0x1
 5993 063d 9C       		.byte	0x9c
 5994 063e 3C070000 		.4byte	0x73c
 5995 0642 19       		.uleb128 0x19
 5996 0643 12010000 		.4byte	.LASF108
 5997 0647 01       		.byte	0x1
 5998 0648 3703     		.2byte	0x337
 5999 064a 0E010000 		.4byte	0x10e
 6000 064e 74010000 		.4byte	.LLST7
 6001 0652 19       		.uleb128 0x19
 6002 0653 A4030000 		.4byte	.LASF109
 6003 0657 01       		.byte	0x1
 6004 0658 3803     		.2byte	0x338
 6005 065a 22030000 		.4byte	0x322
 6006 065e 92010000 		.4byte	.LLST8
 6007 0662 19       		.uleb128 0x19
 6008 0663 AD080000 		.4byte	.LASF110
 6009 0667 01       		.byte	0x1
 6010 0668 3903     		.2byte	0x339
 6011 066a 3C070000 		.4byte	0x73c
 6012 066e BE010000 		.4byte	.LLST9
 6013 0672 19       		.uleb128 0x19
 6014 0673 1F100000 		.4byte	.LASF111
 6015 0677 01       		.byte	0x1
 6016 0678 3A03     		.2byte	0x33a
 6017 067a 41070000 		.4byte	0x741
 6018 067e FB010000 		.4byte	.LLST10
 6019 0682 19       		.uleb128 0x19
 6020 0683 DC110000 		.4byte	.LASF80
 6021 0687 01       		.byte	0x1
 6022 0688 3B03     		.2byte	0x33b
 6023 068a 40010000 		.4byte	0x140
 6024 068e 19020000 		.4byte	.LLST11
 6025 0692 1F       		.uleb128 0x1f
 6026 0693 1A070000 		.4byte	.LASF112
 6027 0697 01       		.byte	0x1
 6028 0698 3C03     		.2byte	0x33c
 6029 069a 4C070000 		.4byte	0x74c
 6030 069e 02       		.uleb128 0x2
 6031 069f 91       		.byte	0x91
 6032 06a0 04       		.sleb128 4
 6033 06a1 1F       		.uleb128 0x1f
 6034 06a2 F3010000 		.4byte	.LASF113
 6035 06a6 01       		.byte	0x1
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 211


 6036 06a7 3D03     		.2byte	0x33d
 6037 06a9 E6050000 		.4byte	0x5e6
 6038 06ad 02       		.uleb128 0x2
 6039 06ae 91       		.byte	0x91
 6040 06af 08       		.sleb128 8
 6041 06b0 1F       		.uleb128 0x1f
 6042 06b1 86100000 		.4byte	.LASF114
 6043 06b5 01       		.byte	0x1
 6044 06b6 3E03     		.2byte	0x33e
 6045 06b8 5C070000 		.4byte	0x75c
 6046 06bc 02       		.uleb128 0x2
 6047 06bd 91       		.byte	0x91
 6048 06be 0C       		.sleb128 12
 6049 06bf 20       		.uleb128 0x20
 6050 06c0 59050000 		.4byte	.LASF77
 6051 06c4 01       		.byte	0x1
 6052 06c5 4003     		.2byte	0x340
 6053 06c7 27030000 		.4byte	0x327
 6054 06cb 01       		.uleb128 0x1
 6055 06cc 57       		.byte	0x57
 6056 06cd 21       		.uleb128 0x21
 6057 06ce 7800     		.ascii	"x\000"
 6058 06d0 01       		.byte	0x1
 6059 06d1 4103     		.2byte	0x341
 6060 06d3 40010000 		.4byte	0x140
 6061 06d7 38020000 		.4byte	.LLST12
 6062 06db 22       		.uleb128 0x22
 6063 06dc 1E000000 		.4byte	.LVL24
 6064 06e0 2D260000 		.4byte	0x262d
 6065 06e4 F7060000 		.4byte	0x6f7
 6066 06e8 1E       		.uleb128 0x1e
 6067 06e9 01       		.uleb128 0x1
 6068 06ea 51       		.byte	0x51
 6069 06eb 02       		.uleb128 0x2
 6070 06ec 08       		.byte	0x8
 6071 06ed A5       		.byte	0xa5
 6072 06ee 1E       		.uleb128 0x1e
 6073 06ef 01       		.uleb128 0x1
 6074 06f0 52       		.byte	0x52
 6075 06f1 04       		.uleb128 0x4
 6076 06f2 77       		.byte	0x77
 6077 06f3 00       		.sleb128 0
 6078 06f4 32       		.byte	0x32
 6079 06f5 24       		.byte	0x24
 6080 06f6 00       		.byte	0
 6081 06f7 22       		.uleb128 0x22
 6082 06f8 5E000000 		.4byte	.LVL32
 6083 06fc 38260000 		.4byte	0x2638
 6084 0700 0B070000 		.4byte	0x70b
 6085 0704 1E       		.uleb128 0x1e
 6086 0705 01       		.uleb128 0x1
 6087 0706 50       		.byte	0x50
 6088 0707 02       		.uleb128 0x2
 6089 0708 74       		.byte	0x74
 6090 0709 04       		.sleb128 4
 6091 070a 00       		.byte	0
 6092 070b 22       		.uleb128 0x22
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 212


 6093 070c 66000000 		.4byte	.LVL33
 6094 0710 38260000 		.4byte	0x2638
 6095 0714 1F070000 		.4byte	0x71f
 6096 0718 1E       		.uleb128 0x1e
 6097 0719 01       		.uleb128 0x1
 6098 071a 50       		.byte	0x50
 6099 071b 02       		.uleb128 0x2
 6100 071c 74       		.byte	0x74
 6101 071d 18       		.sleb128 24
 6102 071e 00       		.byte	0
 6103 071f 1D       		.uleb128 0x1d
 6104 0720 82000000 		.4byte	.LVL35
 6105 0724 44260000 		.4byte	0x2644
 6106 0728 1E       		.uleb128 0x1e
 6107 0729 01       		.uleb128 0x1
 6108 072a 50       		.byte	0x50
 6109 072b 02       		.uleb128 0x2
 6110 072c 77       		.byte	0x77
 6111 072d 00       		.sleb128 0
 6112 072e 1E       		.uleb128 0x1e
 6113 072f 01       		.uleb128 0x1
 6114 0730 51       		.byte	0x51
 6115 0731 02       		.uleb128 0x2
 6116 0732 79       		.byte	0x79
 6117 0733 00       		.sleb128 0
 6118 0734 1E       		.uleb128 0x1e
 6119 0735 01       		.uleb128 0x1
 6120 0736 52       		.byte	0x52
 6121 0737 02       		.uleb128 0x2
 6122 0738 7A       		.byte	0x7a
 6123 0739 00       		.sleb128 0
 6124 073a 00       		.byte	0
 6125 073b 00       		.byte	0
 6126 073c 07       		.uleb128 0x7
 6127 073d EB000000 		.4byte	0xeb
 6128 0741 07       		.uleb128 0x7
 6129 0742 B0000000 		.4byte	0xb0
 6130 0746 06       		.uleb128 0x6
 6131 0747 04       		.byte	0x4
 6132 0748 39020000 		.4byte	0x239
 6133 074c 07       		.uleb128 0x7
 6134 074d 46070000 		.4byte	0x746
 6135 0751 06       		.uleb128 0x6
 6136 0752 04       		.byte	0x4
 6137 0753 57070000 		.4byte	0x757
 6138 0757 07       		.uleb128 0x7
 6139 0758 17030000 		.4byte	0x317
 6140 075c 07       		.uleb128 0x7
 6141 075d 51070000 		.4byte	0x751
 6142 0761 1B       		.uleb128 0x1b
 6143 0762 18110000 		.4byte	.LASF115
 6144 0766 01       		.byte	0x1
 6145 0767 6C0D     		.2byte	0xd6c
 6146 0769 00000000 		.4byte	.LFB105
 6147 076d 58000000 		.4byte	.LFE105-.LFB105
 6148 0771 01       		.uleb128 0x1
 6149 0772 9C       		.byte	0x9c
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 213


 6150 0773 0A080000 		.4byte	0x80a
 6151 0777 1A       		.uleb128 0x1a
 6152 0778 DC110000 		.4byte	.LASF80
 6153 077c 01       		.byte	0x1
 6154 077d 6E0D     		.2byte	0xd6e
 6155 077f 40010000 		.4byte	0x140
 6156 0783 57020000 		.4byte	.LLST13
 6157 0787 22       		.uleb128 0x22
 6158 0788 14000000 		.4byte	.LVL38
 6159 078c 4F260000 		.4byte	0x264f
 6160 0790 A8070000 		.4byte	0x7a8
 6161 0794 1E       		.uleb128 0x1e
 6162 0795 01       		.uleb128 0x1
 6163 0796 50       		.byte	0x50
 6164 0797 0F       		.uleb128 0xf
 6165 0798 74       		.byte	0x74
 6166 0799 00       		.sleb128 0
 6167 079a 32       		.byte	0x32
 6168 079b 24       		.byte	0x24
 6169 079c 74       		.byte	0x74
 6170 079d 00       		.sleb128 0
 6171 079e 22       		.byte	0x22
 6172 079f 32       		.byte	0x32
 6173 07a0 24       		.byte	0x24
 6174 07a1 03       		.byte	0x3
 6175 07a2 30000000 		.4byte	.LANCHOR0+48
 6176 07a6 22       		.byte	0x22
 6177 07a7 00       		.byte	0
 6178 07a8 22       		.uleb128 0x22
 6179 07a9 26000000 		.4byte	.LVL41
 6180 07ad 4F260000 		.4byte	0x264f
 6181 07b1 BC070000 		.4byte	0x7bc
 6182 07b5 1E       		.uleb128 0x1e
 6183 07b6 01       		.uleb128 0x1
 6184 07b7 50       		.byte	0x50
 6185 07b8 02       		.uleb128 0x2
 6186 07b9 76       		.byte	0x76
 6187 07ba 00       		.sleb128 0
 6188 07bb 00       		.byte	0
 6189 07bc 22       		.uleb128 0x22
 6190 07bd 30000000 		.4byte	.LVL42
 6191 07c1 4F260000 		.4byte	0x264f
 6192 07c5 D0070000 		.4byte	0x7d0
 6193 07c9 1E       		.uleb128 0x1e
 6194 07ca 01       		.uleb128 0x1
 6195 07cb 50       		.byte	0x50
 6196 07cc 02       		.uleb128 0x2
 6197 07cd 75       		.byte	0x75
 6198 07ce 00       		.sleb128 0
 6199 07cf 00       		.byte	0
 6200 07d0 22       		.uleb128 0x22
 6201 07d1 38000000 		.4byte	.LVL43
 6202 07d5 4F260000 		.4byte	0x264f
 6203 07d9 E4070000 		.4byte	0x7e4
 6204 07dd 1E       		.uleb128 0x1e
 6205 07de 01       		.uleb128 0x1
 6206 07df 50       		.byte	0x50
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 214


 6207 07e0 02       		.uleb128 0x2
 6208 07e1 74       		.byte	0x74
 6209 07e2 14       		.sleb128 20
 6210 07e3 00       		.byte	0
 6211 07e4 22       		.uleb128 0x22
 6212 07e5 40000000 		.4byte	.LVL44
 6213 07e9 4F260000 		.4byte	0x264f
 6214 07ed F9070000 		.4byte	0x7f9
 6215 07f1 1E       		.uleb128 0x1e
 6216 07f2 01       		.uleb128 0x1
 6217 07f3 50       		.byte	0x50
 6218 07f4 03       		.uleb128 0x3
 6219 07f5 74       		.byte	0x74
 6220 07f6 BC01     		.sleb128 188
 6221 07f8 00       		.byte	0
 6222 07f9 1D       		.uleb128 0x1d
 6223 07fa 46000000 		.4byte	.LVL45
 6224 07fe 4F260000 		.4byte	0x264f
 6225 0802 1E       		.uleb128 0x1e
 6226 0803 01       		.uleb128 0x1
 6227 0804 50       		.byte	0x50
 6228 0805 02       		.uleb128 0x2
 6229 0806 74       		.byte	0x74
 6230 0807 00       		.sleb128 0
 6231 0808 00       		.byte	0
 6232 0809 00       		.byte	0
 6233 080a 1B       		.uleb128 0x1b
 6234 080b E2020000 		.4byte	.LASF116
 6235 080f 01       		.byte	0x1
 6236 0810 0304     		.2byte	0x403
 6237 0812 00000000 		.4byte	.LFB71
 6238 0816 AC000000 		.4byte	.LFE71-.LFB71
 6239 081a 01       		.uleb128 0x1
 6240 081b 9C       		.byte	0x9c
 6241 081c 60080000 		.4byte	0x860
 6242 0820 19       		.uleb128 0x19
 6243 0821 F3010000 		.4byte	.LASF113
 6244 0825 01       		.byte	0x1
 6245 0826 0304     		.2byte	0x403
 6246 0828 E6050000 		.4byte	0x5e6
 6247 082c 76020000 		.4byte	.LLST14
 6248 0830 1C       		.uleb128 0x1c
 6249 0831 08000000 		.4byte	.LVL47
 6250 0835 5B260000 		.4byte	0x265b
 6251 0839 1C       		.uleb128 0x1c
 6252 083a 2C000000 		.4byte	.LVL48
 6253 083e 61070000 		.4byte	0x761
 6254 0842 22       		.uleb128 0x22
 6255 0843 7C000000 		.4byte	.LVL49
 6256 0847 66260000 		.4byte	0x2666
 6257 084b 56080000 		.4byte	0x856
 6258 084f 1E       		.uleb128 0x1e
 6259 0850 01       		.uleb128 0x1
 6260 0851 51       		.byte	0x51
 6261 0852 02       		.uleb128 0x2
 6262 0853 75       		.byte	0x75
 6263 0854 04       		.sleb128 4
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 215


 6264 0855 00       		.byte	0
 6265 0856 1C       		.uleb128 0x1c
 6266 0857 80000000 		.4byte	.LVL50
 6267 085b 72260000 		.4byte	0x2672
 6268 085f 00       		.byte	0
 6269 0860 1B       		.uleb128 0x1b
 6270 0861 A50D0000 		.4byte	.LASF117
 6271 0865 01       		.byte	0x1
 6272 0866 8C0D     		.2byte	0xd8c
 6273 0868 00000000 		.4byte	.LFB106
 6274 086c 44000000 		.4byte	.LFE106-.LFB106
 6275 0870 01       		.uleb128 0x1
 6276 0871 9C       		.byte	0x9c
 6277 0872 C7080000 		.4byte	0x8c7
 6278 0876 23       		.uleb128 0x23
 6279 0877 02000000 		.4byte	.LBB27
 6280 087b 3C000000 		.4byte	.LBE27-.LBB27
 6281 087f 1A       		.uleb128 0x1a
 6282 0880 D6110000 		.4byte	.LASF99
 6283 0884 01       		.byte	0x1
 6284 0885 930D     		.2byte	0xd93
 6285 0887 E6050000 		.4byte	0x5e6
 6286 088b A2020000 		.4byte	.LLST15
 6287 088f 1C       		.uleb128 0x1c
 6288 0890 08000000 		.4byte	.LVL52
 6289 0894 5B260000 		.4byte	0x265b
 6290 0898 22       		.uleb128 0x22
 6291 0899 16000000 		.4byte	.LVL54
 6292 089d 7D260000 		.4byte	0x267d
 6293 08a1 AC080000 		.4byte	0x8ac
 6294 08a5 1E       		.uleb128 0x1e
 6295 08a6 01       		.uleb128 0x1
 6296 08a7 50       		.byte	0x50
 6297 08a8 02       		.uleb128 0x2
 6298 08a9 75       		.byte	0x75
 6299 08aa 04       		.sleb128 4
 6300 08ab 00       		.byte	0
 6301 08ac 1C       		.uleb128 0x1c
 6302 08ad 2E000000 		.4byte	.LVL55
 6303 08b1 72260000 		.4byte	0x2672
 6304 08b5 1D       		.uleb128 0x1d
 6305 08b6 34000000 		.4byte	.LVL56
 6306 08ba EC050000 		.4byte	0x5ec
 6307 08be 1E       		.uleb128 0x1e
 6308 08bf 01       		.uleb128 0x1
 6309 08c0 50       		.byte	0x50
 6310 08c1 02       		.uleb128 0x2
 6311 08c2 75       		.byte	0x75
 6312 08c3 00       		.sleb128 0
 6313 08c4 00       		.byte	0
 6314 08c5 00       		.byte	0
 6315 08c6 00       		.byte	0
 6316 08c7 24       		.uleb128 0x24
 6317 08c8 09090000 		.4byte	.LASF118
 6318 08cc 01       		.byte	0x1
 6319 08cd 980C     		.2byte	0xc98
 6320 08cf 00000000 		.4byte	.LFB104
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 216


 6321 08d3 08000000 		.4byte	.LFE104-.LFB104
 6322 08d7 01       		.uleb128 0x1
 6323 08d8 9C       		.byte	0x9c
 6324 08d9 F7080000 		.4byte	0x8f7
 6325 08dd 19       		.uleb128 0x19
 6326 08de 1F100000 		.4byte	.LASF111
 6327 08e2 01       		.byte	0x1
 6328 08e3 980C     		.2byte	0xc98
 6329 08e5 B0000000 		.4byte	0xb0
 6330 08e9 B5020000 		.4byte	.LLST16
 6331 08ed 1C       		.uleb128 0x1c
 6332 08ee 06000000 		.4byte	.LVL59
 6333 08f2 60080000 		.4byte	0x860
 6334 08f6 00       		.byte	0
 6335 08f7 1B       		.uleb128 0x1b
 6336 08f8 420D0000 		.4byte	.LASF119
 6337 08fc 01       		.byte	0x1
 6338 08fd 3013     		.2byte	0x1330
 6339 08ff 00000000 		.4byte	.LFB128
 6340 0903 84000000 		.4byte	.LFE128-.LFB128
 6341 0907 01       		.uleb128 0x1
 6342 0908 9C       		.byte	0x9c
 6343 0909 80090000 		.4byte	0x980
 6344 090d 19       		.uleb128 0x19
 6345 090e 300B0000 		.4byte	.LASF120
 6346 0912 01       		.byte	0x1
 6347 0913 3013     		.2byte	0x1330
 6348 0915 4B010000 		.4byte	0x14b
 6349 0919 D6020000 		.4byte	.LLST17
 6350 091d 19       		.uleb128 0x19
 6351 091e 57000000 		.4byte	.LASF121
 6352 0922 01       		.byte	0x1
 6353 0923 3013     		.2byte	0x1330
 6354 0925 80090000 		.4byte	0x980
 6355 0929 02030000 		.4byte	.LLST18
 6356 092d 1A       		.uleb128 0x1a
 6357 092e 460A0000 		.4byte	.LASF122
 6358 0932 01       		.byte	0x1
 6359 0933 3213     		.2byte	0x1332
 6360 0935 4B010000 		.4byte	0x14b
 6361 0939 2E030000 		.4byte	.LLST19
 6362 093d 1A       		.uleb128 0x1a
 6363 093e 970B0000 		.4byte	.LASF123
 6364 0942 01       		.byte	0x1
 6365 0943 3313     		.2byte	0x1333
 6366 0945 85090000 		.4byte	0x985
 6367 0949 41030000 		.4byte	.LLST20
 6368 094d 1C       		.uleb128 0x1c
 6369 094e 16000000 		.4byte	.LVL63
 6370 0952 7D260000 		.4byte	0x267d
 6371 0956 22       		.uleb128 0x22
 6372 0957 46000000 		.4byte	.LVL64
 6373 095b 66260000 		.4byte	0x2666
 6374 095f 6D090000 		.4byte	0x96d
 6375 0963 1E       		.uleb128 0x1e
 6376 0964 01       		.uleb128 0x1
 6377 0965 50       		.byte	0x50
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 217


 6378 0966 05       		.uleb128 0x5
 6379 0967 03       		.byte	0x3
 6380 0968 00000000 		.4byte	.LANCHOR0
 6381 096c 00       		.byte	0
 6382 096d 1C       		.uleb128 0x1c
 6383 096e 66000000 		.4byte	.LVL67
 6384 0972 89260000 		.4byte	0x2689
 6385 0976 1C       		.uleb128 0x1c
 6386 0977 76000000 		.4byte	.LVL70
 6387 097b 89260000 		.4byte	0x2689
 6388 097f 00       		.byte	0
 6389 0980 07       		.uleb128 0x7
 6390 0981 35010000 		.4byte	0x135
 6391 0985 07       		.uleb128 0x7
 6392 0986 4B010000 		.4byte	0x14b
 6393 098a 18       		.uleb128 0x18
 6394 098b 1F090000 		.4byte	.LASF124
 6395 098f 01       		.byte	0x1
 6396 0990 2510     		.2byte	0x1025
 6397 0992 B2000000 		.4byte	0xb2
 6398 0996 00000000 		.4byte	.LFB117
 6399 099a 22000000 		.4byte	.LFE117-.LFB117
 6400 099e 01       		.uleb128 0x1
 6401 099f 9C       		.byte	0x9c
 6402 09a0 FE090000 		.4byte	0x9fe
 6403 09a4 19       		.uleb128 0x19
 6404 09a5 340E0000 		.4byte	.LASF125
 6405 09a9 01       		.byte	0x1
 6406 09aa 2510     		.2byte	0x1025
 6407 09ac B2000000 		.4byte	0xb2
 6408 09b0 54030000 		.4byte	.LLST21
 6409 09b4 19       		.uleb128 0x19
 6410 09b5 540C0000 		.4byte	.LASF67
 6411 09b9 01       		.byte	0x1
 6412 09ba 2510     		.2byte	0x1025
 6413 09bc BF000000 		.4byte	0xbf
 6414 09c0 72030000 		.4byte	.LLST22
 6415 09c4 21       		.uleb128 0x21
 6416 09c5 7800     		.ascii	"x\000"
 6417 09c7 01       		.byte	0x1
 6418 09c8 2710     		.2byte	0x1027
 6419 09ca 25000000 		.4byte	0x25
 6420 09ce 93030000 		.4byte	.LLST23
 6421 09d2 22       		.uleb128 0x22
 6422 09d3 08000000 		.4byte	.LVL73
 6423 09d7 95260000 		.4byte	0x2695
 6424 09db ED090000 		.4byte	0x9ed
 6425 09df 1E       		.uleb128 0x1e
 6426 09e0 01       		.uleb128 0x1
 6427 09e1 50       		.byte	0x50
 6428 09e2 02       		.uleb128 0x2
 6429 09e3 74       		.byte	0x74
 6430 09e4 00       		.sleb128 0
 6431 09e5 1E       		.uleb128 0x1e
 6432 09e6 01       		.uleb128 0x1
 6433 09e7 51       		.byte	0x51
 6434 09e8 03       		.uleb128 0x3
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 218


 6435 09e9 F3       		.byte	0xf3
 6436 09ea 01       		.uleb128 0x1
 6437 09eb 51       		.byte	0x51
 6438 09ec 00       		.byte	0
 6439 09ed 1D       		.uleb128 0x1d
 6440 09ee 0E000000 		.4byte	.LVL74
 6441 09f2 A0260000 		.4byte	0x26a0
 6442 09f6 1E       		.uleb128 0x1e
 6443 09f7 01       		.uleb128 0x1
 6444 09f8 50       		.byte	0x50
 6445 09f9 02       		.uleb128 0x2
 6446 09fa 74       		.byte	0x74
 6447 09fb 00       		.sleb128 0
 6448 09fc 00       		.byte	0
 6449 09fd 00       		.byte	0
 6450 09fe 25       		.uleb128 0x25
 6451 09ff 4C0B0000 		.4byte	.LASF128
 6452 0a03 01       		.byte	0x1
 6453 0a04 DC02     		.2byte	0x2dc
 6454 0a06 35010000 		.4byte	0x135
 6455 0a0a 00000000 		.4byte	.LFB69
 6456 0a0e 62000000 		.4byte	.LFE69-.LFB69
 6457 0a12 01       		.uleb128 0x1
 6458 0a13 9C       		.byte	0x9c
 6459 0a14 420B0000 		.4byte	0xb42
 6460 0a18 19       		.uleb128 0x19
 6461 0a19 12010000 		.4byte	.LASF108
 6462 0a1d 01       		.byte	0x1
 6463 0a1e DC02     		.2byte	0x2dc
 6464 0a20 0E010000 		.4byte	0x10e
 6465 0a24 A6030000 		.4byte	.LLST24
 6466 0a28 19       		.uleb128 0x19
 6467 0a29 A4030000 		.4byte	.LASF109
 6468 0a2d 01       		.byte	0x1
 6469 0a2e DD02     		.2byte	0x2dd
 6470 0a30 22030000 		.4byte	0x322
 6471 0a34 C4030000 		.4byte	.LLST25
 6472 0a38 19       		.uleb128 0x19
 6473 0a39 4A000000 		.4byte	.LASF126
 6474 0a3d 01       		.byte	0x1
 6475 0a3e DE02     		.2byte	0x2de
 6476 0a40 420B0000 		.4byte	0xb42
 6477 0a44 E2030000 		.4byte	.LLST26
 6478 0a48 19       		.uleb128 0x19
 6479 0a49 1F100000 		.4byte	.LASF111
 6480 0a4d 01       		.byte	0x1
 6481 0a4e DF02     		.2byte	0x2df
 6482 0a50 41070000 		.4byte	0x741
 6483 0a54 03040000 		.4byte	.LLST27
 6484 0a58 1F       		.uleb128 0x1f
 6485 0a59 DC110000 		.4byte	.LASF80
 6486 0a5d 01       		.byte	0x1
 6487 0a5e E002     		.2byte	0x2e0
 6488 0a60 40010000 		.4byte	0x140
 6489 0a64 02       		.uleb128 0x2
 6490 0a65 91       		.byte	0x91
 6491 0a66 00       		.sleb128 0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 219


 6492 0a67 1F       		.uleb128 0x1f
 6493 0a68 1A070000 		.4byte	.LASF112
 6494 0a6c 01       		.byte	0x1
 6495 0a6d E102     		.2byte	0x2e1
 6496 0a6f 4C070000 		.4byte	0x74c
 6497 0a73 02       		.uleb128 0x2
 6498 0a74 91       		.byte	0x91
 6499 0a75 04       		.sleb128 4
 6500 0a76 1A       		.uleb128 0x1a
 6501 0a77 F3010000 		.4byte	.LASF113
 6502 0a7b 01       		.byte	0x1
 6503 0a7c E302     		.2byte	0x2e3
 6504 0a7e E6050000 		.4byte	0x5e6
 6505 0a82 21040000 		.4byte	.LLST28
 6506 0a86 1A       		.uleb128 0x1a
 6507 0a87 8C040000 		.4byte	.LASF98
 6508 0a8b 01       		.byte	0x1
 6509 0a8c E402     		.2byte	0x2e4
 6510 0a8e 35010000 		.4byte	0x135
 6511 0a92 4A040000 		.4byte	.LLST29
 6512 0a96 26       		.uleb128 0x26
 6513 0a97 0E000000 		.4byte	.LBB28
 6514 0a9b 24000000 		.4byte	.LBE28-.LBB28
 6515 0a9f EE0A0000 		.4byte	0xaee
 6516 0aa3 1A       		.uleb128 0x1a
 6517 0aa4 6A010000 		.4byte	.LASF81
 6518 0aa8 01       		.byte	0x1
 6519 0aa9 0103     		.2byte	0x301
 6520 0aab 27030000 		.4byte	0x327
 6521 0aaf 69040000 		.4byte	.LLST30
 6522 0ab3 22       		.uleb128 0x22
 6523 0ab4 14000000 		.4byte	.LVL79
 6524 0ab8 AB260000 		.4byte	0x26ab
 6525 0abc C90A0000 		.4byte	0xac9
 6526 0ac0 1E       		.uleb128 0x1e
 6527 0ac1 01       		.uleb128 0x1
 6528 0ac2 50       		.byte	0x50
 6529 0ac3 04       		.uleb128 0x4
 6530 0ac4 75       		.byte	0x75
 6531 0ac5 00       		.sleb128 0
 6532 0ac6 32       		.byte	0x32
 6533 0ac7 24       		.byte	0x24
 6534 0ac8 00       		.byte	0
 6535 0ac9 22       		.uleb128 0x22
 6536 0aca 1E000000 		.4byte	.LVL81
 6537 0ace AB260000 		.4byte	0x26ab
 6538 0ad2 DD0A0000 		.4byte	0xadd
 6539 0ad6 1E       		.uleb128 0x1e
 6540 0ad7 01       		.uleb128 0x1
 6541 0ad8 50       		.byte	0x50
 6542 0ad9 02       		.uleb128 0x2
 6543 0ada 08       		.byte	0x8
 6544 0adb 5C       		.byte	0x5c
 6545 0adc 00       		.byte	0
 6546 0add 1D       		.uleb128 0x1d
 6547 0ade 2E000000 		.4byte	.LVL83
 6548 0ae2 22260000 		.4byte	0x2622
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 220


 6549 0ae6 1E       		.uleb128 0x1e
 6550 0ae7 01       		.uleb128 0x1
 6551 0ae8 50       		.byte	0x50
 6552 0ae9 02       		.uleb128 0x2
 6553 0aea 79       		.byte	0x79
 6554 0aeb 00       		.sleb128 0
 6555 0aec 00       		.byte	0
 6556 0aed 00       		.byte	0
 6557 0aee 22       		.uleb128 0x22
 6558 0aef 4E000000 		.4byte	.LVL86
 6559 0af3 2C060000 		.4byte	0x62c
 6560 0af7 310B0000 		.4byte	0xb31
 6561 0afb 1E       		.uleb128 0x1e
 6562 0afc 01       		.uleb128 0x1
 6563 0afd 50       		.byte	0x50
 6564 0afe 02       		.uleb128 0x2
 6565 0aff 76       		.byte	0x76
 6566 0b00 00       		.sleb128 0
 6567 0b01 1E       		.uleb128 0x1e
 6568 0b02 01       		.uleb128 0x1
 6569 0b03 51       		.byte	0x51
 6570 0b04 02       		.uleb128 0x2
 6571 0b05 77       		.byte	0x77
 6572 0b06 00       		.sleb128 0
 6573 0b07 1E       		.uleb128 0x1e
 6574 0b08 01       		.uleb128 0x1
 6575 0b09 52       		.byte	0x52
 6576 0b0a 02       		.uleb128 0x2
 6577 0b0b 75       		.byte	0x75
 6578 0b0c 00       		.sleb128 0
 6579 0b0d 1E       		.uleb128 0x1e
 6580 0b0e 01       		.uleb128 0x1
 6581 0b0f 53       		.byte	0x53
 6582 0b10 02       		.uleb128 0x2
 6583 0b11 78       		.byte	0x78
 6584 0b12 00       		.sleb128 0
 6585 0b13 1E       		.uleb128 0x1e
 6586 0b14 02       		.uleb128 0x2
 6587 0b15 7D       		.byte	0x7d
 6588 0b16 00       		.sleb128 0
 6589 0b17 03       		.uleb128 0x3
 6590 0b18 91       		.byte	0x91
 6591 0b19 00       		.sleb128 0
 6592 0b1a 06       		.byte	0x6
 6593 0b1b 1E       		.uleb128 0x1e
 6594 0b1c 02       		.uleb128 0x2
 6595 0b1d 7D       		.byte	0x7d
 6596 0b1e 04       		.sleb128 4
 6597 0b1f 03       		.uleb128 0x3
 6598 0b20 91       		.byte	0x91
 6599 0b21 04       		.sleb128 4
 6600 0b22 06       		.byte	0x6
 6601 0b23 1E       		.uleb128 0x1e
 6602 0b24 02       		.uleb128 0x2
 6603 0b25 7D       		.byte	0x7d
 6604 0b26 08       		.sleb128 8
 6605 0b27 02       		.uleb128 0x2
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 221


 6606 0b28 74       		.byte	0x74
 6607 0b29 00       		.sleb128 0
 6608 0b2a 1E       		.uleb128 0x1e
 6609 0b2b 02       		.uleb128 0x2
 6610 0b2c 7D       		.byte	0x7d
 6611 0b2d 0C       		.sleb128 12
 6612 0b2e 01       		.uleb128 0x1
 6613 0b2f 30       		.byte	0x30
 6614 0b30 00       		.byte	0
 6615 0b31 1D       		.uleb128 0x1d
 6616 0b32 54000000 		.4byte	.LVL87
 6617 0b36 0A080000 		.4byte	0x80a
 6618 0b3a 1E       		.uleb128 0x1e
 6619 0b3b 01       		.uleb128 0x1
 6620 0b3c 50       		.byte	0x50
 6621 0b3d 02       		.uleb128 0x2
 6622 0b3e 74       		.byte	0x74
 6623 0b3f 00       		.sleb128 0
 6624 0b40 00       		.byte	0
 6625 0b41 00       		.byte	0
 6626 0b42 07       		.uleb128 0x7
 6627 0b43 D5000000 		.4byte	0xd5
 6628 0b47 27       		.uleb128 0x27
 6629 0b48 07060000 		.4byte	.LASF136
 6630 0b4c 01       		.byte	0x1
 6631 0b4d 5804     		.2byte	0x458
 6632 0b4f 00000000 		.4byte	.LFB72
 6633 0b53 BC000000 		.4byte	.LFE72-.LFB72
 6634 0b57 01       		.uleb128 0x1
 6635 0b58 9C       		.byte	0x9c
 6636 0b59 F00B0000 		.4byte	0xbf0
 6637 0b5d 19       		.uleb128 0x19
 6638 0b5e E5100000 		.4byte	.LASF127
 6639 0b62 01       		.byte	0x1
 6640 0b63 5804     		.2byte	0x458
 6641 0b65 39020000 		.4byte	0x239
 6642 0b69 92040000 		.4byte	.LLST31
 6643 0b6d 1A       		.uleb128 0x1a
 6644 0b6e D6110000 		.4byte	.LASF99
 6645 0b72 01       		.byte	0x1
 6646 0b73 5A04     		.2byte	0x45a
 6647 0b75 E6050000 		.4byte	0x5e6
 6648 0b79 B0040000 		.4byte	.LLST32
 6649 0b7d 1C       		.uleb128 0x1c
 6650 0b7e 08000000 		.4byte	.LVL91
 6651 0b82 5B260000 		.4byte	0x265b
 6652 0b86 22       		.uleb128 0x22
 6653 0b87 18000000 		.4byte	.LVL93
 6654 0b8b 7D260000 		.4byte	0x267d
 6655 0b8f 9A0B0000 		.4byte	0xb9a
 6656 0b93 1E       		.uleb128 0x1e
 6657 0b94 01       		.uleb128 0x1
 6658 0b95 50       		.byte	0x50
 6659 0b96 02       		.uleb128 0x2
 6660 0b97 75       		.byte	0x75
 6661 0b98 00       		.sleb128 0
 6662 0b99 00       		.byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 222


 6663 0b9a 22       		.uleb128 0x22
 6664 0b9b 48000000 		.4byte	.LVL94
 6665 0b9f 7D260000 		.4byte	0x267d
 6666 0ba3 AE0B0000 		.4byte	0xbae
 6667 0ba7 1E       		.uleb128 0x1e
 6668 0ba8 01       		.uleb128 0x1
 6669 0ba9 50       		.byte	0x50
 6670 0baa 02       		.uleb128 0x2
 6671 0bab 74       		.byte	0x74
 6672 0bac 18       		.sleb128 24
 6673 0bad 00       		.byte	0
 6674 0bae 22       		.uleb128 0x22
 6675 0baf 68000000 		.4byte	.LVL95
 6676 0bb3 66260000 		.4byte	0x2666
 6677 0bb7 C90B0000 		.4byte	0xbc9
 6678 0bbb 1E       		.uleb128 0x1e
 6679 0bbc 01       		.uleb128 0x1
 6680 0bbd 50       		.byte	0x50
 6681 0bbe 03       		.uleb128 0x3
 6682 0bbf 76       		.byte	0x76
 6683 0bc0 BC01     		.sleb128 188
 6684 0bc2 1E       		.uleb128 0x1e
 6685 0bc3 01       		.uleb128 0x1
 6686 0bc4 51       		.byte	0x51
 6687 0bc5 02       		.uleb128 0x2
 6688 0bc6 75       		.byte	0x75
 6689 0bc7 00       		.sleb128 0
 6690 0bc8 00       		.byte	0
 6691 0bc9 22       		.uleb128 0x22
 6692 0bca 86000000 		.4byte	.LVL96
 6693 0bce EC050000 		.4byte	0x5ec
 6694 0bd2 DD0B0000 		.4byte	0xbdd
 6695 0bd6 1E       		.uleb128 0x1e
 6696 0bd7 01       		.uleb128 0x1
 6697 0bd8 50       		.byte	0x50
 6698 0bd9 02       		.uleb128 0x2
 6699 0bda 74       		.byte	0x74
 6700 0bdb 00       		.sleb128 0
 6701 0bdc 00       		.byte	0
 6702 0bdd 1C       		.uleb128 0x1c
 6703 0bde 8A000000 		.4byte	.LVL97
 6704 0be2 BF050000 		.4byte	0x5bf
 6705 0be6 1C       		.uleb128 0x1c
 6706 0be7 8E000000 		.4byte	.LVL98
 6707 0beb 72260000 		.4byte	0x2672
 6708 0bef 00       		.byte	0
 6709 0bf0 25       		.uleb128 0x25
 6710 0bf1 C50D0000 		.4byte	.LASF129
 6711 0bf5 01       		.byte	0x1
 6712 0bf6 3505     		.2byte	0x535
 6713 0bf8 75020000 		.4byte	0x275
 6714 0bfc 00000000 		.4byte	.LFB75
 6715 0c00 64000000 		.4byte	.LFE75-.LFB75
 6716 0c04 01       		.uleb128 0x1
 6717 0c05 9C       		.byte	0x9c
 6718 0c06 5B0C0000 		.4byte	0xc5b
 6719 0c0a 19       		.uleb128 0x19
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 223


 6720 0c0b DD010000 		.4byte	.LASF102
 6721 0c0f 01       		.byte	0x1
 6722 0c10 3505     		.2byte	0x535
 6723 0c12 39020000 		.4byte	0x239
 6724 0c16 C3040000 		.4byte	.LLST33
 6725 0c1a 20       		.uleb128 0x20
 6726 0c1b A2110000 		.4byte	.LASF130
 6727 0c1f 01       		.byte	0x1
 6728 0c20 3705     		.2byte	0x537
 6729 0c22 75020000 		.4byte	0x275
 6730 0c26 01       		.uleb128 0x1
 6731 0c27 50       		.byte	0x50
 6732 0c28 1A       		.uleb128 0x1a
 6733 0c29 54070000 		.4byte	.LASF131
 6734 0c2d 01       		.byte	0x1
 6735 0c2e 3805     		.2byte	0x538
 6736 0c30 5B0C0000 		.4byte	0xc5b
 6737 0c34 13050000 		.4byte	.LLST34
 6738 0c38 1A       		.uleb128 0x1a
 6739 0c39 D6110000 		.4byte	.LASF99
 6740 0c3d 01       		.byte	0x1
 6741 0c3e 3905     		.2byte	0x539
 6742 0c40 74050000 		.4byte	0x574
 6743 0c44 31050000 		.4byte	.LLST35
 6744 0c48 1C       		.uleb128 0x1c
 6745 0c49 12000000 		.4byte	.LVL102
 6746 0c4d 5B260000 		.4byte	0x265b
 6747 0c51 1C       		.uleb128 0x1c
 6748 0c52 18000000 		.4byte	.LVL104
 6749 0c56 72260000 		.4byte	0x2672
 6750 0c5a 00       		.byte	0
 6751 0c5b 06       		.uleb128 0x6
 6752 0c5c 04       		.byte	0x4
 6753 0c5d 2E020000 		.4byte	0x22e
 6754 0c61 25       		.uleb128 0x25
 6755 0c62 C40B0000 		.4byte	.LASF132
 6756 0c66 01       		.byte	0x1
 6757 0c67 7C05     		.2byte	0x57c
 6758 0c69 40010000 		.4byte	0x140
 6759 0c6d 00000000 		.4byte	.LFB76
 6760 0c71 20000000 		.4byte	.LFE76-.LFB76
 6761 0c75 01       		.uleb128 0x1
 6762 0c76 9C       		.byte	0x9c
 6763 0c77 BE0C0000 		.4byte	0xcbe
 6764 0c7b 19       		.uleb128 0x19
 6765 0c7c DD010000 		.4byte	.LASF102
 6766 0c80 01       		.byte	0x1
 6767 0c81 7C05     		.2byte	0x57c
 6768 0c83 39020000 		.4byte	0x239
 6769 0c87 81050000 		.4byte	.LLST36
 6770 0c8b 1A       		.uleb128 0x1a
 6771 0c8c D6110000 		.4byte	.LASF99
 6772 0c90 01       		.byte	0x1
 6773 0c91 7E05     		.2byte	0x57e
 6774 0c93 E6050000 		.4byte	0x5e6
 6775 0c97 9F050000 		.4byte	.LLST37
 6776 0c9b 1A       		.uleb128 0x1a
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 224


 6777 0c9c E3010000 		.4byte	.LASF133
 6778 0ca0 01       		.byte	0x1
 6779 0ca1 7F05     		.2byte	0x57f
 6780 0ca3 40010000 		.4byte	0x140
 6781 0ca7 B2050000 		.4byte	.LLST38
 6782 0cab 1C       		.uleb128 0x1c
 6783 0cac 08000000 		.4byte	.LVL116
 6784 0cb0 5B260000 		.4byte	0x265b
 6785 0cb4 1C       		.uleb128 0x1c
 6786 0cb5 16000000 		.4byte	.LVL119
 6787 0cb9 72260000 		.4byte	0x2672
 6788 0cbd 00       		.byte	0
 6789 0cbe 25       		.uleb128 0x25
 6790 0cbf 56100000 		.4byte	.LASF134
 6791 0cc3 01       		.byte	0x1
 6792 0cc4 9205     		.2byte	0x592
 6793 0cc6 40010000 		.4byte	0x140
 6794 0cca 00000000 		.4byte	.LFB77
 6795 0cce 28000000 		.4byte	.LFE77-.LFB77
 6796 0cd2 01       		.uleb128 0x1
 6797 0cd3 9C       		.byte	0x9c
 6798 0cd4 560D0000 		.4byte	0xd56
 6799 0cd8 19       		.uleb128 0x19
 6800 0cd9 DD010000 		.4byte	.LASF102
 6801 0cdd 01       		.byte	0x1
 6802 0cde 9205     		.2byte	0x592
 6803 0ce0 39020000 		.4byte	0x239
 6804 0ce4 D0050000 		.4byte	.LLST39
 6805 0ce8 1A       		.uleb128 0x1a
 6806 0ce9 D6110000 		.4byte	.LASF99
 6807 0ced 01       		.byte	0x1
 6808 0cee 9405     		.2byte	0x594
 6809 0cf0 E6050000 		.4byte	0x5e6
 6810 0cf4 E3050000 		.4byte	.LLST40
 6811 0cf8 20       		.uleb128 0x20
 6812 0cf9 E3010000 		.4byte	.LASF133
 6813 0cfd 01       		.byte	0x1
 6814 0cfe 9505     		.2byte	0x595
 6815 0d00 40010000 		.4byte	0x140
 6816 0d04 01       		.uleb128 0x1
 6817 0d05 50       		.byte	0x50
 6818 0d06 28       		.uleb128 0x28
 6819 0d07 1D010000 		.4byte	.LASF135
 6820 0d0b 01       		.byte	0x1
 6821 0d0c 9505     		.2byte	0x595
 6822 0d0e 40010000 		.4byte	0x140
 6823 0d12 29       		.uleb128 0x29
 6824 0d13 9B040000 		.4byte	0x49b
 6825 0d17 00000000 		.4byte	.LBB29
 6826 0d1b 14000000 		.4byte	.LBE29-.LBB29
 6827 0d1f 01       		.byte	0x1
 6828 0d20 A905     		.2byte	0x5a9
 6829 0d22 3B0D0000 		.4byte	0xd3b
 6830 0d26 23       		.uleb128 0x23
 6831 0d27 00000000 		.4byte	.LBB30
 6832 0d2b 14000000 		.4byte	.LBE30-.LBB30
 6833 0d2f 2A       		.uleb128 0x2a
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 225


 6834 0d30 AB040000 		.4byte	0x4ab
 6835 0d34 2A       		.uleb128 0x2a
 6836 0d35 B6040000 		.4byte	0x4b6
 6837 0d39 00       		.byte	0
 6838 0d3a 00       		.byte	0
 6839 0d3b 2B       		.uleb128 0x2b
 6840 0d3c C2040000 		.4byte	0x4c2
 6841 0d40 1E000000 		.4byte	.LBB31
 6842 0d44 04000000 		.4byte	.LBE31-.LBB31
 6843 0d48 01       		.byte	0x1
 6844 0d49 B005     		.2byte	0x5b0
 6845 0d4b 2C       		.uleb128 0x2c
 6846 0d4c CE040000 		.4byte	0x4ce
 6847 0d50 F6050000 		.4byte	.LLST41
 6848 0d54 00       		.byte	0
 6849 0d55 00       		.byte	0
 6850 0d56 27       		.uleb128 0x27
 6851 0d57 8C070000 		.4byte	.LASF137
 6852 0d5b 01       		.byte	0x1
 6853 0d5c BA05     		.2byte	0x5ba
 6854 0d5e 00000000 		.4byte	.LFB78
 6855 0d62 E8000000 		.4byte	.LFE78-.LFB78
 6856 0d66 01       		.uleb128 0x1
 6857 0d67 9C       		.byte	0x9c
 6858 0d68 070E0000 		.4byte	0xe07
 6859 0d6c 19       		.uleb128 0x19
 6860 0d6d DD010000 		.4byte	.LASF102
 6861 0d71 01       		.byte	0x1
 6862 0d72 BA05     		.2byte	0x5ba
 6863 0d74 39020000 		.4byte	0x239
 6864 0d78 09060000 		.4byte	.LLST42
 6865 0d7c 19       		.uleb128 0x19
 6866 0d7d 610F0000 		.4byte	.LASF138
 6867 0d81 01       		.byte	0x1
 6868 0d82 BA05     		.2byte	0x5ba
 6869 0d84 40010000 		.4byte	0x140
 6870 0d88 27060000 		.4byte	.LLST43
 6871 0d8c 1A       		.uleb128 0x1a
 6872 0d8d D6110000 		.4byte	.LASF99
 6873 0d91 01       		.byte	0x1
 6874 0d92 BC05     		.2byte	0x5bc
 6875 0d94 E6050000 		.4byte	0x5e6
 6876 0d98 52060000 		.4byte	.LLST44
 6877 0d9c 1A       		.uleb128 0x1a
 6878 0d9d 2E020000 		.4byte	.LASF139
 6879 0da1 01       		.byte	0x1
 6880 0da2 BD05     		.2byte	0x5bd
 6881 0da4 40010000 		.4byte	0x140
 6882 0da8 65060000 		.4byte	.LLST45
 6883 0dac 1A       		.uleb128 0x1a
 6884 0dad 47080000 		.4byte	.LASF140
 6885 0db1 01       		.byte	0x1
 6886 0db2 BD05     		.2byte	0x5bd
 6887 0db4 40010000 		.4byte	0x140
 6888 0db8 78060000 		.4byte	.LLST46
 6889 0dbc 1A       		.uleb128 0x1a
 6890 0dbd 70090000 		.4byte	.LASF141
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 226


 6891 0dc1 01       		.byte	0x1
 6892 0dc2 BE05     		.2byte	0x5be
 6893 0dc4 35010000 		.4byte	0x135
 6894 0dc8 8B060000 		.4byte	.LLST47
 6895 0dcc 1C       		.uleb128 0x1c
 6896 0dcd 10000000 		.4byte	.LVL128
 6897 0dd1 5B260000 		.4byte	0x265b
 6898 0dd5 22       		.uleb128 0x22
 6899 0dd6 88000000 		.4byte	.LVL135
 6900 0dda 7D260000 		.4byte	0x267d
 6901 0dde E90D0000 		.4byte	0xde9
 6902 0de2 1E       		.uleb128 0x1e
 6903 0de3 01       		.uleb128 0x1
 6904 0de4 50       		.byte	0x50
 6905 0de5 02       		.uleb128 0x2
 6906 0de6 75       		.byte	0x75
 6907 0de7 00       		.sleb128 0
 6908 0de8 00       		.byte	0
 6909 0de9 22       		.uleb128 0x22
 6910 0dea C2000000 		.4byte	.LVL137
 6911 0dee 66260000 		.4byte	0x2666
 6912 0df2 FD0D0000 		.4byte	0xdfd
 6913 0df6 1E       		.uleb128 0x1e
 6914 0df7 01       		.uleb128 0x1
 6915 0df8 51       		.byte	0x51
 6916 0df9 02       		.uleb128 0x2
 6917 0dfa 75       		.byte	0x75
 6918 0dfb 00       		.sleb128 0
 6919 0dfc 00       		.byte	0
 6920 0dfd 1C       		.uleb128 0x1c
 6921 0dfe D8000000 		.4byte	.LVL139
 6922 0e02 72260000 		.4byte	0x2672
 6923 0e06 00       		.byte	0
 6924 0e07 27       		.uleb128 0x27
 6925 0e08 72010000 		.4byte	.LASF142
 6926 0e0c 01       		.byte	0x1
 6927 0e0d F106     		.2byte	0x6f1
 6928 0e0f 00000000 		.4byte	.LFB81
 6929 0e13 78000000 		.4byte	.LFE81-.LFB81
 6930 0e17 01       		.uleb128 0x1
 6931 0e18 9C       		.byte	0x9c
 6932 0e19 8C0E0000 		.4byte	0xe8c
 6933 0e1d 19       		.uleb128 0x19
 6934 0e1e 46070000 		.4byte	.LASF143
 6935 0e22 01       		.byte	0x1
 6936 0e23 F106     		.2byte	0x6f1
 6937 0e25 39020000 		.4byte	0x239
 6938 0e29 AA060000 		.4byte	.LLST48
 6939 0e2d 1A       		.uleb128 0x1a
 6940 0e2e D6110000 		.4byte	.LASF99
 6941 0e32 01       		.byte	0x1
 6942 0e33 F306     		.2byte	0x6f3
 6943 0e35 8C0E0000 		.4byte	0xe8c
 6944 0e39 AA060000 		.4byte	.LLST48
 6945 0e3d 1C       		.uleb128 0x1c
 6946 0e3e 14000000 		.4byte	.LVL142
 6947 0e42 5B260000 		.4byte	0x265b
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 227


 6948 0e46 22       		.uleb128 0x22
 6949 0e47 1A000000 		.4byte	.LVL143
 6950 0e4b 19050000 		.4byte	0x519
 6951 0e4f 5A0E0000 		.4byte	0xe5a
 6952 0e53 1E       		.uleb128 0x1e
 6953 0e54 01       		.uleb128 0x1
 6954 0e55 50       		.byte	0x50
 6955 0e56 02       		.uleb128 0x2
 6956 0e57 74       		.byte	0x74
 6957 0e58 00       		.sleb128 0
 6958 0e59 00       		.byte	0
 6959 0e5a 22       		.uleb128 0x22
 6960 0e5b 24000000 		.4byte	.LVL144
 6961 0e5f 7D260000 		.4byte	0x267d
 6962 0e63 6E0E0000 		.4byte	0xe6e
 6963 0e67 1E       		.uleb128 0x1e
 6964 0e68 01       		.uleb128 0x1
 6965 0e69 50       		.byte	0x50
 6966 0e6a 02       		.uleb128 0x2
 6967 0e6b 76       		.byte	0x76
 6968 0e6c 00       		.sleb128 0
 6969 0e6d 00       		.byte	0
 6970 0e6e 22       		.uleb128 0x22
 6971 0e6f 4A000000 		.4byte	.LVL145
 6972 0e73 66260000 		.4byte	0x2666
 6973 0e77 820E0000 		.4byte	0xe82
 6974 0e7b 1E       		.uleb128 0x1e
 6975 0e7c 01       		.uleb128 0x1
 6976 0e7d 51       		.byte	0x51
 6977 0e7e 02       		.uleb128 0x2
 6978 0e7f 76       		.byte	0x76
 6979 0e80 00       		.sleb128 0
 6980 0e81 00       		.byte	0
 6981 0e82 1C       		.uleb128 0x1c
 6982 0e83 6A000000 		.4byte	.LVL146
 6983 0e87 72260000 		.4byte	0x2672
 6984 0e8b 00       		.byte	0
 6985 0e8c 07       		.uleb128 0x7
 6986 0e8d E6050000 		.4byte	0x5e6
 6987 0e91 25       		.uleb128 0x25
 6988 0e92 46060000 		.4byte	.LASF144
 6989 0e96 01       		.byte	0x1
 6990 0e97 2707     		.2byte	0x727
 6991 0e99 35010000 		.4byte	0x135
 6992 0e9d 00000000 		.4byte	.LFB82
 6993 0ea1 88000000 		.4byte	.LFE82-.LFB82
 6994 0ea5 01       		.uleb128 0x1
 6995 0ea6 9C       		.byte	0x9c
 6996 0ea7 840F0000 		.4byte	0xf84
 6997 0eab 19       		.uleb128 0x19
 6998 0eac 46070000 		.4byte	.LASF143
 6999 0eb0 01       		.byte	0x1
 7000 0eb1 2707     		.2byte	0x727
 7001 0eb3 39020000 		.4byte	0x239
 7002 0eb7 D3060000 		.4byte	.LLST50
 7003 0ebb 1A       		.uleb128 0x1a
 7004 0ebc 70090000 		.4byte	.LASF141
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 228


 7005 0ec0 01       		.byte	0x1
 7006 0ec1 2907     		.2byte	0x729
 7007 0ec3 35010000 		.4byte	0x135
 7008 0ec7 FF060000 		.4byte	.LLST51
 7009 0ecb 1A       		.uleb128 0x1a
 7010 0ecc D6110000 		.4byte	.LASF99
 7011 0ed0 01       		.byte	0x1
 7012 0ed1 2A07     		.2byte	0x72a
 7013 0ed3 8C0E0000 		.4byte	0xe8c
 7014 0ed7 40070000 		.4byte	.LLST52
 7015 0edb 28       		.uleb128 0x28
 7016 0edc 4B090000 		.4byte	.LASF145
 7017 0ee0 01       		.byte	0x1
 7018 0ee1 2B07     		.2byte	0x72b
 7019 0ee3 40010000 		.4byte	0x140
 7020 0ee7 29       		.uleb128 0x29
 7021 0ee8 9B040000 		.4byte	0x49b
 7022 0eec 04000000 		.4byte	.LBB33
 7023 0ef0 14000000 		.4byte	.LBE33-.LBB33
 7024 0ef4 01       		.byte	0x1
 7025 0ef5 4107     		.2byte	0x741
 7026 0ef7 100F0000 		.4byte	0xf10
 7027 0efb 23       		.uleb128 0x23
 7028 0efc 04000000 		.4byte	.LBB34
 7029 0f00 14000000 		.4byte	.LBE34-.LBB34
 7030 0f04 2A       		.uleb128 0x2a
 7031 0f05 AB040000 		.4byte	0x4ab
 7032 0f09 2A       		.uleb128 0x2a
 7033 0f0a B6040000 		.4byte	0x4b6
 7034 0f0e 00       		.byte	0
 7035 0f0f 00       		.byte	0
 7036 0f10 29       		.uleb128 0x29
 7037 0f11 C2040000 		.4byte	0x4c2
 7038 0f15 78000000 		.4byte	.LBB35
 7039 0f19 04000000 		.4byte	.LBE35-.LBB35
 7040 0f1d 01       		.byte	0x1
 7041 0f1e 6507     		.2byte	0x765
 7042 0f20 2E0F0000 		.4byte	0xf2e
 7043 0f24 2C       		.uleb128 0x2c
 7044 0f25 CE040000 		.4byte	0x4ce
 7045 0f29 6C070000 		.4byte	.LLST53
 7046 0f2d 00       		.byte	0
 7047 0f2e 22       		.uleb128 0x22
 7048 0f2f 1C000000 		.4byte	.LVL150
 7049 0f33 19050000 		.4byte	0x519
 7050 0f37 420F0000 		.4byte	0xf42
 7051 0f3b 1E       		.uleb128 0x1e
 7052 0f3c 01       		.uleb128 0x1
 7053 0f3d 50       		.byte	0x50
 7054 0f3e 02       		.uleb128 0x2
 7055 0f3f 74       		.byte	0x74
 7056 0f40 00       		.sleb128 0
 7057 0f41 00       		.byte	0
 7058 0f42 22       		.uleb128 0x22
 7059 0f43 42000000 		.4byte	.LVL152
 7060 0f47 7D260000 		.4byte	0x267d
 7061 0f4b 560F0000 		.4byte	0xf56
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 229


 7062 0f4f 1E       		.uleb128 0x1e
 7063 0f50 01       		.uleb128 0x1
 7064 0f51 50       		.byte	0x50
 7065 0f52 02       		.uleb128 0x2
 7066 0f53 77       		.byte	0x77
 7067 0f54 00       		.sleb128 0
 7068 0f55 00       		.byte	0
 7069 0f56 22       		.uleb128 0x22
 7070 0f57 66000000 		.4byte	.LVL153
 7071 0f5b 66260000 		.4byte	0x2666
 7072 0f5f 6A0F0000 		.4byte	0xf6a
 7073 0f63 1E       		.uleb128 0x1e
 7074 0f64 01       		.uleb128 0x1
 7075 0f65 51       		.byte	0x51
 7076 0f66 02       		.uleb128 0x2
 7077 0f67 77       		.byte	0x77
 7078 0f68 00       		.sleb128 0
 7079 0f69 00       		.byte	0
 7080 0f6a 1D       		.uleb128 0x1d
 7081 0f6b 72000000 		.4byte	.LVL155
 7082 0f6f 66260000 		.4byte	0x2666
 7083 0f73 1E       		.uleb128 0x1e
 7084 0f74 01       		.uleb128 0x1
 7085 0f75 50       		.byte	0x50
 7086 0f76 05       		.uleb128 0x5
 7087 0f77 03       		.byte	0x3
 7088 0f78 14000000 		.4byte	.LANCHOR0+20
 7089 0f7c 1E       		.uleb128 0x1e
 7090 0f7d 01       		.uleb128 0x1
 7091 0f7e 51       		.byte	0x51
 7092 0f7f 02       		.uleb128 0x2
 7093 0f80 74       		.byte	0x74
 7094 0f81 18       		.sleb128 24
 7095 0f82 00       		.byte	0
 7096 0f83 00       		.byte	0
 7097 0f84 27       		.uleb128 0x27
 7098 0f85 C5020000 		.4byte	.LASF146
 7099 0f89 01       		.byte	0x1
 7100 0f8a 6D07     		.2byte	0x76d
 7101 0f8c 00000000 		.4byte	.LFB83
 7102 0f90 5C000000 		.4byte	.LFE83-.LFB83
 7103 0f94 01       		.uleb128 0x1
 7104 0f95 9C       		.byte	0x9c
 7105 0f96 1C100000 		.4byte	0x101c
 7106 0f9a 1A       		.uleb128 0x1a
 7107 0f9b 8C040000 		.4byte	.LASF98
 7108 0f9f 01       		.byte	0x1
 7109 0fa0 6F07     		.2byte	0x76f
 7110 0fa2 35010000 		.4byte	0x135
 7111 0fa6 7F070000 		.4byte	.LLST54
 7112 0faa 29       		.uleb128 0x29
 7113 0fab DA040000 		.4byte	0x4da
 7114 0faf 1A000000 		.4byte	.LBB37
 7115 0fb3 10000000 		.4byte	.LBE37-.LBB37
 7116 0fb7 01       		.byte	0x1
 7117 0fb8 B507     		.2byte	0x7b5
 7118 0fba CE0F0000 		.4byte	0xfce
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 230


 7119 0fbe 23       		.uleb128 0x23
 7120 0fbf 1A000000 		.4byte	.LBB38
 7121 0fc3 10000000 		.4byte	.LBE38-.LBB38
 7122 0fc7 2A       		.uleb128 0x2a
 7123 0fc8 E6040000 		.4byte	0x4e6
 7124 0fcc 00       		.byte	0
 7125 0fcd 00       		.byte	0
 7126 0fce 22       		.uleb128 0x22
 7127 0fcf 16000000 		.4byte	.LVL159
 7128 0fd3 FE090000 		.4byte	0x9fe
 7129 0fd7 09100000 		.4byte	0x1009
 7130 0fdb 1E       		.uleb128 0x1e
 7131 0fdc 01       		.uleb128 0x1
 7132 0fdd 50       		.byte	0x50
 7133 0fde 05       		.uleb128 0x5
 7134 0fdf 03       		.byte	0x3
 7135 0fe0 00000000 		.4byte	prvIdleTask
 7136 0fe4 1E       		.uleb128 0x1e
 7137 0fe5 01       		.uleb128 0x1
 7138 0fe6 51       		.byte	0x51
 7139 0fe7 05       		.uleb128 0x5
 7140 0fe8 03       		.byte	0x3
 7141 0fe9 00000000 		.4byte	.LC0
 7142 0fed 1E       		.uleb128 0x1e
 7143 0fee 01       		.uleb128 0x1
 7144 0fef 52       		.byte	0x52
 7145 0ff0 02       		.uleb128 0x2
 7146 0ff1 08       		.byte	0x8
 7147 0ff2 64       		.byte	0x64
 7148 0ff3 1E       		.uleb128 0x1e
 7149 0ff4 01       		.uleb128 0x1
 7150 0ff5 53       		.byte	0x53
 7151 0ff6 01       		.uleb128 0x1
 7152 0ff7 30       		.byte	0x30
 7153 0ff8 1E       		.uleb128 0x1e
 7154 0ff9 02       		.uleb128 0x2
 7155 0ffa 7D       		.byte	0x7d
 7156 0ffb 00       		.sleb128 0
 7157 0ffc 01       		.uleb128 0x1
 7158 0ffd 30       		.byte	0x30
 7159 0ffe 1E       		.uleb128 0x1e
 7160 0fff 02       		.uleb128 0x2
 7161 1000 7D       		.byte	0x7d
 7162 1001 04       		.sleb128 4
 7163 1002 05       		.uleb128 0x5
 7164 1003 03       		.byte	0x3
 7165 1004 F4000000 		.4byte	.LANCHOR0+244
 7166 1008 00       		.byte	0
 7167 1009 1C       		.uleb128 0x1c
 7168 100a 42000000 		.4byte	.LVL160
 7169 100e B6260000 		.4byte	0x26b6
 7170 1012 1C       		.uleb128 0x1c
 7171 1013 46000000 		.4byte	.LVL161
 7172 1017 C1260000 		.4byte	0x26c1
 7173 101b 00       		.byte	0
 7174 101c 27       		.uleb128 0x27
 7175 101d 880D0000 		.4byte	.LASF147
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 231


 7176 1021 01       		.byte	0x1
 7177 1022 E507     		.2byte	0x7e5
 7178 1024 00000000 		.4byte	.LFB84
 7179 1028 24000000 		.4byte	.LFE84-.LFB84
 7180 102c 01       		.uleb128 0x1
 7181 102d 9C       		.byte	0x9c
 7182 102e 60100000 		.4byte	0x1060
 7183 1032 29       		.uleb128 0x29
 7184 1033 DA040000 		.4byte	0x4da
 7185 1037 02000000 		.4byte	.LBB39
 7186 103b 10000000 		.4byte	.LBE39-.LBB39
 7187 103f 01       		.byte	0x1
 7188 1040 EA07     		.2byte	0x7ea
 7189 1042 56100000 		.4byte	0x1056
 7190 1046 23       		.uleb128 0x23
 7191 1047 02000000 		.4byte	.LBB40
 7192 104b 10000000 		.4byte	.LBE40-.LBB40
 7193 104f 2A       		.uleb128 0x2a
 7194 1050 E6040000 		.4byte	0x4e6
 7195 1054 00       		.byte	0
 7196 1055 00       		.byte	0
 7197 1056 1C       		.uleb128 0x1c
 7198 1057 1E000000 		.4byte	.LVL162
 7199 105b CC260000 		.4byte	0x26cc
 7200 105f 00       		.byte	0
 7201 1060 2D       		.uleb128 0x2d
 7202 1061 A00A0000 		.4byte	.LASF185
 7203 1065 01       		.byte	0x1
 7204 1066 F007     		.2byte	0x7f0
 7205 1068 00000000 		.4byte	.LFB85
 7206 106c 14000000 		.4byte	.LFE85-.LFB85
 7207 1070 01       		.uleb128 0x1
 7208 1071 9C       		.byte	0x9c
 7209 1072 25       		.uleb128 0x25
 7210 1073 B3020000 		.4byte	.LASF148
 7211 1077 01       		.byte	0x1
 7212 1078 A708     		.2byte	0x8a7
 7213 107a 4B010000 		.4byte	0x14b
 7214 107e 00000000 		.4byte	.LFB87
 7215 1082 0C000000 		.4byte	.LFE87-.LFB87
 7216 1086 01       		.uleb128 0x1
 7217 1087 9C       		.byte	0x9c
 7218 1088 9B100000 		.4byte	0x109b
 7219 108c 20       		.uleb128 0x20
 7220 108d 60070000 		.4byte	.LASF149
 7221 1091 01       		.byte	0x1
 7222 1092 A908     		.2byte	0x8a9
 7223 1094 4B010000 		.4byte	0x14b
 7224 1098 01       		.uleb128 0x1
 7225 1099 50       		.byte	0x50
 7226 109a 00       		.byte	0
 7227 109b 25       		.uleb128 0x25
 7228 109c 6D000000 		.4byte	.LASF150
 7229 10a0 01       		.byte	0x1
 7230 10a1 B608     		.2byte	0x8b6
 7231 10a3 4B010000 		.4byte	0x14b
 7232 10a7 00000000 		.4byte	.LFB88
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 232


 7233 10ab 0C000000 		.4byte	.LFE88-.LFB88
 7234 10af 01       		.uleb128 0x1
 7235 10b0 9C       		.byte	0x9c
 7236 10b1 D1100000 		.4byte	0x10d1
 7237 10b5 20       		.uleb128 0x20
 7238 10b6 8C040000 		.4byte	.LASF98
 7239 10ba 01       		.byte	0x1
 7240 10bb B808     		.2byte	0x8b8
 7241 10bd 4B010000 		.4byte	0x14b
 7242 10c1 01       		.uleb128 0x1
 7243 10c2 50       		.byte	0x50
 7244 10c3 2E       		.uleb128 0x2e
 7245 10c4 4B090000 		.4byte	.LASF145
 7246 10c8 01       		.byte	0x1
 7247 10c9 B908     		.2byte	0x8b9
 7248 10cb 40010000 		.4byte	0x140
 7249 10cf 00       		.byte	0
 7250 10d0 00       		.byte	0
 7251 10d1 2F       		.uleb128 0x2f
 7252 10d2 86010000 		.4byte	.LASF222
 7253 10d6 01       		.byte	0x1
 7254 10d7 D508     		.2byte	0x8d5
 7255 10d9 40010000 		.4byte	0x140
 7256 10dd 00000000 		.4byte	.LFB89
 7257 10e1 0C000000 		.4byte	.LFE89-.LFB89
 7258 10e5 01       		.uleb128 0x1
 7259 10e6 9C       		.byte	0x9c
 7260 10e7 25       		.uleb128 0x25
 7261 10e8 39080000 		.4byte	.LASF151
 7262 10ec 01       		.byte	0x1
 7263 10ed DD08     		.2byte	0x8dd
 7264 10ef B2000000 		.4byte	0xb2
 7265 10f3 00000000 		.4byte	.LFB90
 7266 10f7 14000000 		.4byte	.LFE90-.LFB90
 7267 10fb 01       		.uleb128 0x1
 7268 10fc 9C       		.byte	0x9c
 7269 10fd 20110000 		.4byte	0x1120
 7270 1101 19       		.uleb128 0x19
 7271 1102 840F0000 		.4byte	.LASF152
 7272 1106 01       		.byte	0x1
 7273 1107 DD08     		.2byte	0x8dd
 7274 1109 39020000 		.4byte	0x239
 7275 110d 92070000 		.4byte	.LLST55
 7276 1111 20       		.uleb128 0x20
 7277 1112 D6110000 		.4byte	.LASF99
 7278 1116 01       		.byte	0x1
 7279 1117 DF08     		.2byte	0x8df
 7280 1119 E6050000 		.4byte	0x5e6
 7281 111d 01       		.uleb128 0x1
 7282 111e 53       		.byte	0x53
 7283 111f 00       		.byte	0
 7284 1120 25       		.uleb128 0x25
 7285 1121 2F0D0000 		.4byte	.LASF153
 7286 1125 01       		.byte	0x1
 7287 1126 1D0A     		.2byte	0xa1d
 7288 1128 35010000 		.4byte	0x135
 7289 112c 00000000 		.4byte	.LFB92
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 233


 7290 1130 08010000 		.4byte	.LFE92-.LFB92
 7291 1134 01       		.uleb128 0x1
 7292 1135 9C       		.byte	0x9c
 7293 1136 E0110000 		.4byte	0x11e0
 7294 113a 1A       		.uleb128 0x1a
 7295 113b D6110000 		.4byte	.LASF99
 7296 113f 01       		.byte	0x1
 7297 1140 1F0A     		.2byte	0xa1f
 7298 1142 E6050000 		.4byte	0x5e6
 7299 1146 A5070000 		.4byte	.LLST56
 7300 114a 1A       		.uleb128 0x1a
 7301 114b CB110000 		.4byte	.LASF28
 7302 114f 01       		.byte	0x1
 7303 1150 200A     		.2byte	0xa20
 7304 1152 4B010000 		.4byte	0x14b
 7305 1156 C3070000 		.4byte	.LLST57
 7306 115a 1A       		.uleb128 0x1a
 7307 115b FB0D0000 		.4byte	.LASF154
 7308 115f 01       		.byte	0x1
 7309 1160 210A     		.2byte	0xa21
 7310 1162 35010000 		.4byte	0x135
 7311 1166 D6070000 		.4byte	.LLST58
 7312 116a 30       		.uleb128 0x30
 7313 116b 00000000 		.4byte	.Ldebug_ranges0+0
 7314 116f 1A       		.uleb128 0x1a
 7315 1170 970B0000 		.4byte	.LASF123
 7316 1174 01       		.byte	0x1
 7317 1175 2B0A     		.2byte	0xa2b
 7318 1177 85090000 		.4byte	0x985
 7319 117b 2E080000 		.4byte	.LLST59
 7320 117f 26       		.uleb128 0x26
 7321 1180 1C000000 		.4byte	.LBB42
 7322 1184 1A000000 		.4byte	.LBE42-.LBB42
 7323 1188 A6110000 		.4byte	0x11a6
 7324 118c 1A       		.uleb128 0x1a
 7325 118d 730E0000 		.4byte	.LASF155
 7326 1191 01       		.byte	0x1
 7327 1192 330A     		.2byte	0xa33
 7328 1194 5B0C0000 		.4byte	0xc5b
 7329 1198 4C080000 		.4byte	.LLST60
 7330 119c 1C       		.uleb128 0x1c
 7331 119d 36000000 		.4byte	.LVL173
 7332 11a1 BF050000 		.4byte	0x5bf
 7333 11a5 00       		.byte	0
 7334 11a6 22       		.uleb128 0x22
 7335 11a7 84000000 		.4byte	.LVL180
 7336 11ab 7D260000 		.4byte	0x267d
 7337 11af BA110000 		.4byte	0x11ba
 7338 11b3 1E       		.uleb128 0x1e
 7339 11b4 01       		.uleb128 0x1
 7340 11b5 50       		.byte	0x50
 7341 11b6 02       		.uleb128 0x2
 7342 11b7 76       		.byte	0x76
 7343 11b8 00       		.sleb128 0
 7344 11b9 00       		.byte	0
 7345 11ba 22       		.uleb128 0x22
 7346 11bb 90000000 		.4byte	.LVL181
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 234


 7347 11bf 7D260000 		.4byte	0x267d
 7348 11c3 CE110000 		.4byte	0x11ce
 7349 11c7 1E       		.uleb128 0x1e
 7350 11c8 01       		.uleb128 0x1
 7351 11c9 50       		.byte	0x50
 7352 11ca 02       		.uleb128 0x2
 7353 11cb 74       		.byte	0x74
 7354 11cc 18       		.sleb128 24
 7355 11cd 00       		.byte	0
 7356 11ce 1D       		.uleb128 0x1d
 7357 11cf B6000000 		.4byte	.LVL182
 7358 11d3 66260000 		.4byte	0x2666
 7359 11d7 1E       		.uleb128 0x1e
 7360 11d8 01       		.uleb128 0x1
 7361 11d9 51       		.byte	0x51
 7362 11da 02       		.uleb128 0x2
 7363 11db 76       		.byte	0x76
 7364 11dc 00       		.sleb128 0
 7365 11dd 00       		.byte	0
 7366 11de 00       		.byte	0
 7367 11df 00       		.byte	0
 7368 11e0 25       		.uleb128 0x25
 7369 11e1 3D0B0000 		.4byte	.LASF156
 7370 11e5 01       		.byte	0x1
 7371 11e6 3908     		.2byte	0x839
 7372 11e8 35010000 		.4byte	0x135
 7373 11ec 00000000 		.4byte	.LFB86
 7374 11f0 D8000000 		.4byte	.LFE86-.LFB86
 7375 11f4 01       		.uleb128 0x1
 7376 11f5 9C       		.byte	0x9c
 7377 11f6 99120000 		.4byte	0x1299
 7378 11fa 1A       		.uleb128 0x1a
 7379 11fb D6110000 		.4byte	.LASF99
 7380 11ff 01       		.byte	0x1
 7381 1200 3B08     		.2byte	0x83b
 7382 1202 E6050000 		.4byte	0x5e6
 7383 1206 6E080000 		.4byte	.LLST61
 7384 120a 1A       		.uleb128 0x1a
 7385 120b 3D0E0000 		.4byte	.LASF157
 7386 120f 01       		.byte	0x1
 7387 1210 3C08     		.2byte	0x83c
 7388 1212 35010000 		.4byte	0x135
 7389 1216 BB080000 		.4byte	.LLST62
 7390 121a 26       		.uleb128 0x26
 7391 121b 84000000 		.4byte	.LBB45
 7392 121f 22000000 		.4byte	.LBE45-.LBB45
 7393 1223 41120000 		.4byte	0x1241
 7394 1227 1A       		.uleb128 0x1a
 7395 1228 00000000 		.4byte	.LASF158
 7396 122c 01       		.byte	0x1
 7397 122d 7408     		.2byte	0x874
 7398 122f 40010000 		.4byte	0x140
 7399 1233 FD080000 		.4byte	.LLST63
 7400 1237 1C       		.uleb128 0x1c
 7401 1238 90000000 		.4byte	.LVL200
 7402 123c 20110000 		.4byte	0x1120
 7403 1240 00       		.byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 235


 7404 1241 1C       		.uleb128 0x1c
 7405 1242 06000000 		.4byte	.LVL190
 7406 1246 5B260000 		.4byte	0x265b
 7407 124a 22       		.uleb128 0x22
 7408 124b 34000000 		.4byte	.LVL193
 7409 124f 7D260000 		.4byte	0x267d
 7410 1253 5E120000 		.4byte	0x125e
 7411 1257 1E       		.uleb128 0x1e
 7412 1258 01       		.uleb128 0x1
 7413 1259 50       		.byte	0x50
 7414 125a 02       		.uleb128 0x2
 7415 125b 75       		.byte	0x75
 7416 125c 18       		.sleb128 24
 7417 125d 00       		.byte	0
 7418 125e 22       		.uleb128 0x22
 7419 125f 3C000000 		.4byte	.LVL194
 7420 1263 7D260000 		.4byte	0x267d
 7421 1267 72120000 		.4byte	0x1272
 7422 126b 1E       		.uleb128 0x1e
 7423 126c 01       		.uleb128 0x1
 7424 126d 50       		.byte	0x50
 7425 126e 02       		.uleb128 0x2
 7426 126f 76       		.byte	0x76
 7427 1270 00       		.sleb128 0
 7428 1271 00       		.byte	0
 7429 1272 22       		.uleb128 0x22
 7430 1273 60000000 		.4byte	.LVL195
 7431 1277 66260000 		.4byte	0x2666
 7432 127b 86120000 		.4byte	0x1286
 7433 127f 1E       		.uleb128 0x1e
 7434 1280 01       		.uleb128 0x1
 7435 1281 51       		.byte	0x51
 7436 1282 02       		.uleb128 0x2
 7437 1283 76       		.byte	0x76
 7438 1284 00       		.sleb128 0
 7439 1285 00       		.byte	0
 7440 1286 1C       		.uleb128 0x1c
 7441 1287 84000000 		.4byte	.LVL198
 7442 128b BF050000 		.4byte	0x5bf
 7443 128f 1C       		.uleb128 0x1c
 7444 1290 CC000000 		.4byte	.LVL208
 7445 1294 72260000 		.4byte	0x2672
 7446 1298 00       		.byte	0
 7447 1299 27       		.uleb128 0x27
 7448 129a 780D0000 		.4byte	.LASF159
 7449 129e 01       		.byte	0x1
 7450 129f B404     		.2byte	0x4b4
 7451 12a1 00000000 		.4byte	.LFB73
 7452 12a5 6C000000 		.4byte	.LFE73-.LFB73
 7453 12a9 01       		.uleb128 0x1
 7454 12aa 9C       		.byte	0x9c
 7455 12ab 39130000 		.4byte	0x1339
 7456 12af 19       		.uleb128 0x19
 7457 12b0 E80D0000 		.4byte	.LASF160
 7458 12b4 01       		.byte	0x1
 7459 12b5 B404     		.2byte	0x4b4
 7460 12b7 3F130000 		.4byte	0x133f
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 236


 7461 12bb 33090000 		.4byte	.LLST64
 7462 12bf 19       		.uleb128 0x19
 7463 12c0 730C0000 		.4byte	.LASF161
 7464 12c4 01       		.byte	0x1
 7465 12c5 B404     		.2byte	0x4b4
 7466 12c7 85090000 		.4byte	0x985
 7467 12cb 5F090000 		.4byte	.LLST65
 7468 12cf 1A       		.uleb128 0x1a
 7469 12d0 460A0000 		.4byte	.LASF122
 7470 12d4 01       		.byte	0x1
 7471 12d5 B604     		.2byte	0x4b6
 7472 12d7 4B010000 		.4byte	0x14b
 7473 12db 8B090000 		.4byte	.LLST66
 7474 12df 20       		.uleb128 0x20
 7475 12e0 3D0E0000 		.4byte	.LASF157
 7476 12e4 01       		.byte	0x1
 7477 12e5 B704     		.2byte	0x4b7
 7478 12e7 35010000 		.4byte	0x135
 7479 12eb 01       		.uleb128 0x1
 7480 12ec 50       		.byte	0x50
 7481 12ed 1A       		.uleb128 0x1a
 7482 12ee F80B0000 		.4byte	.LASF162
 7483 12f2 01       		.byte	0x1
 7484 12f3 B704     		.2byte	0x4b7
 7485 12f5 35010000 		.4byte	0x135
 7486 12f9 9E090000 		.4byte	.LLST67
 7487 12fd 31       		.uleb128 0x31
 7488 12fe 20000000 		.4byte	.Ldebug_ranges0+0x20
 7489 1302 26130000 		.4byte	0x1326
 7490 1306 1A       		.uleb128 0x1a
 7491 1307 970B0000 		.4byte	.LASF123
 7492 130b 01       		.byte	0x1
 7493 130c C104     		.2byte	0x4c1
 7494 130e 85090000 		.4byte	0x985
 7495 1312 BD090000 		.4byte	.LLST68
 7496 1316 1D       		.uleb128 0x1d
 7497 1317 4A000000 		.4byte	.LVL217
 7498 131b F7080000 		.4byte	0x8f7
 7499 131f 1E       		.uleb128 0x1e
 7500 1320 01       		.uleb128 0x1
 7501 1321 51       		.byte	0x51
 7502 1322 01       		.uleb128 0x1
 7503 1323 30       		.byte	0x30
 7504 1324 00       		.byte	0
 7505 1325 00       		.byte	0
 7506 1326 1C       		.uleb128 0x1c
 7507 1327 0A000000 		.4byte	.LVL212
 7508 132b 60100000 		.4byte	0x1060
 7509 132f 1C       		.uleb128 0x1c
 7510 1330 4E000000 		.4byte	.LVL218
 7511 1334 E0110000 		.4byte	0x11e0
 7512 1338 00       		.byte	0
 7513 1339 06       		.uleb128 0x6
 7514 133a 04       		.byte	0x4
 7515 133b 4B010000 		.4byte	0x14b
 7516 133f 07       		.uleb128 0x7
 7517 1340 39130000 		.4byte	0x1339
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 237


 7518 1344 27       		.uleb128 0x27
 7519 1345 8A0C0000 		.4byte	.LASF163
 7520 1349 01       		.byte	0x1
 7521 134a 0805     		.2byte	0x508
 7522 134c 00000000 		.4byte	.LFB74
 7523 1350 34000000 		.4byte	.LFE74-.LFB74
 7524 1354 01       		.uleb128 0x1
 7525 1355 9C       		.byte	0x9c
 7526 1356 A6130000 		.4byte	0x13a6
 7527 135a 19       		.uleb128 0x19
 7528 135b 81080000 		.4byte	.LASF164
 7529 135f 01       		.byte	0x1
 7530 1360 0805     		.2byte	0x508
 7531 1362 85090000 		.4byte	0x985
 7532 1366 D0090000 		.4byte	.LLST69
 7533 136a 1A       		.uleb128 0x1a
 7534 136b 3D0E0000 		.4byte	.LASF157
 7535 136f 01       		.byte	0x1
 7536 1370 0A05     		.2byte	0x50a
 7537 1372 35010000 		.4byte	0x135
 7538 1376 070A0000 		.4byte	.LLST70
 7539 137a 1C       		.uleb128 0x1c
 7540 137b 0A000000 		.4byte	.LVL222
 7541 137f 60100000 		.4byte	0x1060
 7542 1383 22       		.uleb128 0x22
 7543 1384 12000000 		.4byte	.LVL223
 7544 1388 F7080000 		.4byte	0x8f7
 7545 138c 9C130000 		.4byte	0x139c
 7546 1390 1E       		.uleb128 0x1e
 7547 1391 01       		.uleb128 0x1
 7548 1392 50       		.byte	0x50
 7549 1393 02       		.uleb128 0x2
 7550 1394 74       		.byte	0x74
 7551 1395 00       		.sleb128 0
 7552 1396 1E       		.uleb128 0x1e
 7553 1397 01       		.uleb128 0x1
 7554 1398 51       		.byte	0x51
 7555 1399 01       		.uleb128 0x1
 7556 139a 30       		.byte	0x30
 7557 139b 00       		.byte	0
 7558 139c 1C       		.uleb128 0x1c
 7559 139d 16000000 		.4byte	.LVL224
 7560 13a1 E0110000 		.4byte	0x11e0
 7561 13a5 00       		.byte	0
 7562 13a6 27       		.uleb128 0x27
 7563 13a7 DA060000 		.4byte	.LASF165
 7564 13ab 01       		.byte	0x1
 7565 13ac 230B     		.2byte	0xb23
 7566 13ae 00000000 		.4byte	.LFB93
 7567 13b2 C4000000 		.4byte	.LFE93-.LFB93
 7568 13b6 01       		.uleb128 0x1
 7569 13b7 9C       		.byte	0x9c
 7570 13b8 65140000 		.4byte	0x1465
 7571 13bc 26       		.uleb128 0x26
 7572 13bd 3A000000 		.4byte	.LBB49
 7573 13c1 36000000 		.4byte	.LBE49-.LBB49
 7574 13c5 F4130000 		.4byte	0x13f4
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 238


 7575 13c9 1A       		.uleb128 0x1a
 7576 13ca 6E060000 		.4byte	.LASF166
 7577 13ce 01       		.byte	0x1
 7578 13cf 4C0B     		.2byte	0xb4c
 7579 13d1 6B140000 		.4byte	0x146b
 7580 13d5 3D0A0000 		.4byte	.LLST71
 7581 13d9 32       		.uleb128 0x32
 7582 13da CD060000 		.4byte	.LASF167
 7583 13de 01       		.byte	0x1
 7584 13df 4C0B     		.2byte	0xb4c
 7585 13e1 3C070000 		.4byte	0x73c
 7586 13e5 A5CB96AD 		.sleb128 -1515870811
 7586      7A
 7587 13ea 1C       		.uleb128 0x1c
 7588 13eb 70000000 		.4byte	.LVL230
 7589 13ef D7260000 		.4byte	0x26d7
 7590 13f3 00       		.byte	0
 7591 13f4 26       		.uleb128 0x26
 7592 13f5 70000000 		.4byte	.LBB50
 7593 13f9 54000000 		.4byte	.LBE50-.LBB50
 7594 13fd 5B140000 		.4byte	0x145b
 7595 1401 1A       		.uleb128 0x1a
 7596 1402 A40C0000 		.4byte	.LASF168
 7597 1406 01       		.byte	0x1
 7598 1407 500B     		.2byte	0xb50
 7599 1409 40010000 		.4byte	0x140
 7600 140d 500A0000 		.4byte	.LLST72
 7601 1411 29       		.uleb128 0x29
 7602 1412 F2040000 		.4byte	0x4f2
 7603 1416 76000000 		.4byte	.LBB51
 7604 141a 06000000 		.4byte	.LBE51-.LBB51
 7605 141e 01       		.byte	0x1
 7606 141f 500B     		.2byte	0xb50
 7607 1421 40140000 		.4byte	0x1440
 7608 1425 2C       		.uleb128 0x2c
 7609 1426 02050000 		.4byte	0x502
 7610 142a 630A0000 		.4byte	.LLST73
 7611 142e 23       		.uleb128 0x23
 7612 142f 76000000 		.4byte	.LBB52
 7613 1433 06000000 		.4byte	.LBE52-.LBB52
 7614 1437 33       		.uleb128 0x33
 7615 1438 0D050000 		.4byte	0x50d
 7616 143c 01       		.uleb128 0x1
 7617 143d 53       		.byte	0x53
 7618 143e 00       		.byte	0
 7619 143f 00       		.byte	0
 7620 1440 23       		.uleb128 0x23
 7621 1441 80000000 		.4byte	.LBB53
 7622 1445 44000000 		.4byte	.LBE53-.LBB53
 7623 1449 1A       		.uleb128 0x1a
 7624 144a 0E070000 		.4byte	.LASF169
 7625 144e 01       		.byte	0x1
 7626 144f 500B     		.2byte	0xb50
 7627 1451 70140000 		.4byte	0x1470
 7628 1455 760A0000 		.4byte	.LLST74
 7629 1459 00       		.byte	0
 7630 145a 00       		.byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 239


 7631 145b 1C       		.uleb128 0x1c
 7632 145c 20000000 		.4byte	.LVL227
 7633 1460 E3260000 		.4byte	0x26e3
 7634 1464 00       		.byte	0
 7635 1465 06       		.uleb128 0x6
 7636 1466 04       		.byte	0x4
 7637 1467 3C070000 		.4byte	0x73c
 7638 146b 07       		.uleb128 0x7
 7639 146c 65140000 		.4byte	0x1465
 7640 1470 07       		.uleb128 0x7
 7641 1471 5B0C0000 		.4byte	0xc5b
 7642 1475 27       		.uleb128 0x27
 7643 1476 280C0000 		.4byte	.LASF170
 7644 147a 01       		.byte	0x1
 7645 147b 5E06     		.2byte	0x65e
 7646 147d 00000000 		.4byte	.LFB79
 7647 1481 C0000000 		.4byte	.LFE79-.LFB79
 7648 1485 01       		.uleb128 0x1
 7649 1486 9C       		.byte	0x9c
 7650 1487 27150000 		.4byte	0x1527
 7651 148b 19       		.uleb128 0x19
 7652 148c CE010000 		.4byte	.LASF171
 7653 1490 01       		.byte	0x1
 7654 1491 5E06     		.2byte	0x65e
 7655 1493 39020000 		.4byte	0x239
 7656 1497 930A0000 		.4byte	.LLST75
 7657 149b 1A       		.uleb128 0x1a
 7658 149c D6110000 		.4byte	.LASF99
 7659 14a0 01       		.byte	0x1
 7660 14a1 6006     		.2byte	0x660
 7661 14a3 E6050000 		.4byte	0x5e6
 7662 14a7 B10A0000 		.4byte	.LLST76
 7663 14ab 1C       		.uleb128 0x1c
 7664 14ac 08000000 		.4byte	.LVL236
 7665 14b0 5B260000 		.4byte	0x265b
 7666 14b4 22       		.uleb128 0x22
 7667 14b5 18000000 		.4byte	.LVL238
 7668 14b9 7D260000 		.4byte	0x267d
 7669 14bd C8140000 		.4byte	0x14c8
 7670 14c1 1E       		.uleb128 0x1e
 7671 14c2 01       		.uleb128 0x1
 7672 14c3 50       		.byte	0x50
 7673 14c4 02       		.uleb128 0x2
 7674 14c5 75       		.byte	0x75
 7675 14c6 00       		.sleb128 0
 7676 14c7 00       		.byte	0
 7677 14c8 22       		.uleb128 0x22
 7678 14c9 48000000 		.4byte	.LVL239
 7679 14cd 7D260000 		.4byte	0x267d
 7680 14d1 DC140000 		.4byte	0x14dc
 7681 14d5 1E       		.uleb128 0x1e
 7682 14d6 01       		.uleb128 0x1
 7683 14d7 50       		.byte	0x50
 7684 14d8 02       		.uleb128 0x2
 7685 14d9 74       		.byte	0x74
 7686 14da 18       		.sleb128 24
 7687 14db 00       		.byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 240


 7688 14dc 22       		.uleb128 0x22
 7689 14dd 50000000 		.4byte	.LVL240
 7690 14e1 66260000 		.4byte	0x2666
 7691 14e5 F9140000 		.4byte	0x14f9
 7692 14e9 1E       		.uleb128 0x1e
 7693 14ea 01       		.uleb128 0x1
 7694 14eb 50       		.byte	0x50
 7695 14ec 05       		.uleb128 0x5
 7696 14ed 03       		.byte	0x3
 7697 14ee 00000000 		.4byte	.LANCHOR0
 7698 14f2 1E       		.uleb128 0x1e
 7699 14f3 01       		.uleb128 0x1
 7700 14f4 51       		.byte	0x51
 7701 14f5 02       		.uleb128 0x2
 7702 14f6 75       		.byte	0x75
 7703 14f7 00       		.sleb128 0
 7704 14f8 00       		.byte	0
 7705 14f9 1C       		.uleb128 0x1c
 7706 14fa 64000000 		.4byte	.LVL241
 7707 14fe 72260000 		.4byte	0x2672
 7708 1502 1C       		.uleb128 0x1c
 7709 1503 70000000 		.4byte	.LVL242
 7710 1507 5B260000 		.4byte	0x265b
 7711 150b 1C       		.uleb128 0x1c
 7712 150c 74000000 		.4byte	.LVL243
 7713 1510 BF050000 		.4byte	0x5bf
 7714 1514 1C       		.uleb128 0x1c
 7715 1515 78000000 		.4byte	.LVL244
 7716 1519 72260000 		.4byte	0x2672
 7717 151d 1C       		.uleb128 0x1c
 7718 151e B6000000 		.4byte	.LVL247
 7719 1522 A6130000 		.4byte	0x13a6
 7720 1526 00       		.byte	0
 7721 1527 27       		.uleb128 0x27
 7722 1528 E0080000 		.4byte	.LASF172
 7723 152c 01       		.byte	0x1
 7724 152d 5E0B     		.2byte	0xb5e
 7725 152f 00000000 		.4byte	.LFB94
 7726 1533 20000000 		.4byte	.LFE94-.LFB94
 7727 1537 01       		.uleb128 0x1
 7728 1538 9C       		.byte	0x9c
 7729 1539 88150000 		.4byte	0x1588
 7730 153d 19       		.uleb128 0x19
 7731 153e BD070000 		.4byte	.LASF173
 7732 1542 01       		.byte	0x1
 7733 1543 5E0B     		.2byte	0xb5e
 7734 1545 70140000 		.4byte	0x1470
 7735 1549 C40A0000 		.4byte	.LLST77
 7736 154d 19       		.uleb128 0x19
 7737 154e 300B0000 		.4byte	.LASF120
 7738 1552 01       		.byte	0x1
 7739 1553 5E0B     		.2byte	0xb5e
 7740 1555 85090000 		.4byte	0x985
 7741 1559 E50A0000 		.4byte	.LLST78
 7742 155d 22       		.uleb128 0x22
 7743 155e 10000000 		.4byte	.LVL251
 7744 1562 89260000 		.4byte	0x2689
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 241


 7745 1566 72150000 		.4byte	0x1572
 7746 156a 1E       		.uleb128 0x1e
 7747 156b 01       		.uleb128 0x1
 7748 156c 50       		.byte	0x50
 7749 156d 03       		.uleb128 0x3
 7750 156e F3       		.byte	0xf3
 7751 156f 01       		.uleb128 0x1
 7752 1570 50       		.byte	0x50
 7753 1571 00       		.byte	0
 7754 1572 1D       		.uleb128 0x1d
 7755 1573 18000000 		.4byte	.LVL252
 7756 1577 F7080000 		.4byte	0x8f7
 7757 157b 1E       		.uleb128 0x1e
 7758 157c 01       		.uleb128 0x1
 7759 157d 50       		.byte	0x50
 7760 157e 02       		.uleb128 0x2
 7761 157f 74       		.byte	0x74
 7762 1580 00       		.sleb128 0
 7763 1581 1E       		.uleb128 0x1e
 7764 1582 01       		.uleb128 0x1
 7765 1583 51       		.byte	0x51
 7766 1584 01       		.uleb128 0x1
 7767 1585 31       		.byte	0x31
 7768 1586 00       		.byte	0
 7769 1587 00       		.byte	0
 7770 1588 27       		.uleb128 0x27
 7771 1589 15050000 		.4byte	.LASF174
 7772 158d 01       		.byte	0x1
 7773 158e 6F0B     		.2byte	0xb6f
 7774 1590 00000000 		.4byte	.LFB95
 7775 1594 28000000 		.4byte	.LFE95-.LFB95
 7776 1598 01       		.uleb128 0x1
 7777 1599 9C       		.byte	0x9c
 7778 159a F9150000 		.4byte	0x15f9
 7779 159e 19       		.uleb128 0x19
 7780 159f BD070000 		.4byte	.LASF173
 7781 15a3 01       		.byte	0x1
 7782 15a4 6F0B     		.2byte	0xb6f
 7783 15a6 5B0C0000 		.4byte	0xc5b
 7784 15aa 110B0000 		.4byte	.LLST79
 7785 15ae 19       		.uleb128 0x19
 7786 15af CB110000 		.4byte	.LASF28
 7787 15b3 01       		.byte	0x1
 7788 15b4 6F0B     		.2byte	0xb6f
 7789 15b6 85090000 		.4byte	0x985
 7790 15ba 320B0000 		.4byte	.LLST80
 7791 15be 19       		.uleb128 0x19
 7792 15bf 300B0000 		.4byte	.LASF120
 7793 15c3 01       		.byte	0x1
 7794 15c4 6F0B     		.2byte	0xb6f
 7795 15c6 85090000 		.4byte	0x985
 7796 15ca 530B0000 		.4byte	.LLST81
 7797 15ce 22       		.uleb128 0x22
 7798 15cf 1A000000 		.4byte	.LVL257
 7799 15d3 66260000 		.4byte	0x2666
 7800 15d7 E3150000 		.4byte	0x15e3
 7801 15db 1E       		.uleb128 0x1e
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 242


 7802 15dc 01       		.uleb128 0x1
 7803 15dd 50       		.byte	0x50
 7804 15de 03       		.uleb128 0x3
 7805 15df F3       		.byte	0xf3
 7806 15e0 01       		.uleb128 0x1
 7807 15e1 50       		.byte	0x50
 7808 15e2 00       		.byte	0
 7809 15e3 1D       		.uleb128 0x1d
 7810 15e4 22000000 		.4byte	.LVL258
 7811 15e8 F7080000 		.4byte	0x8f7
 7812 15ec 1E       		.uleb128 0x1e
 7813 15ed 01       		.uleb128 0x1
 7814 15ee 50       		.byte	0x50
 7815 15ef 02       		.uleb128 0x2
 7816 15f0 74       		.byte	0x74
 7817 15f1 00       		.sleb128 0
 7818 15f2 1E       		.uleb128 0x1e
 7819 15f3 01       		.uleb128 0x1
 7820 15f4 51       		.byte	0x51
 7821 15f5 01       		.uleb128 0x1
 7822 15f6 31       		.byte	0x31
 7823 15f7 00       		.byte	0
 7824 15f8 00       		.byte	0
 7825 15f9 25       		.uleb128 0x25
 7826 15fa 580B0000 		.4byte	.LASF175
 7827 15fe 01       		.byte	0x1
 7828 15ff A80B     		.2byte	0xba8
 7829 1601 35010000 		.4byte	0x135
 7830 1605 00000000 		.4byte	.LFB96
 7831 1609 74000000 		.4byte	.LFE96-.LFB96
 7832 160d 01       		.uleb128 0x1
 7833 160e 9C       		.byte	0x9c
 7834 160f 99160000 		.4byte	0x1699
 7835 1613 19       		.uleb128 0x19
 7836 1614 BD070000 		.4byte	.LASF173
 7837 1618 01       		.byte	0x1
 7838 1619 A80B     		.2byte	0xba8
 7839 161b A4160000 		.4byte	0x16a4
 7840 161f 7F0B0000 		.4byte	.LLST82
 7841 1623 1A       		.uleb128 0x1a
 7842 1624 CB0A0000 		.4byte	.LASF176
 7843 1628 01       		.byte	0x1
 7844 1629 AA0B     		.2byte	0xbaa
 7845 162b E6050000 		.4byte	0x5e6
 7846 162f A00B0000 		.4byte	.LLST83
 7847 1633 1A       		.uleb128 0x1a
 7848 1634 8C040000 		.4byte	.LASF98
 7849 1638 01       		.byte	0x1
 7850 1639 AB0B     		.2byte	0xbab
 7851 163b 35010000 		.4byte	0x135
 7852 163f B30B0000 		.4byte	.LLST84
 7853 1643 22       		.uleb128 0x22
 7854 1644 10000000 		.4byte	.LVL263
 7855 1648 7D260000 		.4byte	0x267d
 7856 164c 57160000 		.4byte	0x1657
 7857 1650 1E       		.uleb128 0x1e
 7858 1651 01       		.uleb128 0x1
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 243


 7859 1652 50       		.byte	0x50
 7860 1653 02       		.uleb128 0x2
 7861 1654 75       		.byte	0x75
 7862 1655 00       		.sleb128 0
 7863 1656 00       		.byte	0
 7864 1657 22       		.uleb128 0x22
 7865 1658 20000000 		.4byte	.LVL264
 7866 165c 7D260000 		.4byte	0x267d
 7867 1660 6B160000 		.4byte	0x166b
 7868 1664 1E       		.uleb128 0x1e
 7869 1665 01       		.uleb128 0x1
 7870 1666 50       		.byte	0x50
 7871 1667 02       		.uleb128 0x2
 7872 1668 75       		.byte	0x75
 7873 1669 00       		.sleb128 0
 7874 166a 00       		.byte	0
 7875 166b 22       		.uleb128 0x22
 7876 166c 44000000 		.4byte	.LVL265
 7877 1670 66260000 		.4byte	0x2666
 7878 1674 7F160000 		.4byte	0x167f
 7879 1678 1E       		.uleb128 0x1e
 7880 1679 01       		.uleb128 0x1
 7881 167a 51       		.byte	0x51
 7882 167b 02       		.uleb128 0x2
 7883 167c 75       		.byte	0x75
 7884 167d 00       		.sleb128 0
 7885 167e 00       		.byte	0
 7886 167f 1D       		.uleb128 0x1d
 7887 1680 4E000000 		.4byte	.LVL266
 7888 1684 66260000 		.4byte	0x2666
 7889 1688 1E       		.uleb128 0x1e
 7890 1689 01       		.uleb128 0x1
 7891 168a 50       		.byte	0x50
 7892 168b 05       		.uleb128 0x5
 7893 168c 03       		.byte	0x3
 7894 168d 14000000 		.4byte	.LANCHOR0+20
 7895 1691 1E       		.uleb128 0x1e
 7896 1692 01       		.uleb128 0x1
 7897 1693 51       		.byte	0x51
 7898 1694 02       		.uleb128 0x2
 7899 1695 75       		.byte	0x75
 7900 1696 00       		.sleb128 0
 7901 1697 00       		.byte	0
 7902 1698 00       		.byte	0
 7903 1699 06       		.uleb128 0x6
 7904 169a 04       		.byte	0x4
 7905 169b 9F160000 		.4byte	0x169f
 7906 169f 07       		.uleb128 0x7
 7907 16a0 2E020000 		.4byte	0x22e
 7908 16a4 07       		.uleb128 0x7
 7909 16a5 99160000 		.4byte	0x1699
 7910 16a9 27       		.uleb128 0x27
 7911 16aa E40F0000 		.4byte	.LASF177
 7912 16ae 01       		.byte	0x1
 7913 16af EC0B     		.2byte	0xbec
 7914 16b1 00000000 		.4byte	.LFB97
 7915 16b5 54000000 		.4byte	.LFE97-.LFB97
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 244


 7916 16b9 01       		.uleb128 0x1
 7917 16ba 9C       		.byte	0x9c
 7918 16bb 29170000 		.4byte	0x1729
 7919 16bf 19       		.uleb128 0x19
 7920 16c0 92090000 		.4byte	.LASF178
 7921 16c4 01       		.byte	0x1
 7922 16c5 EC0B     		.2byte	0xbec
 7923 16c7 28020000 		.4byte	0x228
 7924 16cb D20B0000 		.4byte	.LLST85
 7925 16cf 19       		.uleb128 0x19
 7926 16d0 CB110000 		.4byte	.LASF28
 7927 16d4 01       		.byte	0x1
 7928 16d5 EC0B     		.2byte	0xbec
 7929 16d7 85090000 		.4byte	0x985
 7930 16db F30B0000 		.4byte	.LLST86
 7931 16df 1A       		.uleb128 0x1a
 7932 16e0 CB0A0000 		.4byte	.LASF176
 7933 16e4 01       		.byte	0x1
 7934 16e5 EE0B     		.2byte	0xbee
 7935 16e7 E6050000 		.4byte	0x5e6
 7936 16eb 140C0000 		.4byte	.LLST87
 7937 16ef 22       		.uleb128 0x22
 7938 16f0 0E000000 		.4byte	.LVL274
 7939 16f4 7D260000 		.4byte	0x267d
 7940 16f8 04170000 		.4byte	0x1704
 7941 16fc 1E       		.uleb128 0x1e
 7942 16fd 01       		.uleb128 0x1
 7943 16fe 50       		.byte	0x50
 7944 16ff 03       		.uleb128 0x3
 7945 1700 F3       		.byte	0xf3
 7946 1701 01       		.uleb128 0x1
 7947 1702 50       		.byte	0x50
 7948 1703 00       		.byte	0
 7949 1704 22       		.uleb128 0x22
 7950 1705 16000000 		.4byte	.LVL275
 7951 1709 7D260000 		.4byte	0x267d
 7952 170d 18170000 		.4byte	0x1718
 7953 1711 1E       		.uleb128 0x1e
 7954 1712 01       		.uleb128 0x1
 7955 1713 50       		.byte	0x50
 7956 1714 02       		.uleb128 0x2
 7957 1715 76       		.byte	0x76
 7958 1716 00       		.sleb128 0
 7959 1717 00       		.byte	0
 7960 1718 1D       		.uleb128 0x1d
 7961 1719 3C000000 		.4byte	.LVL276
 7962 171d 66260000 		.4byte	0x2666
 7963 1721 1E       		.uleb128 0x1e
 7964 1722 01       		.uleb128 0x1
 7965 1723 51       		.byte	0x51
 7966 1724 02       		.uleb128 0x2
 7967 1725 76       		.byte	0x76
 7968 1726 00       		.sleb128 0
 7969 1727 00       		.byte	0
 7970 1728 00       		.byte	0
 7971 1729 27       		.uleb128 0x27
 7972 172a 17080000 		.4byte	.LASF179
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 245


 7973 172e 01       		.byte	0x1
 7974 172f 0E0C     		.2byte	0xc0e
 7975 1731 00000000 		.4byte	.LFB98
 7976 1735 20000000 		.4byte	.LFE98-.LFB98
 7977 1739 01       		.uleb128 0x1
 7978 173a 9C       		.byte	0x9c
 7979 173b 62170000 		.4byte	0x1762
 7980 173f 19       		.uleb128 0x19
 7981 1740 AC070000 		.4byte	.LASF180
 7982 1744 01       		.byte	0x1
 7983 1745 0E0C     		.2byte	0xc0e
 7984 1747 68170000 		.4byte	0x1768
 7985 174b 270C0000 		.4byte	.LLST88
 7986 174f 1C       		.uleb128 0x1c
 7987 1750 08000000 		.4byte	.LVL279
 7988 1754 5B260000 		.4byte	0x265b
 7989 1758 1C       		.uleb128 0x1c
 7990 1759 1A000000 		.4byte	.LVL280
 7991 175d 72260000 		.4byte	0x2672
 7992 1761 00       		.byte	0
 7993 1762 06       		.uleb128 0x6
 7994 1763 04       		.byte	0x4
 7995 1764 DB020000 		.4byte	0x2db
 7996 1768 07       		.uleb128 0x7
 7997 1769 62170000 		.4byte	0x1762
 7998 176d 27       		.uleb128 0x27
 7999 176e 2D000000 		.4byte	.LASF181
 8000 1772 01       		.byte	0x1
 8001 1773 1A0C     		.2byte	0xc1a
 8002 1775 00000000 		.4byte	.LFB99
 8003 1779 14000000 		.4byte	.LFE99-.LFB99
 8004 177d 01       		.uleb128 0x1
 8005 177e 9C       		.byte	0x9c
 8006 177f 92170000 		.4byte	0x1792
 8007 1783 1F       		.uleb128 0x1f
 8008 1784 AC070000 		.4byte	.LASF180
 8009 1788 01       		.byte	0x1
 8010 1789 1A0C     		.2byte	0xc1a
 8011 178b 68170000 		.4byte	0x1768
 8012 178f 01       		.uleb128 0x1
 8013 1790 50       		.byte	0x50
 8014 1791 00       		.byte	0
 8015 1792 25       		.uleb128 0x25
 8016 1793 6C080000 		.4byte	.LASF182
 8017 1797 01       		.byte	0x1
 8018 1798 220C     		.2byte	0xc22
 8019 179a 35010000 		.4byte	0x135
 8020 179e 00000000 		.4byte	.LFB100
 8021 17a2 58000000 		.4byte	.LFE100-.LFB100
 8022 17a6 01       		.uleb128 0x1
 8023 17a7 9C       		.byte	0x9c
 8024 17a8 2D180000 		.4byte	0x182d
 8025 17ac 19       		.uleb128 0x19
 8026 17ad AC070000 		.4byte	.LASF180
 8027 17b1 01       		.byte	0x1
 8028 17b2 220C     		.2byte	0xc22
 8029 17b4 68170000 		.4byte	0x1768
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 246


 8030 17b8 530C0000 		.4byte	.LLST89
 8031 17bc 19       		.uleb128 0x19
 8032 17bd 89030000 		.4byte	.LASF183
 8033 17c1 01       		.byte	0x1
 8034 17c2 220C     		.2byte	0xc22
 8035 17c4 3F130000 		.4byte	0x133f
 8036 17c8 CA0C0000 		.4byte	.LLST90
 8037 17cc 1A       		.uleb128 0x1a
 8038 17cd 8C040000 		.4byte	.LASF98
 8039 17d1 01       		.byte	0x1
 8040 17d2 240C     		.2byte	0xc24
 8041 17d4 35010000 		.4byte	0x135
 8042 17d8 F60C0000 		.4byte	.LLST91
 8043 17dc 26       		.uleb128 0x26
 8044 17dd 0A000000 		.4byte	.LBB54
 8045 17e1 42000000 		.4byte	.LBE54-.LBB54
 8046 17e5 1A180000 		.4byte	0x181a
 8047 17e9 1A       		.uleb128 0x1a
 8048 17ea 970B0000 		.4byte	.LASF123
 8049 17ee 01       		.byte	0x1
 8050 17ef 2C0C     		.2byte	0xc2c
 8051 17f1 85090000 		.4byte	0x985
 8052 17f5 2C0D0000 		.4byte	.LLST92
 8053 17f9 1A       		.uleb128 0x1a
 8054 17fa 540F0000 		.4byte	.LASF184
 8055 17fe 01       		.byte	0x1
 8056 17ff 2D0C     		.2byte	0xc2d
 8057 1801 85090000 		.4byte	0x985
 8058 1805 4A0D0000 		.4byte	.LLST93
 8059 1809 1D       		.uleb128 0x1d
 8060 180a 3A000000 		.4byte	.LVL288
 8061 180e 6D170000 		.4byte	0x176d
 8062 1812 1E       		.uleb128 0x1e
 8063 1813 01       		.uleb128 0x1
 8064 1814 50       		.byte	0x50
 8065 1815 02       		.uleb128 0x2
 8066 1816 74       		.byte	0x74
 8067 1817 00       		.sleb128 0
 8068 1818 00       		.byte	0
 8069 1819 00       		.byte	0
 8070 181a 1C       		.uleb128 0x1c
 8071 181b 0A000000 		.4byte	.LVL284
 8072 181f 5B260000 		.4byte	0x265b
 8073 1823 1C       		.uleb128 0x1c
 8074 1824 50000000 		.4byte	.LVL297
 8075 1828 72260000 		.4byte	0x2672
 8076 182c 00       		.byte	0
 8077 182d 2D       		.uleb128 0x2d
 8078 182e DB070000 		.4byte	.LASF186
 8079 1832 01       		.byte	0x1
 8080 1833 610C     		.2byte	0xc61
 8081 1835 00000000 		.4byte	.LFB101
 8082 1839 10000000 		.4byte	.LFE101-.LFB101
 8083 183d 01       		.uleb128 0x1
 8084 183e 9C       		.byte	0x9c
 8085 183f 25       		.uleb128 0x25
 8086 1840 1B040000 		.4byte	.LASF187
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 247


 8087 1844 01       		.byte	0x1
 8088 1845 690C     		.2byte	0xc69
 8089 1847 40010000 		.4byte	0x140
 8090 184b 00000000 		.4byte	.LFB102
 8091 184f 0A000000 		.4byte	.LFE102-.LFB102
 8092 1853 01       		.uleb128 0x1
 8093 1854 9C       		.byte	0x9c
 8094 1855 8A180000 		.4byte	0x188a
 8095 1859 19       		.uleb128 0x19
 8096 185a DD010000 		.4byte	.LASF102
 8097 185e 01       		.byte	0x1
 8098 185f 690C     		.2byte	0xc69
 8099 1861 39020000 		.4byte	0x239
 8100 1865 780D0000 		.4byte	.LLST94
 8101 1869 1A       		.uleb128 0x1a
 8102 186a E3010000 		.4byte	.LASF133
 8103 186e 01       		.byte	0x1
 8104 186f 6B0C     		.2byte	0xc6b
 8105 1871 40010000 		.4byte	0x140
 8106 1875 B20D0000 		.4byte	.LLST95
 8107 1879 1A       		.uleb128 0x1a
 8108 187a D6110000 		.4byte	.LASF99
 8109 187e 01       		.byte	0x1
 8110 187f 6C0C     		.2byte	0xc6c
 8111 1881 E6050000 		.4byte	0x5e6
 8112 1885 D00D0000 		.4byte	.LLST96
 8113 1889 00       		.byte	0
 8114 188a 27       		.uleb128 0x27
 8115 188b F6080000 		.4byte	.LASF188
 8116 188f 01       		.byte	0x1
 8117 1890 800C     		.2byte	0xc80
 8118 1892 00000000 		.4byte	.LFB103
 8119 1896 06000000 		.4byte	.LFE103-.LFB103
 8120 189a 01       		.uleb128 0x1
 8121 189b 9C       		.byte	0x9c
 8122 189c CD180000 		.4byte	0x18cd
 8123 18a0 1F       		.uleb128 0x1f
 8124 18a1 DD010000 		.4byte	.LASF102
 8125 18a5 01       		.byte	0x1
 8126 18a6 800C     		.2byte	0xc80
 8127 18a8 39020000 		.4byte	0x239
 8128 18ac 01       		.uleb128 0x1
 8129 18ad 50       		.byte	0x50
 8130 18ae 1F       		.uleb128 0x1f
 8131 18af 710B0000 		.4byte	.LASF189
 8132 18b3 01       		.byte	0x1
 8133 18b4 800C     		.2byte	0xc80
 8134 18b6 CD180000 		.4byte	0x18cd
 8135 18ba 01       		.uleb128 0x1
 8136 18bb 51       		.byte	0x51
 8137 18bc 1A       		.uleb128 0x1a
 8138 18bd D6110000 		.4byte	.LASF99
 8139 18c1 01       		.byte	0x1
 8140 18c2 820C     		.2byte	0xc82
 8141 18c4 E6050000 		.4byte	0x5e6
 8142 18c8 F10D0000 		.4byte	.LLST97
 8143 18cc 00       		.byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 248


 8144 18cd 07       		.uleb128 0x7
 8145 18ce 40010000 		.4byte	0x140
 8146 18d2 27       		.uleb128 0x27
 8147 18d3 95110000 		.4byte	.LASF190
 8148 18d7 01       		.byte	0x1
 8149 18d8 AB0D     		.2byte	0xdab
 8150 18da 00000000 		.4byte	.LFB107
 8151 18de 78000000 		.4byte	.LFE107-.LFB107
 8152 18e2 01       		.uleb128 0x1
 8153 18e3 9C       		.byte	0x9c
 8154 18e4 68190000 		.4byte	0x1968
 8155 18e8 19       		.uleb128 0x19
 8156 18e9 DD010000 		.4byte	.LASF102
 8157 18ed 01       		.byte	0x1
 8158 18ee AB0D     		.2byte	0xdab
 8159 18f0 39020000 		.4byte	0x239
 8160 18f4 040E0000 		.4byte	.LLST98
 8161 18f8 19       		.uleb128 0x19
 8162 18f9 97030000 		.4byte	.LASF191
 8163 18fd 01       		.byte	0x1
 8164 18fe AB0D     		.2byte	0xdab
 8165 1900 68190000 		.4byte	0x1968
 8166 1904 170E0000 		.4byte	.LLST99
 8167 1908 19       		.uleb128 0x19
 8168 1909 DF090000 		.4byte	.LASF192
 8169 190d 01       		.byte	0x1
 8170 190e AB0D     		.2byte	0xdab
 8171 1910 35010000 		.4byte	0x135
 8172 1914 590E0000 		.4byte	.LLST100
 8173 1918 19       		.uleb128 0x19
 8174 1919 C6060000 		.4byte	.LASF193
 8175 191d 01       		.byte	0x1
 8176 191e AB0D     		.2byte	0xdab
 8177 1920 75020000 		.4byte	0x275
 8178 1924 850E0000 		.4byte	.LLST101
 8179 1928 1A       		.uleb128 0x1a
 8180 1929 D6110000 		.4byte	.LASF99
 8181 192d 01       		.byte	0x1
 8182 192e AD0D     		.2byte	0xdad
 8183 1930 E6050000 		.4byte	0x5e6
 8184 1934 D80E0000 		.4byte	.LLST102
 8185 1938 1C       		.uleb128 0x1c
 8186 1939 4A000000 		.4byte	.LVL312
 8187 193d 60100000 		.4byte	0x1060
 8188 1941 1C       		.uleb128 0x1c
 8189 1942 56000000 		.4byte	.LVL313
 8190 1946 E0110000 		.4byte	0x11e0
 8191 194a 22       		.uleb128 0x22
 8192 194b 5E000000 		.4byte	.LVL315
 8193 194f F00B0000 		.4byte	0xbf0
 8194 1953 5E190000 		.4byte	0x195e
 8195 1957 1E       		.uleb128 0x1e
 8196 1958 01       		.uleb128 0x1
 8197 1959 50       		.byte	0x50
 8198 195a 02       		.uleb128 0x2
 8199 195b 75       		.byte	0x75
 8200 195c 00       		.sleb128 0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 249


 8201 195d 00       		.byte	0
 8202 195e 1C       		.uleb128 0x1c
 8203 195f 68000000 		.4byte	.LVL316
 8204 1963 79050000 		.4byte	0x579
 8205 1967 00       		.byte	0
 8206 1968 06       		.uleb128 0x6
 8207 1969 04       		.byte	0x4
 8208 196a A6030000 		.4byte	0x3a6
 8209 196e 18       		.uleb128 0x18
 8210 196f 560E0000 		.4byte	.LASF194
 8211 1973 01       		.byte	0x1
 8212 1974 0B0E     		.2byte	0xe0b
 8213 1976 40010000 		.4byte	0x140
 8214 197a 00000000 		.4byte	.LFB108
 8215 197e 5C000000 		.4byte	.LFE108-.LFB108
 8216 1982 01       		.uleb128 0x1
 8217 1983 9C       		.byte	0x9c
 8218 1984 501A0000 		.4byte	0x1a50
 8219 1988 19       		.uleb128 0x19
 8220 1989 B20C0000 		.4byte	.LASF195
 8221 198d 01       		.byte	0x1
 8222 198e 0B0E     		.2byte	0xe0b
 8223 1990 68190000 		.4byte	0x1968
 8224 1994 EB0E0000 		.4byte	.LLST103
 8225 1998 19       		.uleb128 0x19
 8226 1999 33010000 		.4byte	.LASF196
 8227 199d 01       		.byte	0x1
 8228 199e 0B0E     		.2byte	0xe0b
 8229 19a0 5B0C0000 		.4byte	0xc5b
 8230 19a4 220F0000 		.4byte	.LLST104
 8231 19a8 19       		.uleb128 0x19
 8232 19a9 C6060000 		.4byte	.LASF193
 8233 19ad 01       		.byte	0x1
 8234 19ae 0B0E     		.2byte	0xe0b
 8235 19b0 75020000 		.4byte	0x275
 8236 19b4 590F0000 		.4byte	.LLST105
 8237 19b8 1A       		.uleb128 0x1a
 8238 19b9 2F040000 		.4byte	.LASF197
 8239 19bd 01       		.byte	0x1
 8240 19be 0D0E     		.2byte	0xe0d
 8241 19c0 E6050000 		.4byte	0x5e6
 8242 19c4 930F0000 		.4byte	.LLST106
 8243 19c8 1A       		.uleb128 0x1a
 8244 19c9 D5080000 		.4byte	.LASF198
 8245 19cd 01       		.byte	0x1
 8246 19ce 0D0E     		.2byte	0xe0d
 8247 19d0 E6050000 		.4byte	0x5e6
 8248 19d4 A60F0000 		.4byte	.LLST107
 8249 19d8 1A       		.uleb128 0x1a
 8250 19d9 2C100000 		.4byte	.LASF199
 8251 19dd 01       		.byte	0x1
 8252 19de 0E0E     		.2byte	0xe0e
 8253 19e0 40010000 		.4byte	0x140
 8254 19e4 B90F0000 		.4byte	.LLST108
 8255 19e8 26       		.uleb128 0x26
 8256 19e9 08000000 		.4byte	.LBB55
 8257 19ed 1E000000 		.4byte	.LBE55-.LBB55
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 250


 8258 19f1 061A0000 		.4byte	0x1a06
 8259 19f5 1A       		.uleb128 0x1a
 8260 19f6 0E070000 		.4byte	.LASF169
 8261 19fa 01       		.byte	0x1
 8262 19fb 120E     		.2byte	0xe12
 8263 19fd 70140000 		.4byte	0x1470
 8264 1a01 EF0F0000 		.4byte	.LLST109
 8265 1a05 00       		.byte	0
 8266 1a06 26       		.uleb128 0x26
 8267 1a07 28000000 		.4byte	.LBB56
 8268 1a0b 12000000 		.4byte	.LBE56-.LBB56
 8269 1a0f 241A0000 		.4byte	0x1a24
 8270 1a13 1A       		.uleb128 0x1a
 8271 1a14 0E070000 		.4byte	.LASF169
 8272 1a18 01       		.byte	0x1
 8273 1a19 1A0E     		.2byte	0xe1a
 8274 1a1b 70140000 		.4byte	0x1470
 8275 1a1f 0D100000 		.4byte	.LLST110
 8276 1a23 00       		.byte	0
 8277 1a24 1D       		.uleb128 0x1d
 8278 1a25 4C000000 		.4byte	.LVL325
 8279 1a29 D2180000 		.4byte	0x18d2
 8280 1a2d 1E       		.uleb128 0x1e
 8281 1a2e 01       		.uleb128 0x1
 8282 1a2f 50       		.byte	0x50
 8283 1a30 02       		.uleb128 0x2
 8284 1a31 76       		.byte	0x76
 8285 1a32 00       		.sleb128 0
 8286 1a33 1E       		.uleb128 0x1e
 8287 1a34 01       		.uleb128 0x1
 8288 1a35 51       		.byte	0x51
 8289 1a36 0C       		.uleb128 0xc
 8290 1a37 74       		.byte	0x74
 8291 1a38 00       		.sleb128 0
 8292 1a39 33       		.byte	0x33
 8293 1a3a 24       		.byte	0x24
 8294 1a3b 74       		.byte	0x74
 8295 1a3c 00       		.sleb128 0
 8296 1a3d 22       		.byte	0x22
 8297 1a3e 32       		.byte	0x32
 8298 1a3f 24       		.byte	0x24
 8299 1a40 77       		.byte	0x77
 8300 1a41 00       		.sleb128 0
 8301 1a42 22       		.byte	0x22
 8302 1a43 1E       		.uleb128 0x1e
 8303 1a44 01       		.uleb128 0x1
 8304 1a45 52       		.byte	0x52
 8305 1a46 01       		.uleb128 0x1
 8306 1a47 31       		.byte	0x31
 8307 1a48 1E       		.uleb128 0x1e
 8308 1a49 01       		.uleb128 0x1
 8309 1a4a 53       		.byte	0x53
 8310 1a4b 02       		.uleb128 0x2
 8311 1a4c 78       		.byte	0x78
 8312 1a4d 00       		.sleb128 0
 8313 1a4e 00       		.byte	0
 8314 1a4f 00       		.byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 251


 8315 1a50 25       		.uleb128 0x25
 8316 1a51 33100000 		.4byte	.LASF200
 8317 1a55 01       		.byte	0x1
 8318 1a56 6909     		.2byte	0x969
 8319 1a58 40010000 		.4byte	0x140
 8320 1a5c 00000000 		.4byte	.LFB91
 8321 1a60 A4000000 		.4byte	.LFE91-.LFB91
 8322 1a64 01       		.uleb128 0x1
 8323 1a65 9C       		.byte	0x9c
 8324 1a66 A51B0000 		.4byte	0x1ba5
 8325 1a6a 19       		.uleb128 0x19
 8326 1a6b B20C0000 		.4byte	.LASF195
 8327 1a6f 01       		.byte	0x1
 8328 1a70 6909     		.2byte	0x969
 8329 1a72 A51B0000 		.4byte	0x1ba5
 8330 1a76 20100000 		.4byte	.LLST111
 8331 1a7a 19       		.uleb128 0x19
 8332 1a7b FB090000 		.4byte	.LASF201
 8333 1a7f 01       		.byte	0x1
 8334 1a80 6909     		.2byte	0x969
 8335 1a82 CD180000 		.4byte	0x18cd
 8336 1a86 4C100000 		.4byte	.LLST112
 8337 1a8a 19       		.uleb128 0x19
 8338 1a8b CB000000 		.4byte	.LASF202
 8339 1a8f 01       		.byte	0x1
 8340 1a90 6909     		.2byte	0x969
 8341 1a92 B01B0000 		.4byte	0x1bb0
 8342 1a96 91100000 		.4byte	.LLST113
 8343 1a9a 1A       		.uleb128 0x1a
 8344 1a9b 2C100000 		.4byte	.LASF199
 8345 1a9f 01       		.byte	0x1
 8346 1aa0 6B09     		.2byte	0x96b
 8347 1aa2 40010000 		.4byte	0x140
 8348 1aa6 BD100000 		.4byte	.LLST114
 8349 1aaa 1A       		.uleb128 0x1a
 8350 1aab A30F0000 		.4byte	.LASF203
 8351 1aaf 01       		.byte	0x1
 8352 1ab0 6B09     		.2byte	0x96b
 8353 1ab2 40010000 		.4byte	0x140
 8354 1ab6 FE100000 		.4byte	.LLST115
 8355 1aba 1C       		.uleb128 0x1c
 8356 1abb 0C000000 		.4byte	.LVL331
 8357 1abf 60100000 		.4byte	0x1060
 8358 1ac3 22       		.uleb128 0x22
 8359 1ac4 34000000 		.4byte	.LVL334
 8360 1ac8 6E190000 		.4byte	0x196e
 8361 1acc F91A0000 		.4byte	0x1af9
 8362 1ad0 1E       		.uleb128 0x1e
 8363 1ad1 01       		.uleb128 0x1
 8364 1ad2 50       		.byte	0x50
 8365 1ad3 0C       		.uleb128 0xc
 8366 1ad4 74       		.byte	0x74
 8367 1ad5 00       		.sleb128 0
 8368 1ad6 33       		.byte	0x33
 8369 1ad7 24       		.byte	0x24
 8370 1ad8 74       		.byte	0x74
 8371 1ad9 00       		.sleb128 0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 252


 8372 1ada 22       		.byte	0x22
 8373 1adb 32       		.byte	0x32
 8374 1adc 24       		.byte	0x24
 8375 1add 77       		.byte	0x77
 8376 1ade 00       		.sleb128 0
 8377 1adf 22       		.byte	0x22
 8378 1ae0 1E       		.uleb128 0x1e
 8379 1ae1 01       		.uleb128 0x1
 8380 1ae2 51       		.byte	0x51
 8381 1ae3 0F       		.uleb128 0xf
 8382 1ae4 75       		.byte	0x75
 8383 1ae5 00       		.sleb128 0
 8384 1ae6 32       		.byte	0x32
 8385 1ae7 24       		.byte	0x24
 8386 1ae8 75       		.byte	0x75
 8387 1ae9 00       		.sleb128 0
 8388 1aea 22       		.byte	0x22
 8389 1aeb 32       		.byte	0x32
 8390 1aec 24       		.byte	0x24
 8391 1aed 03       		.byte	0x3
 8392 1aee 30000000 		.4byte	.LANCHOR0+48
 8393 1af2 22       		.byte	0x22
 8394 1af3 1E       		.uleb128 0x1e
 8395 1af4 01       		.uleb128 0x1
 8396 1af5 52       		.byte	0x52
 8397 1af6 01       		.uleb128 0x1
 8398 1af7 31       		.byte	0x31
 8399 1af8 00       		.byte	0
 8400 1af9 22       		.uleb128 0x22
 8401 1afa 4C000000 		.4byte	.LVL337
 8402 1afe 6E190000 		.4byte	0x196e
 8403 1b02 1C1B0000 		.4byte	0x1b1c
 8404 1b06 1E       		.uleb128 0x1e
 8405 1b07 01       		.uleb128 0x1
 8406 1b08 50       		.byte	0x50
 8407 1b09 0C       		.uleb128 0xc
 8408 1b0a 74       		.byte	0x74
 8409 1b0b 00       		.sleb128 0
 8410 1b0c 33       		.byte	0x33
 8411 1b0d 24       		.byte	0x24
 8412 1b0e 74       		.byte	0x74
 8413 1b0f 00       		.sleb128 0
 8414 1b10 22       		.byte	0x22
 8415 1b11 32       		.byte	0x32
 8416 1b12 24       		.byte	0x24
 8417 1b13 77       		.byte	0x77
 8418 1b14 00       		.sleb128 0
 8419 1b15 22       		.byte	0x22
 8420 1b16 1E       		.uleb128 0x1e
 8421 1b17 01       		.uleb128 0x1
 8422 1b18 52       		.byte	0x52
 8423 1b19 01       		.uleb128 0x1
 8424 1b1a 32       		.byte	0x32
 8425 1b1b 00       		.byte	0
 8426 1b1c 22       		.uleb128 0x22
 8427 1b1d 60000000 		.4byte	.LVL339
 8428 1b21 6E190000 		.4byte	0x196e
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 253


 8429 1b25 3F1B0000 		.4byte	0x1b3f
 8430 1b29 1E       		.uleb128 0x1e
 8431 1b2a 01       		.uleb128 0x1
 8432 1b2b 50       		.byte	0x50
 8433 1b2c 0C       		.uleb128 0xc
 8434 1b2d 74       		.byte	0x74
 8435 1b2e 00       		.sleb128 0
 8436 1b2f 33       		.byte	0x33
 8437 1b30 24       		.byte	0x24
 8438 1b31 74       		.byte	0x74
 8439 1b32 00       		.sleb128 0
 8440 1b33 22       		.byte	0x22
 8441 1b34 32       		.byte	0x32
 8442 1b35 24       		.byte	0x24
 8443 1b36 77       		.byte	0x77
 8444 1b37 00       		.sleb128 0
 8445 1b38 22       		.byte	0x22
 8446 1b39 1E       		.uleb128 0x1e
 8447 1b3a 01       		.uleb128 0x1
 8448 1b3b 52       		.byte	0x52
 8449 1b3c 01       		.uleb128 0x1
 8450 1b3d 32       		.byte	0x32
 8451 1b3e 00       		.byte	0
 8452 1b3f 22       		.uleb128 0x22
 8453 1b40 74000000 		.4byte	.LVL341
 8454 1b44 6E190000 		.4byte	0x196e
 8455 1b48 691B0000 		.4byte	0x1b69
 8456 1b4c 1E       		.uleb128 0x1e
 8457 1b4d 01       		.uleb128 0x1
 8458 1b4e 50       		.byte	0x50
 8459 1b4f 0C       		.uleb128 0xc
 8460 1b50 74       		.byte	0x74
 8461 1b51 00       		.sleb128 0
 8462 1b52 33       		.byte	0x33
 8463 1b53 24       		.byte	0x24
 8464 1b54 74       		.byte	0x74
 8465 1b55 00       		.sleb128 0
 8466 1b56 22       		.byte	0x22
 8467 1b57 32       		.byte	0x32
 8468 1b58 24       		.byte	0x24
 8469 1b59 77       		.byte	0x77
 8470 1b5a 00       		.sleb128 0
 8471 1b5b 22       		.byte	0x22
 8472 1b5c 1E       		.uleb128 0x1e
 8473 1b5d 01       		.uleb128 0x1
 8474 1b5e 51       		.byte	0x51
 8475 1b5f 03       		.uleb128 0x3
 8476 1b60 75       		.byte	0x75
 8477 1b61 BC01     		.sleb128 188
 8478 1b63 1E       		.uleb128 0x1e
 8479 1b64 01       		.uleb128 0x1
 8480 1b65 52       		.byte	0x52
 8481 1b66 01       		.uleb128 0x1
 8482 1b67 34       		.byte	0x34
 8483 1b68 00       		.byte	0
 8484 1b69 22       		.uleb128 0x22
 8485 1b6a 86000000 		.4byte	.LVL343
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 254


 8486 1b6e 6E190000 		.4byte	0x196e
 8487 1b72 921B0000 		.4byte	0x1b92
 8488 1b76 1E       		.uleb128 0x1e
 8489 1b77 01       		.uleb128 0x1
 8490 1b78 50       		.byte	0x50
 8491 1b79 0C       		.uleb128 0xc
 8492 1b7a 74       		.byte	0x74
 8493 1b7b 00       		.sleb128 0
 8494 1b7c 33       		.byte	0x33
 8495 1b7d 24       		.byte	0x24
 8496 1b7e 74       		.byte	0x74
 8497 1b7f 00       		.sleb128 0
 8498 1b80 22       		.byte	0x22
 8499 1b81 32       		.byte	0x32
 8500 1b82 24       		.byte	0x24
 8501 1b83 77       		.byte	0x77
 8502 1b84 00       		.sleb128 0
 8503 1b85 22       		.byte	0x22
 8504 1b86 1E       		.uleb128 0x1e
 8505 1b87 01       		.uleb128 0x1
 8506 1b88 51       		.byte	0x51
 8507 1b89 02       		.uleb128 0x2
 8508 1b8a 75       		.byte	0x75
 8509 1b8b 00       		.sleb128 0
 8510 1b8c 1E       		.uleb128 0x1e
 8511 1b8d 01       		.uleb128 0x1
 8512 1b8e 52       		.byte	0x52
 8513 1b8f 01       		.uleb128 0x1
 8514 1b90 33       		.byte	0x33
 8515 1b91 00       		.byte	0
 8516 1b92 1C       		.uleb128 0x1c
 8517 1b93 8E000000 		.4byte	.LVL345
 8518 1b97 E3260000 		.4byte	0x26e3
 8519 1b9b 1C       		.uleb128 0x1c
 8520 1b9c 98000000 		.4byte	.LVL348
 8521 1ba0 E0110000 		.4byte	0x11e0
 8522 1ba4 00       		.byte	0
 8523 1ba5 07       		.uleb128 0x7
 8524 1ba6 68190000 		.4byte	0x1968
 8525 1baa 06       		.uleb128 0x6
 8526 1bab 04       		.byte	0x4
 8527 1bac EB000000 		.4byte	0xeb
 8528 1bb0 07       		.uleb128 0x7
 8529 1bb1 AA1B0000 		.4byte	0x1baa
 8530 1bb5 25       		.uleb128 0x25
 8531 1bb6 E80A0000 		.4byte	.LASF204
 8532 1bba 01       		.byte	0x1
 8533 1bbb 400E     		.2byte	0xe40
 8534 1bbd 40010000 		.4byte	0x140
 8535 1bc1 00000000 		.4byte	.LFB110
 8536 1bc5 18000000 		.4byte	.LFE110-.LFB110
 8537 1bc9 01       		.uleb128 0x1
 8538 1bca 9C       		.byte	0x9c
 8539 1bcb 171C0000 		.4byte	0x1c17
 8540 1bcf 19       		.uleb128 0x19
 8541 1bd0 DD010000 		.4byte	.LASF102
 8542 1bd4 01       		.byte	0x1
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 255


 8543 1bd5 400E     		.2byte	0xe40
 8544 1bd7 39020000 		.4byte	0x239
 8545 1bdb 29110000 		.4byte	.LLST116
 8546 1bdf 1A       		.uleb128 0x1a
 8547 1be0 D6110000 		.4byte	.LASF99
 8548 1be4 01       		.byte	0x1
 8549 1be5 420E     		.2byte	0xe42
 8550 1be7 E6050000 		.4byte	0x5e6
 8551 1beb 3C110000 		.4byte	.LLST117
 8552 1bef 1A       		.uleb128 0x1a
 8553 1bf0 ED060000 		.4byte	.LASF205
 8554 1bf4 01       		.byte	0x1
 8555 1bf5 430E     		.2byte	0xe43
 8556 1bf7 56010000 		.4byte	0x156
 8557 1bfb 4F110000 		.4byte	.LLST118
 8558 1bff 20       		.uleb128 0x20
 8559 1c00 E3010000 		.4byte	.LASF133
 8560 1c04 01       		.byte	0x1
 8561 1c05 440E     		.2byte	0xe44
 8562 1c07 40010000 		.4byte	0x140
 8563 1c0b 01       		.uleb128 0x1
 8564 1c0c 50       		.byte	0x50
 8565 1c0d 1C       		.uleb128 0x1c
 8566 1c0e 12000000 		.4byte	.LVL352
 8567 1c12 79050000 		.4byte	0x579
 8568 1c16 00       		.byte	0
 8569 1c17 25       		.uleb128 0x25
 8570 1c18 DD0E0000 		.4byte	.LASF206
 8571 1c1c 01       		.byte	0x1
 8572 1c1d AC0E     		.2byte	0xeac
 8573 1c1f 39020000 		.4byte	0x239
 8574 1c23 00000000 		.4byte	.LFB113
 8575 1c27 0C000000 		.4byte	.LFE113-.LFB113
 8576 1c2b 01       		.uleb128 0x1
 8577 1c2c 9C       		.byte	0x9c
 8578 1c2d 401C0000 		.4byte	0x1c40
 8579 1c31 20       		.uleb128 0x20
 8580 1c32 8C040000 		.4byte	.LASF98
 8581 1c36 01       		.byte	0x1
 8582 1c37 AE0E     		.2byte	0xeae
 8583 1c39 39020000 		.4byte	0x239
 8584 1c3d 01       		.uleb128 0x1
 8585 1c3e 50       		.byte	0x50
 8586 1c3f 00       		.byte	0
 8587 1c40 25       		.uleb128 0x25
 8588 1c41 AD090000 		.4byte	.LASF207
 8589 1c45 01       		.byte	0x1
 8590 1c46 D90E     		.2byte	0xed9
 8591 1c48 35010000 		.4byte	0x135
 8592 1c4c 00000000 		.4byte	.LFB114
 8593 1c50 D0000000 		.4byte	.LFE114-.LFB114
 8594 1c54 01       		.uleb128 0x1
 8595 1c55 9C       		.byte	0x9c
 8596 1c56 AF1C0000 		.4byte	0x1caf
 8597 1c5a 19       		.uleb128 0x19
 8598 1c5b 97080000 		.4byte	.LASF208
 8599 1c5f 01       		.byte	0x1
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 256


 8600 1c60 D90E     		.2byte	0xed9
 8601 1c62 64050000 		.4byte	0x564
 8602 1c66 63110000 		.4byte	.LLST119
 8603 1c6a 1A       		.uleb128 0x1a
 8604 1c6b 7A0E0000 		.4byte	.LASF209
 8605 1c6f 01       		.byte	0x1
 8606 1c70 DB0E     		.2byte	0xedb
 8607 1c72 8C0E0000 		.4byte	0xe8c
 8608 1c76 EF110000 		.4byte	.LLST120
 8609 1c7a 1A       		.uleb128 0x1a
 8610 1c7b 8C040000 		.4byte	.LASF98
 8611 1c7f 01       		.byte	0x1
 8612 1c80 DC0E     		.2byte	0xedc
 8613 1c82 35010000 		.4byte	0x135
 8614 1c86 7B120000 		.4byte	.LLST121
 8615 1c8a 22       		.uleb128 0x22
 8616 1c8b 4C000000 		.4byte	.LVL356
 8617 1c8f 7D260000 		.4byte	0x267d
 8618 1c93 9E1C0000 		.4byte	0x1c9e
 8619 1c97 1E       		.uleb128 0x1e
 8620 1c98 01       		.uleb128 0x1
 8621 1c99 50       		.byte	0x50
 8622 1c9a 02       		.uleb128 0x2
 8623 1c9b 75       		.byte	0x75
 8624 1c9c 00       		.sleb128 0
 8625 1c9d 00       		.byte	0
 8626 1c9e 1D       		.uleb128 0x1d
 8627 1c9f 9A000000 		.4byte	.LVL358
 8628 1ca3 66260000 		.4byte	0x2666
 8629 1ca7 1E       		.uleb128 0x1e
 8630 1ca8 01       		.uleb128 0x1
 8631 1ca9 51       		.byte	0x51
 8632 1caa 02       		.uleb128 0x2
 8633 1cab 75       		.byte	0x75
 8634 1cac 00       		.sleb128 0
 8635 1cad 00       		.byte	0
 8636 1cae 00       		.byte	0
 8637 1caf 25       		.uleb128 0x25
 8638 1cb0 9D010000 		.4byte	.LASF210
 8639 1cb4 01       		.byte	0x1
 8640 1cb5 300F     		.2byte	0xf30
 8641 1cb7 35010000 		.4byte	0x135
 8642 1cbb 00000000 		.4byte	.LFB115
 8643 1cbf 88000000 		.4byte	.LFE115-.LFB115
 8644 1cc3 01       		.uleb128 0x1
 8645 1cc4 9C       		.byte	0x9c
 8646 1cc5 1E1D0000 		.4byte	0x1d1e
 8647 1cc9 19       		.uleb128 0x19
 8648 1cca 97080000 		.4byte	.LASF208
 8649 1cce 01       		.byte	0x1
 8650 1ccf 300F     		.2byte	0xf30
 8651 1cd1 64050000 		.4byte	0x564
 8652 1cd5 B1120000 		.4byte	.LLST122
 8653 1cd9 1A       		.uleb128 0x1a
 8654 1cda D6110000 		.4byte	.LASF99
 8655 1cde 01       		.byte	0x1
 8656 1cdf 320F     		.2byte	0xf32
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 257


 8657 1ce1 8C0E0000 		.4byte	0xe8c
 8658 1ce5 19130000 		.4byte	.LLST123
 8659 1ce9 1A       		.uleb128 0x1a
 8660 1cea 8C040000 		.4byte	.LASF98
 8661 1cee 01       		.byte	0x1
 8662 1cef 330F     		.2byte	0xf33
 8663 1cf1 35010000 		.4byte	0x135
 8664 1cf5 81130000 		.4byte	.LLST124
 8665 1cf9 22       		.uleb128 0x22
 8666 1cfa 22000000 		.4byte	.LVL368
 8667 1cfe 7D260000 		.4byte	0x267d
 8668 1d02 0D1D0000 		.4byte	0x1d0d
 8669 1d06 1E       		.uleb128 0x1e
 8670 1d07 01       		.uleb128 0x1
 8671 1d08 50       		.byte	0x50
 8672 1d09 02       		.uleb128 0x2
 8673 1d0a 75       		.byte	0x75
 8674 1d0b 00       		.sleb128 0
 8675 1d0c 00       		.byte	0
 8676 1d0d 1D       		.uleb128 0x1d
 8677 1d0e 72000000 		.4byte	.LVL370
 8678 1d12 66260000 		.4byte	0x2666
 8679 1d16 1E       		.uleb128 0x1e
 8680 1d17 01       		.uleb128 0x1
 8681 1d18 51       		.byte	0x51
 8682 1d19 02       		.uleb128 0x2
 8683 1d1a 75       		.byte	0x75
 8684 1d1b 00       		.sleb128 0
 8685 1d1c 00       		.byte	0
 8686 1d1d 00       		.byte	0
 8687 1d1e 27       		.uleb128 0x27
 8688 1d1f C40C0000 		.4byte	.LASF211
 8689 1d23 01       		.byte	0x1
 8690 1d24 800F     		.2byte	0xf80
 8691 1d26 00000000 		.4byte	.LFB116
 8692 1d2a A0000000 		.4byte	.LFE116-.LFB116
 8693 1d2e 01       		.uleb128 0x1
 8694 1d2f 9C       		.byte	0x9c
 8695 1d30 B61D0000 		.4byte	0x1db6
 8696 1d34 19       		.uleb128 0x19
 8697 1d35 97080000 		.4byte	.LASF208
 8698 1d39 01       		.byte	0x1
 8699 1d3a 800F     		.2byte	0xf80
 8700 1d3c 64050000 		.4byte	0x564
 8701 1d40 CF130000 		.4byte	.LLST125
 8702 1d44 19       		.uleb128 0x19
 8703 1d45 C00E0000 		.4byte	.LASF212
 8704 1d49 01       		.byte	0x1
 8705 1d4a 800F     		.2byte	0xf80
 8706 1d4c 40010000 		.4byte	0x140
 8707 1d50 11140000 		.4byte	.LLST126
 8708 1d54 1A       		.uleb128 0x1a
 8709 1d55 D6110000 		.4byte	.LASF99
 8710 1d59 01       		.byte	0x1
 8711 1d5a 820F     		.2byte	0xf82
 8712 1d5c 8C0E0000 		.4byte	0xe8c
 8713 1d60 3D140000 		.4byte	.LLST127
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 258


 8714 1d64 1A       		.uleb128 0x1a
 8715 1d65 47080000 		.4byte	.LASF140
 8716 1d69 01       		.byte	0x1
 8717 1d6a 830F     		.2byte	0xf83
 8718 1d6c 40010000 		.4byte	0x140
 8719 1d70 7F140000 		.4byte	.LLST128
 8720 1d74 1A       		.uleb128 0x1a
 8721 1d75 4F040000 		.4byte	.LASF213
 8722 1d79 01       		.byte	0x1
 8723 1d7a 830F     		.2byte	0xf83
 8724 1d7c 40010000 		.4byte	0x140
 8725 1d80 92140000 		.4byte	.LLST129
 8726 1d84 2E       		.uleb128 0x2e
 8727 1d85 E4040000 		.4byte	.LASF214
 8728 1d89 01       		.byte	0x1
 8729 1d8a 840F     		.2byte	0xf84
 8730 1d8c CD180000 		.4byte	0x18cd
 8731 1d90 01       		.byte	0x1
 8732 1d91 22       		.uleb128 0x22
 8733 1d92 4C000000 		.4byte	.LVL384
 8734 1d96 7D260000 		.4byte	0x267d
 8735 1d9a A51D0000 		.4byte	0x1da5
 8736 1d9e 1E       		.uleb128 0x1e
 8737 1d9f 01       		.uleb128 0x1
 8738 1da0 50       		.byte	0x50
 8739 1da1 02       		.uleb128 0x2
 8740 1da2 75       		.byte	0x75
 8741 1da3 00       		.sleb128 0
 8742 1da4 00       		.byte	0
 8743 1da5 1D       		.uleb128 0x1d
 8744 1da6 94000000 		.4byte	.LVL385
 8745 1daa 66260000 		.4byte	0x2666
 8746 1dae 1E       		.uleb128 0x1e
 8747 1daf 01       		.uleb128 0x1
 8748 1db0 51       		.byte	0x51
 8749 1db1 02       		.uleb128 0x2
 8750 1db2 75       		.byte	0x75
 8751 1db3 00       		.sleb128 0
 8752 1db4 00       		.byte	0
 8753 1db5 00       		.byte	0
 8754 1db6 27       		.uleb128 0x27
 8755 1db7 15090000 		.4byte	.LASF215
 8756 1dbb 01       		.byte	0x1
 8757 1dbc 3F10     		.2byte	0x103f
 8758 1dbe 00000000 		.4byte	.LFB118
 8759 1dc2 D4000000 		.4byte	.LFE118-.LFB118
 8760 1dc6 01       		.uleb128 0x1
 8761 1dc7 9C       		.byte	0x9c
 8762 1dc8 9D1E0000 		.4byte	0x1e9d
 8763 1dcc 19       		.uleb128 0x19
 8764 1dcd 48100000 		.4byte	.LASF216
 8765 1dd1 01       		.byte	0x1
 8766 1dd2 3F10     		.2byte	0x103f
 8767 1dd4 B2000000 		.4byte	0xb2
 8768 1dd8 B1140000 		.4byte	.LLST130
 8769 1ddc 1A       		.uleb128 0x1a
 8770 1ddd B20C0000 		.4byte	.LASF195
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 259


 8771 1de1 01       		.byte	0x1
 8772 1de2 4110     		.2byte	0x1041
 8773 1de4 68190000 		.4byte	0x1968
 8774 1de8 E5140000 		.4byte	.LLST131
 8775 1dec 20       		.uleb128 0x20
 8776 1ded FB090000 		.4byte	.LASF201
 8777 1df1 01       		.byte	0x1
 8778 1df2 4210     		.2byte	0x1042
 8779 1df4 23020000 		.4byte	0x223
 8780 1df8 02       		.uleb128 0x2
 8781 1df9 91       		.byte	0x91
 8782 1dfa 64       		.sleb128 -28
 8783 1dfb 34       		.uleb128 0x34
 8784 1dfc 7800     		.ascii	"x\000"
 8785 1dfe 01       		.byte	0x1
 8786 1dff 4210     		.2byte	0x1042
 8787 1e01 23020000 		.4byte	0x223
 8788 1e05 02       		.uleb128 0x2
 8789 1e06 91       		.byte	0x91
 8790 1e07 60       		.sleb128 -32
 8791 1e08 1A       		.uleb128 0x1a
 8792 1e09 A5080000 		.4byte	.LASF217
 8793 1e0d 01       		.byte	0x1
 8794 1e0e 4310     		.2byte	0x1043
 8795 1e10 B8000000 		.4byte	0xb8
 8796 1e14 03150000 		.4byte	.LLST132
 8797 1e18 1C       		.uleb128 0x1c
 8798 1e19 20000000 		.4byte	.LVL389
 8799 1e1d AB260000 		.4byte	0x26ab
 8800 1e21 22       		.uleb128 0x22
 8801 1e22 2E000000 		.4byte	.LVL390
 8802 1e26 501A0000 		.4byte	0x1a50
 8803 1e2a 3A1E0000 		.4byte	0x1e3a
 8804 1e2e 1E       		.uleb128 0x1e
 8805 1e2f 01       		.uleb128 0x1
 8806 1e30 50       		.byte	0x50
 8807 1e31 02       		.uleb128 0x2
 8808 1e32 74       		.byte	0x74
 8809 1e33 00       		.sleb128 0
 8810 1e34 1E       		.uleb128 0x1e
 8811 1e35 01       		.uleb128 0x1
 8812 1e36 52       		.byte	0x52
 8813 1e37 01       		.uleb128 0x1
 8814 1e38 30       		.byte	0x30
 8815 1e39 00       		.byte	0
 8816 1e3a 22       		.uleb128 0x22
 8817 1e3b 78000000 		.4byte	.LVL397
 8818 1e3f 8A090000 		.4byte	0x98a
 8819 1e43 4E1E0000 		.4byte	0x1e4e
 8820 1e47 1E       		.uleb128 0x1e
 8821 1e48 01       		.uleb128 0x1
 8822 1e49 50       		.byte	0x50
 8823 1e4a 02       		.uleb128 0x2
 8824 1e4b 75       		.byte	0x75
 8825 1e4c 00       		.sleb128 0
 8826 1e4d 00       		.byte	0
 8827 1e4e 22       		.uleb128 0x22
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 260


 8828 1e4f AA000000 		.4byte	.LVL399
 8829 1e53 EE260000 		.4byte	0x26ee
 8830 1e57 781E0000 		.4byte	0x1e78
 8831 1e5b 1E       		.uleb128 0x1e
 8832 1e5c 01       		.uleb128 0x1
 8833 1e5d 50       		.byte	0x50
 8834 1e5e 02       		.uleb128 0x2
 8835 1e5f 75       		.byte	0x75
 8836 1e60 00       		.sleb128 0
 8837 1e61 1E       		.uleb128 0x1e
 8838 1e62 01       		.uleb128 0x1
 8839 1e63 51       		.byte	0x51
 8840 1e64 05       		.uleb128 0x5
 8841 1e65 03       		.byte	0x3
 8842 1e66 08000000 		.4byte	.LC1
 8843 1e6a 1E       		.uleb128 0x1e
 8844 1e6b 01       		.uleb128 0x1
 8845 1e6c 52       		.byte	0x52
 8846 1e6d 02       		.uleb128 0x2
 8847 1e6e 76       		.byte	0x76
 8848 1e6f 00       		.sleb128 0
 8849 1e70 1E       		.uleb128 0x1e
 8850 1e71 02       		.uleb128 0x2
 8851 1e72 7D       		.byte	0x7d
 8852 1e73 00       		.sleb128 0
 8853 1e74 02       		.uleb128 0x2
 8854 1e75 77       		.byte	0x77
 8855 1e76 00       		.sleb128 0
 8856 1e77 00       		.byte	0
 8857 1e78 22       		.uleb128 0x22
 8858 1e79 B0000000 		.4byte	.LVL400
 8859 1e7d A0260000 		.4byte	0x26a0
 8860 1e81 8C1E0000 		.4byte	0x1e8c
 8861 1e85 1E       		.uleb128 0x1e
 8862 1e86 01       		.uleb128 0x1
 8863 1e87 50       		.byte	0x50
 8864 1e88 02       		.uleb128 0x2
 8865 1e89 75       		.byte	0x75
 8866 1e8a 00       		.sleb128 0
 8867 1e8b 00       		.byte	0
 8868 1e8c 1D       		.uleb128 0x1d
 8869 1e8d C6000000 		.4byte	.LVL403
 8870 1e91 22260000 		.4byte	0x2622
 8871 1e95 1E       		.uleb128 0x1e
 8872 1e96 01       		.uleb128 0x1
 8873 1e97 50       		.byte	0x50
 8874 1e98 02       		.uleb128 0x2
 8875 1e99 74       		.byte	0x74
 8876 1e9a 00       		.sleb128 0
 8877 1e9b 00       		.byte	0
 8878 1e9c 00       		.byte	0
 8879 1e9d 27       		.uleb128 0x27
 8880 1e9e DB000000 		.4byte	.LASF218
 8881 1ea2 01       		.byte	0x1
 8882 1ea3 A110     		.2byte	0x10a1
 8883 1ea5 00000000 		.4byte	.LFB119
 8884 1ea9 C8000000 		.4byte	.LFE119-.LFB119
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 261


 8885 1ead 01       		.uleb128 0x1
 8886 1eae 9C       		.byte	0x9c
 8887 1eaf A41F0000 		.4byte	0x1fa4
 8888 1eb3 19       		.uleb128 0x19
 8889 1eb4 48100000 		.4byte	.LASF216
 8890 1eb8 01       		.byte	0x1
 8891 1eb9 A110     		.2byte	0x10a1
 8892 1ebb B2000000 		.4byte	0xb2
 8893 1ebf 49150000 		.4byte	.LLST133
 8894 1ec3 1A       		.uleb128 0x1a
 8895 1ec4 B20C0000 		.4byte	.LASF195
 8896 1ec8 01       		.byte	0x1
 8897 1ec9 A310     		.2byte	0x10a3
 8898 1ecb 68190000 		.4byte	0x1968
 8899 1ecf 93150000 		.4byte	.LLST134
 8900 1ed3 20       		.uleb128 0x20
 8901 1ed4 FB090000 		.4byte	.LASF201
 8902 1ed8 01       		.byte	0x1
 8903 1ed9 A410     		.2byte	0x10a4
 8904 1edb 23020000 		.4byte	0x223
 8905 1edf 02       		.uleb128 0x2
 8906 1ee0 91       		.byte	0x91
 8907 1ee1 6C       		.sleb128 -20
 8908 1ee2 34       		.uleb128 0x34
 8909 1ee3 7800     		.ascii	"x\000"
 8910 1ee5 01       		.byte	0x1
 8911 1ee6 A410     		.2byte	0x10a4
 8912 1ee8 23020000 		.4byte	0x223
 8913 1eec 02       		.uleb128 0x2
 8914 1eed 91       		.byte	0x91
 8915 1eee 68       		.sleb128 -24
 8916 1eef 20       		.uleb128 0x20
 8917 1ef0 7F090000 		.4byte	.LASF219
 8918 1ef4 01       		.byte	0x1
 8919 1ef5 A510     		.2byte	0x10a5
 8920 1ef7 EB000000 		.4byte	0xeb
 8921 1efb 02       		.uleb128 0x2
 8922 1efc 91       		.byte	0x91
 8923 1efd 64       		.sleb128 -28
 8924 1efe 1A       		.uleb128 0x1a
 8925 1eff 86000000 		.4byte	.LASF220
 8926 1f03 01       		.byte	0x1
 8927 1f04 A510     		.2byte	0x10a5
 8928 1f06 EB000000 		.4byte	0xeb
 8929 1f0a B1150000 		.4byte	.LLST135
 8930 1f0e 1C       		.uleb128 0x1c
 8931 1f0f 20000000 		.4byte	.LVL407
 8932 1f13 AB260000 		.4byte	0x26ab
 8933 1f17 22       		.uleb128 0x22
 8934 1f18 2E000000 		.4byte	.LVL408
 8935 1f1c 501A0000 		.4byte	0x1a50
 8936 1f20 311F0000 		.4byte	0x1f31
 8937 1f24 1E       		.uleb128 0x1e
 8938 1f25 01       		.uleb128 0x1
 8939 1f26 50       		.byte	0x50
 8940 1f27 02       		.uleb128 0x2
 8941 1f28 75       		.byte	0x75
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 262


 8942 1f29 00       		.sleb128 0
 8943 1f2a 1E       		.uleb128 0x1e
 8944 1f2b 01       		.uleb128 0x1
 8945 1f2c 52       		.byte	0x52
 8946 1f2d 02       		.uleb128 0x2
 8947 1f2e 91       		.byte	0x91
 8948 1f2f 64       		.sleb128 -28
 8949 1f30 00       		.byte	0
 8950 1f31 22       		.uleb128 0x22
 8951 1f32 6A000000 		.4byte	.LVL410
 8952 1f36 8A090000 		.4byte	0x98a
 8953 1f3a 451F0000 		.4byte	0x1f45
 8954 1f3e 1E       		.uleb128 0x1e
 8955 1f3f 01       		.uleb128 0x1
 8956 1f40 50       		.byte	0x50
 8957 1f41 02       		.uleb128 0x2
 8958 1f42 74       		.byte	0x74
 8959 1f43 00       		.sleb128 0
 8960 1f44 00       		.byte	0
 8961 1f45 22       		.uleb128 0x22
 8962 1f46 82000000 		.4byte	.LVL412
 8963 1f4a EE260000 		.4byte	0x26ee
 8964 1f4e 681F0000 		.4byte	0x1f68
 8965 1f52 1E       		.uleb128 0x1e
 8966 1f53 01       		.uleb128 0x1
 8967 1f54 50       		.byte	0x50
 8968 1f55 02       		.uleb128 0x2
 8969 1f56 74       		.byte	0x74
 8970 1f57 00       		.sleb128 0
 8971 1f58 1E       		.uleb128 0x1e
 8972 1f59 01       		.uleb128 0x1
 8973 1f5a 51       		.byte	0x51
 8974 1f5b 05       		.uleb128 0x5
 8975 1f5c 03       		.byte	0x3
 8976 1f5d 18000000 		.4byte	.LC2
 8977 1f61 1E       		.uleb128 0x1e
 8978 1f62 01       		.uleb128 0x1
 8979 1f63 53       		.byte	0x53
 8980 1f64 02       		.uleb128 0x2
 8981 1f65 76       		.byte	0x76
 8982 1f66 00       		.sleb128 0
 8983 1f67 00       		.byte	0
 8984 1f68 22       		.uleb128 0x22
 8985 1f69 96000000 		.4byte	.LVL414
 8986 1f6d EE260000 		.4byte	0x26ee
 8987 1f71 7F1F0000 		.4byte	0x1f7f
 8988 1f75 1E       		.uleb128 0x1e
 8989 1f76 01       		.uleb128 0x1
 8990 1f77 51       		.byte	0x51
 8991 1f78 05       		.uleb128 0x5
 8992 1f79 03       		.byte	0x3
 8993 1f7a 24000000 		.4byte	.LC3
 8994 1f7e 00       		.byte	0
 8995 1f7f 22       		.uleb128 0x22
 8996 1f80 9C000000 		.4byte	.LVL415
 8997 1f84 A0260000 		.4byte	0x26a0
 8998 1f88 931F0000 		.4byte	0x1f93
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 263


 8999 1f8c 1E       		.uleb128 0x1e
 9000 1f8d 01       		.uleb128 0x1
 9001 1f8e 50       		.byte	0x50
 9002 1f8f 02       		.uleb128 0x2
 9003 1f90 74       		.byte	0x74
 9004 1f91 00       		.sleb128 0
 9005 1f92 00       		.byte	0
 9006 1f93 1D       		.uleb128 0x1d
 9007 1f94 B2000000 		.4byte	.LVL418
 9008 1f98 22260000 		.4byte	0x2622
 9009 1f9c 1E       		.uleb128 0x1e
 9010 1f9d 01       		.uleb128 0x1
 9011 1f9e 50       		.byte	0x50
 9012 1f9f 02       		.uleb128 0x2
 9013 1fa0 75       		.byte	0x75
 9014 1fa1 00       		.sleb128 0
 9015 1fa2 00       		.byte	0
 9016 1fa3 00       		.byte	0
 9017 1fa4 25       		.uleb128 0x25
 9018 1fa5 2C060000 		.4byte	.LASF221
 9019 1fa9 01       		.byte	0x1
 9020 1faa 1E11     		.2byte	0x111e
 9021 1fac 4B010000 		.4byte	0x14b
 9022 1fb0 00000000 		.4byte	.LFB120
 9023 1fb4 20000000 		.4byte	.LFE120-.LFB120
 9024 1fb8 01       		.uleb128 0x1
 9025 1fb9 9C       		.byte	0x9c
 9026 1fba CD1F0000 		.4byte	0x1fcd
 9027 1fbe 20       		.uleb128 0x20
 9028 1fbf E3010000 		.4byte	.LASF133
 9029 1fc3 01       		.byte	0x1
 9030 1fc4 2011     		.2byte	0x1120
 9031 1fc6 4B010000 		.4byte	0x14b
 9032 1fca 01       		.uleb128 0x1
 9033 1fcb 50       		.byte	0x50
 9034 1fcc 00       		.byte	0
 9035 1fcd 2F       		.uleb128 0x2f
 9036 1fce 28070000 		.4byte	.LASF223
 9037 1fd2 01       		.byte	0x1
 9038 1fd3 2E11     		.2byte	0x112e
 9039 1fd5 B0000000 		.4byte	0xb0
 9040 1fd9 00000000 		.4byte	.LFB121
 9041 1fdd 20000000 		.4byte	.LFE121-.LFB121
 9042 1fe1 01       		.uleb128 0x1
 9043 1fe2 9C       		.byte	0x9c
 9044 1fe3 25       		.uleb128 0x25
 9045 1fe4 AA110000 		.4byte	.LASF224
 9046 1fe8 01       		.byte	0x1
 9047 1fe9 3F11     		.2byte	0x113f
 9048 1feb EB000000 		.4byte	0xeb
 9049 1fef 00000000 		.4byte	.LFB122
 9050 1ff3 80000000 		.4byte	.LFE122-.LFB122
 9051 1ff7 01       		.uleb128 0x1
 9052 1ff8 9C       		.byte	0x9c
 9053 1ff9 6B200000 		.4byte	0x206b
 9054 1ffd 19       		.uleb128 0x19
 9055 1ffe EA030000 		.4byte	.LASF225
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 264


 9056 2002 01       		.byte	0x1
 9057 2003 3F11     		.2byte	0x113f
 9058 2005 35010000 		.4byte	0x135
 9059 2009 C4150000 		.4byte	.LLST136
 9060 200d 19       		.uleb128 0x19
 9061 200e 300B0000 		.4byte	.LASF120
 9062 2012 01       		.byte	0x1
 9063 2013 3F11     		.2byte	0x113f
 9064 2015 4B010000 		.4byte	0x14b
 9065 2019 F0150000 		.4byte	.LLST137
 9066 201d 1A       		.uleb128 0x1a
 9067 201e F2090000 		.4byte	.LASF226
 9068 2022 01       		.byte	0x1
 9069 2023 4111     		.2byte	0x1141
 9070 2025 EB000000 		.4byte	0xeb
 9071 2029 1C160000 		.4byte	.LLST138
 9072 202d 1C       		.uleb128 0x1c
 9073 202e 0A000000 		.4byte	.LVL422
 9074 2032 5B260000 		.4byte	0x265b
 9075 2036 22       		.uleb128 0x22
 9076 2037 2A000000 		.4byte	.LVL423
 9077 203b F7080000 		.4byte	0x8f7
 9078 203f 4F200000 		.4byte	0x204f
 9079 2043 1E       		.uleb128 0x1e
 9080 2044 01       		.uleb128 0x1
 9081 2045 50       		.byte	0x50
 9082 2046 02       		.uleb128 0x2
 9083 2047 74       		.byte	0x74
 9084 2048 00       		.sleb128 0
 9085 2049 1E       		.uleb128 0x1e
 9086 204a 01       		.uleb128 0x1
 9087 204b 51       		.byte	0x51
 9088 204c 01       		.uleb128 0x1
 9089 204d 31       		.byte	0x31
 9090 204e 00       		.byte	0
 9091 204f 1C       		.uleb128 0x1c
 9092 2050 3E000000 		.4byte	.LVL424
 9093 2054 72260000 		.4byte	0x2672
 9094 2058 1C       		.uleb128 0x1c
 9095 2059 42000000 		.4byte	.LVL425
 9096 205d 5B260000 		.4byte	0x265b
 9097 2061 1C       		.uleb128 0x1c
 9098 2062 74000000 		.4byte	.LVL427
 9099 2066 72260000 		.4byte	0x2672
 9100 206a 00       		.byte	0
 9101 206b 25       		.uleb128 0x25
 9102 206c BB110000 		.4byte	.LASF227
 9103 2070 01       		.byte	0x1
 9104 2071 8311     		.2byte	0x1183
 9105 2073 35010000 		.4byte	0x135
 9106 2077 00000000 		.4byte	.LFB123
 9107 207b A4000000 		.4byte	.LFE123-.LFB123
 9108 207f 01       		.uleb128 0x1
 9109 2080 9C       		.byte	0x9c
 9110 2081 13210000 		.4byte	0x2113
 9111 2085 19       		.uleb128 0x19
 9112 2086 BB100000 		.4byte	.LASF228
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 265


 9113 208a 01       		.byte	0x1
 9114 208b 8311     		.2byte	0x1183
 9115 208d EB000000 		.4byte	0xeb
 9116 2091 3A160000 		.4byte	.LLST139
 9117 2095 19       		.uleb128 0x19
 9118 2096 7A0B0000 		.4byte	.LASF229
 9119 209a 01       		.byte	0x1
 9120 209b 8311     		.2byte	0x1183
 9121 209d EB000000 		.4byte	0xeb
 9122 20a1 66160000 		.4byte	.LLST140
 9123 20a5 19       		.uleb128 0x19
 9124 20a6 6F0F0000 		.4byte	.LASF230
 9125 20aa 01       		.byte	0x1
 9126 20ab 8311     		.2byte	0x1183
 9127 20ad AA1B0000 		.4byte	0x1baa
 9128 20b1 AB160000 		.4byte	.LLST141
 9129 20b5 19       		.uleb128 0x19
 9130 20b6 300B0000 		.4byte	.LASF120
 9131 20ba 01       		.byte	0x1
 9132 20bb 8311     		.2byte	0x1183
 9133 20bd 4B010000 		.4byte	0x14b
 9134 20c1 F0160000 		.4byte	.LLST142
 9135 20c5 1A       		.uleb128 0x1a
 9136 20c6 8C040000 		.4byte	.LASF98
 9137 20ca 01       		.byte	0x1
 9138 20cb 8511     		.2byte	0x1185
 9139 20cd 35010000 		.4byte	0x135
 9140 20d1 1C170000 		.4byte	.LLST143
 9141 20d5 1C       		.uleb128 0x1c
 9142 20d6 0E000000 		.4byte	.LVL430
 9143 20da 5B260000 		.4byte	0x265b
 9144 20de 22       		.uleb128 0x22
 9145 20df 40000000 		.4byte	.LVL431
 9146 20e3 F7080000 		.4byte	0x8f7
 9147 20e7 F7200000 		.4byte	0x20f7
 9148 20eb 1E       		.uleb128 0x1e
 9149 20ec 01       		.uleb128 0x1
 9150 20ed 50       		.byte	0x50
 9151 20ee 02       		.uleb128 0x2
 9152 20ef 76       		.byte	0x76
 9153 20f0 00       		.sleb128 0
 9154 20f1 1E       		.uleb128 0x1e
 9155 20f2 01       		.uleb128 0x1
 9156 20f3 51       		.byte	0x51
 9157 20f4 01       		.uleb128 0x1
 9158 20f5 31       		.byte	0x31
 9159 20f6 00       		.byte	0
 9160 20f7 1C       		.uleb128 0x1c
 9161 20f8 54000000 		.4byte	.LVL432
 9162 20fc 72260000 		.4byte	0x2672
 9163 2100 1C       		.uleb128 0x1c
 9164 2101 58000000 		.4byte	.LVL433
 9165 2105 5B260000 		.4byte	0x265b
 9166 2109 1C       		.uleb128 0x1c
 9167 210a 98000000 		.4byte	.LVL439
 9168 210e 72260000 		.4byte	0x2672
 9169 2112 00       		.byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 266


 9170 2113 25       		.uleb128 0x25
 9171 2114 3A010000 		.4byte	.LASF231
 9172 2118 01       		.byte	0x1
 9173 2119 D311     		.2byte	0x11d3
 9174 211b 35010000 		.4byte	0x135
 9175 211f 00000000 		.4byte	.LFB124
 9176 2123 B8000000 		.4byte	.LFE124-.LFB124
 9177 2127 01       		.uleb128 0x1
 9178 2128 9C       		.byte	0x9c
 9179 2129 D8210000 		.4byte	0x21d8
 9180 212d 19       		.uleb128 0x19
 9181 212e 78100000 		.4byte	.LASF232
 9182 2132 01       		.byte	0x1
 9183 2133 D311     		.2byte	0x11d3
 9184 2135 39020000 		.4byte	0x239
 9185 2139 46170000 		.4byte	.LLST144
 9186 213d 19       		.uleb128 0x19
 9187 213e 1E0D0000 		.4byte	.LASF233
 9188 2142 01       		.byte	0x1
 9189 2143 D311     		.2byte	0x11d3
 9190 2145 EB000000 		.4byte	0xeb
 9191 2149 72170000 		.4byte	.LLST145
 9192 214d 19       		.uleb128 0x19
 9193 214e 820C0000 		.4byte	.LASF234
 9194 2152 01       		.byte	0x1
 9195 2153 D311     		.2byte	0x11d3
 9196 2155 AB020000 		.4byte	0x2ab
 9197 2159 B7170000 		.4byte	.LLST146
 9198 215d 19       		.uleb128 0x19
 9199 215e 34050000 		.4byte	.LASF235
 9200 2162 01       		.byte	0x1
 9201 2163 D311     		.2byte	0x11d3
 9202 2165 AA1B0000 		.4byte	0x1baa
 9203 2169 D8170000 		.4byte	.LLST147
 9204 216d 1A       		.uleb128 0x1a
 9205 216e D6110000 		.4byte	.LASF99
 9206 2172 01       		.byte	0x1
 9207 2173 D511     		.2byte	0x11d5
 9208 2175 E6050000 		.4byte	0x5e6
 9209 2179 04180000 		.4byte	.LLST148
 9210 217d 1A       		.uleb128 0x1a
 9211 217e 8C040000 		.4byte	.LASF98
 9212 2182 01       		.byte	0x1
 9213 2183 D611     		.2byte	0x11d6
 9214 2185 35010000 		.4byte	0x135
 9215 2189 30180000 		.4byte	.LLST149
 9216 218d 1A       		.uleb128 0x1a
 9217 218e 39040000 		.4byte	.LASF236
 9218 2192 01       		.byte	0x1
 9219 2193 D711     		.2byte	0x11d7
 9220 2195 CA000000 		.4byte	0xca
 9221 2199 5A180000 		.4byte	.LLST150
 9222 219d 1C       		.uleb128 0x1c
 9223 219e 0E000000 		.4byte	.LVL443
 9224 21a2 5B260000 		.4byte	0x265b
 9225 21a6 22       		.uleb128 0x22
 9226 21a7 64000000 		.4byte	.LVL448
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 267


 9227 21ab 7D260000 		.4byte	0x267d
 9228 21af BA210000 		.4byte	0x21ba
 9229 21b3 1E       		.uleb128 0x1e
 9230 21b4 01       		.uleb128 0x1
 9231 21b5 50       		.byte	0x50
 9232 21b6 02       		.uleb128 0x2
 9233 21b7 77       		.byte	0x77
 9234 21b8 00       		.sleb128 0
 9235 21b9 00       		.byte	0
 9236 21ba 22       		.uleb128 0x22
 9237 21bb 8A000000 		.4byte	.LVL450
 9238 21bf 66260000 		.4byte	0x2666
 9239 21c3 CE210000 		.4byte	0x21ce
 9240 21c7 1E       		.uleb128 0x1e
 9241 21c8 01       		.uleb128 0x1
 9242 21c9 51       		.byte	0x51
 9243 21ca 02       		.uleb128 0x2
 9244 21cb 77       		.byte	0x77
 9245 21cc 00       		.sleb128 0
 9246 21cd 00       		.byte	0
 9247 21ce 1C       		.uleb128 0x1c
 9248 21cf AA000000 		.4byte	.LVL451
 9249 21d3 72260000 		.4byte	0x2672
 9250 21d7 00       		.byte	0
 9251 21d8 25       		.uleb128 0x25
 9252 21d9 990E0000 		.4byte	.LASF237
 9253 21dd 01       		.byte	0x1
 9254 21de 3D12     		.2byte	0x123d
 9255 21e0 35010000 		.4byte	0x135
 9256 21e4 00000000 		.4byte	.LFB125
 9257 21e8 D8000000 		.4byte	.LFE125-.LFB125
 9258 21ec 01       		.uleb128 0x1
 9259 21ed 9C       		.byte	0x9c
 9260 21ee 07230000 		.4byte	0x2307
 9261 21f2 19       		.uleb128 0x19
 9262 21f3 78100000 		.4byte	.LASF232
 9263 21f7 01       		.byte	0x1
 9264 21f8 3D12     		.2byte	0x123d
 9265 21fa 39020000 		.4byte	0x239
 9266 21fe 6D180000 		.4byte	.LLST151
 9267 2202 19       		.uleb128 0x19
 9268 2203 1E0D0000 		.4byte	.LASF233
 9269 2207 01       		.byte	0x1
 9270 2208 3D12     		.2byte	0x123d
 9271 220a EB000000 		.4byte	0xeb
 9272 220e AF180000 		.4byte	.LLST152
 9273 2212 19       		.uleb128 0x19
 9274 2213 820C0000 		.4byte	.LASF234
 9275 2217 01       		.byte	0x1
 9276 2218 3D12     		.2byte	0x123d
 9277 221a AB020000 		.4byte	0x2ab
 9278 221e E9180000 		.4byte	.LLST153
 9279 2222 19       		.uleb128 0x19
 9280 2223 34050000 		.4byte	.LASF235
 9281 2227 01       		.byte	0x1
 9282 2228 3D12     		.2byte	0x123d
 9283 222a AA1B0000 		.4byte	0x1baa
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 268


 9284 222e 0A190000 		.4byte	.LLST154
 9285 2232 19       		.uleb128 0x19
 9286 2233 160F0000 		.4byte	.LASF238
 9287 2237 01       		.byte	0x1
 9288 2238 3D12     		.2byte	0x123d
 9289 223a 07230000 		.4byte	0x2307
 9290 223e 2B190000 		.4byte	.LLST155
 9291 2242 1A       		.uleb128 0x1a
 9292 2243 D6110000 		.4byte	.LASF99
 9293 2247 01       		.byte	0x1
 9294 2248 3F12     		.2byte	0x123f
 9295 224a E6050000 		.4byte	0x5e6
 9296 224e 4B190000 		.4byte	.LLST156
 9297 2252 1A       		.uleb128 0x1a
 9298 2253 39040000 		.4byte	.LASF236
 9299 2257 01       		.byte	0x1
 9300 2258 4012     		.2byte	0x1240
 9301 225a CA000000 		.4byte	0xca
 9302 225e 8D190000 		.4byte	.LLST157
 9303 2262 1A       		.uleb128 0x1a
 9304 2263 8C040000 		.4byte	.LASF98
 9305 2267 01       		.byte	0x1
 9306 2268 4112     		.2byte	0x1241
 9307 226a 35010000 		.4byte	0x135
 9308 226e A0190000 		.4byte	.LLST158
 9309 2272 28       		.uleb128 0x28
 9310 2273 4B090000 		.4byte	.LASF145
 9311 2277 01       		.byte	0x1
 9312 2278 4212     		.2byte	0x1242
 9313 227a 40010000 		.4byte	0x140
 9314 227e 29       		.uleb128 0x29
 9315 227f 9B040000 		.4byte	0x49b
 9316 2283 02000000 		.4byte	.LBB57
 9317 2287 14000000 		.4byte	.LBE57-.LBB57
 9318 228b 01       		.byte	0x1
 9319 228c 5A12     		.2byte	0x125a
 9320 228e A7220000 		.4byte	0x22a7
 9321 2292 23       		.uleb128 0x23
 9322 2293 02000000 		.4byte	.LBB58
 9323 2297 14000000 		.4byte	.LBE58-.LBB58
 9324 229b 2A       		.uleb128 0x2a
 9325 229c AB040000 		.4byte	0x4ab
 9326 22a0 2A       		.uleb128 0x2a
 9327 22a1 B6040000 		.4byte	0x4b6
 9328 22a5 00       		.byte	0
 9329 22a6 00       		.byte	0
 9330 22a7 29       		.uleb128 0x29
 9331 22a8 C2040000 		.4byte	0x4c2
 9332 22ac C8000000 		.4byte	.LBB59
 9333 22b0 04000000 		.4byte	.LBE59-.LBB59
 9334 22b4 01       		.byte	0x1
 9335 22b5 AF12     		.2byte	0x12af
 9336 22b7 C5220000 		.4byte	0x22c5
 9337 22bb 2C       		.uleb128 0x2c
 9338 22bc CE040000 		.4byte	0x4ce
 9339 22c0 CA190000 		.4byte	.LLST159
 9340 22c4 00       		.byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 269


 9341 22c5 22       		.uleb128 0x22
 9342 22c6 76000000 		.4byte	.LVL463
 9343 22ca 7D260000 		.4byte	0x267d
 9344 22ce D9220000 		.4byte	0x22d9
 9345 22d2 1E       		.uleb128 0x1e
 9346 22d3 01       		.uleb128 0x1
 9347 22d4 50       		.byte	0x50
 9348 22d5 02       		.uleb128 0x2
 9349 22d6 77       		.byte	0x77
 9350 22d7 00       		.sleb128 0
 9351 22d8 00       		.byte	0
 9352 22d9 22       		.uleb128 0x22
 9353 22da 9A000000 		.4byte	.LVL464
 9354 22de 66260000 		.4byte	0x2666
 9355 22e2 ED220000 		.4byte	0x22ed
 9356 22e6 1E       		.uleb128 0x1e
 9357 22e7 01       		.uleb128 0x1
 9358 22e8 51       		.byte	0x51
 9359 22e9 02       		.uleb128 0x2
 9360 22ea 77       		.byte	0x77
 9361 22eb 00       		.sleb128 0
 9362 22ec 00       		.byte	0
 9363 22ed 1D       		.uleb128 0x1d
 9364 22ee A6000000 		.4byte	.LVL467
 9365 22f2 66260000 		.4byte	0x2666
 9366 22f6 1E       		.uleb128 0x1e
 9367 22f7 01       		.uleb128 0x1
 9368 22f8 50       		.byte	0x50
 9369 22f9 05       		.uleb128 0x5
 9370 22fa 03       		.byte	0x3
 9371 22fb 14000000 		.4byte	.LANCHOR0+20
 9372 22ff 1E       		.uleb128 0x1e
 9373 2300 01       		.uleb128 0x1
 9374 2301 51       		.byte	0x51
 9375 2302 02       		.uleb128 0x2
 9376 2303 76       		.byte	0x76
 9377 2304 18       		.sleb128 24
 9378 2305 00       		.byte	0
 9379 2306 00       		.byte	0
 9380 2307 06       		.uleb128 0x6
 9381 2308 04       		.byte	0x4
 9382 2309 35010000 		.4byte	0x135
 9383 230d 27       		.uleb128 0x27
 9384 230e 71110000 		.4byte	.LASF239
 9385 2312 01       		.byte	0x1
 9386 2313 B912     		.2byte	0x12b9
 9387 2315 00000000 		.4byte	.LFB126
 9388 2319 9C000000 		.4byte	.LFE126-.LFB126
 9389 231d 01       		.uleb128 0x1
 9390 231e 9C       		.byte	0x9c
 9391 231f F8230000 		.4byte	0x23f8
 9392 2323 19       		.uleb128 0x19
 9393 2324 78100000 		.4byte	.LASF232
 9394 2328 01       		.byte	0x1
 9395 2329 B912     		.2byte	0x12b9
 9396 232b 39020000 		.4byte	0x239
 9397 232f DD190000 		.4byte	.LLST160
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 270


 9398 2333 19       		.uleb128 0x19
 9399 2334 160F0000 		.4byte	.LASF238
 9400 2338 01       		.byte	0x1
 9401 2339 B912     		.2byte	0x12b9
 9402 233b 07230000 		.4byte	0x2307
 9403 233f 1F1A0000 		.4byte	.LLST161
 9404 2343 1A       		.uleb128 0x1a
 9405 2344 D6110000 		.4byte	.LASF99
 9406 2348 01       		.byte	0x1
 9407 2349 BB12     		.2byte	0x12bb
 9408 234b E6050000 		.4byte	0x5e6
 9409 234f 611A0000 		.4byte	.LLST162
 9410 2353 1A       		.uleb128 0x1a
 9411 2354 39040000 		.4byte	.LASF236
 9412 2358 01       		.byte	0x1
 9413 2359 BC12     		.2byte	0x12bc
 9414 235b CA000000 		.4byte	0xca
 9415 235f A31A0000 		.4byte	.LLST163
 9416 2363 28       		.uleb128 0x28
 9417 2364 4B090000 		.4byte	.LASF145
 9418 2368 01       		.byte	0x1
 9419 2369 BD12     		.2byte	0x12bd
 9420 236b 40010000 		.4byte	0x140
 9421 236f 29       		.uleb128 0x29
 9422 2370 9B040000 		.4byte	0x49b
 9423 2374 02000000 		.4byte	.LBB61
 9424 2378 14000000 		.4byte	.LBE61-.LBB61
 9425 237c 01       		.byte	0x1
 9426 237d D512     		.2byte	0x12d5
 9427 237f 98230000 		.4byte	0x2398
 9428 2383 23       		.uleb128 0x23
 9429 2384 02000000 		.4byte	.LBB62
 9430 2388 14000000 		.4byte	.LBE62-.LBB62
 9431 238c 2A       		.uleb128 0x2a
 9432 238d AB040000 		.4byte	0x4ab
 9433 2391 2A       		.uleb128 0x2a
 9434 2392 B6040000 		.4byte	0x4b6
 9435 2396 00       		.byte	0
 9436 2397 00       		.byte	0
 9437 2398 29       		.uleb128 0x29
 9438 2399 C2040000 		.4byte	0x4c2
 9439 239d 8E000000 		.4byte	.LBB63
 9440 23a1 0E000000 		.4byte	.LBE63-.LBB63
 9441 23a5 01       		.byte	0x1
 9442 23a6 0913     		.2byte	0x1309
 9443 23a8 B6230000 		.4byte	0x23b6
 9444 23ac 2C       		.uleb128 0x2c
 9445 23ad CE040000 		.4byte	0x4ce
 9446 23b1 B61A0000 		.4byte	.LLST164
 9447 23b5 00       		.byte	0
 9448 23b6 22       		.uleb128 0x22
 9449 23b7 40000000 		.4byte	.LVL476
 9450 23bb 7D260000 		.4byte	0x267d
 9451 23bf CA230000 		.4byte	0x23ca
 9452 23c3 1E       		.uleb128 0x1e
 9453 23c4 01       		.uleb128 0x1
 9454 23c5 50       		.byte	0x50
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 271


 9455 23c6 02       		.uleb128 0x2
 9456 23c7 77       		.byte	0x77
 9457 23c8 00       		.sleb128 0
 9458 23c9 00       		.byte	0
 9459 23ca 22       		.uleb128 0x22
 9460 23cb 64000000 		.4byte	.LVL477
 9461 23cf 66260000 		.4byte	0x2666
 9462 23d3 DE230000 		.4byte	0x23de
 9463 23d7 1E       		.uleb128 0x1e
 9464 23d8 01       		.uleb128 0x1
 9465 23d9 51       		.byte	0x51
 9466 23da 02       		.uleb128 0x2
 9467 23db 77       		.byte	0x77
 9468 23dc 00       		.sleb128 0
 9469 23dd 00       		.byte	0
 9470 23de 1D       		.uleb128 0x1d
 9471 23df 70000000 		.4byte	.LVL481
 9472 23e3 66260000 		.4byte	0x2666
 9473 23e7 1E       		.uleb128 0x1e
 9474 23e8 01       		.uleb128 0x1
 9475 23e9 50       		.byte	0x50
 9476 23ea 05       		.uleb128 0x5
 9477 23eb 03       		.byte	0x3
 9478 23ec 14000000 		.4byte	.LANCHOR0+20
 9479 23f0 1E       		.uleb128 0x1e
 9480 23f1 01       		.uleb128 0x1
 9481 23f2 51       		.byte	0x51
 9482 23f3 02       		.uleb128 0x2
 9483 23f4 74       		.byte	0x74
 9484 23f5 18       		.sleb128 24
 9485 23f6 00       		.byte	0
 9486 23f7 00       		.byte	0
 9487 23f8 25       		.uleb128 0x25
 9488 23f9 0B0E0000 		.4byte	.LASF240
 9489 23fd 01       		.byte	0x1
 9490 23fe 1213     		.2byte	0x1312
 9491 2400 35010000 		.4byte	0x135
 9492 2404 00000000 		.4byte	.LFB127
 9493 2408 34000000 		.4byte	.LFE127-.LFB127
 9494 240c 01       		.uleb128 0x1
 9495 240d 9C       		.byte	0x9c
 9496 240e 55240000 		.4byte	0x2455
 9497 2412 19       		.uleb128 0x19
 9498 2413 DD010000 		.4byte	.LASF102
 9499 2417 01       		.byte	0x1
 9500 2418 1213     		.2byte	0x1312
 9501 241a 39020000 		.4byte	0x239
 9502 241e C91A0000 		.4byte	.LLST165
 9503 2422 1A       		.uleb128 0x1a
 9504 2423 D6110000 		.4byte	.LASF99
 9505 2427 01       		.byte	0x1
 9506 2428 1413     		.2byte	0x1314
 9507 242a E6050000 		.4byte	0x5e6
 9508 242e DC1A0000 		.4byte	.LLST166
 9509 2432 1A       		.uleb128 0x1a
 9510 2433 8C040000 		.4byte	.LASF98
 9511 2437 01       		.byte	0x1
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 272


 9512 2438 1513     		.2byte	0x1315
 9513 243a 35010000 		.4byte	0x135
 9514 243e FA1A0000 		.4byte	.LLST167
 9515 2442 1C       		.uleb128 0x1c
 9516 2443 10000000 		.4byte	.LVL486
 9517 2447 5B260000 		.4byte	0x265b
 9518 244b 1C       		.uleb128 0x1c
 9519 244c 2A000000 		.4byte	.LVL491
 9520 2450 72260000 		.4byte	0x2672
 9521 2454 00       		.byte	0
 9522 2455 11       		.uleb128 0x11
 9523 2456 2E020000 		.4byte	0x22e
 9524 245a 65240000 		.4byte	0x2465
 9525 245e 12       		.uleb128 0x12
 9526 245f A9000000 		.4byte	0xa9
 9527 2463 04       		.byte	0x4
 9528 2464 00       		.byte	0
 9529 2465 20       		.uleb128 0x20
 9530 2466 070A0000 		.4byte	.LASF241
 9531 246a 01       		.byte	0x1
 9532 246b 5F01     		.2byte	0x15f
 9533 246d 55240000 		.4byte	0x2455
 9534 2471 05       		.uleb128 0x5
 9535 2472 03       		.byte	0x3
 9536 2473 30000000 		.4byte	pxReadyTasksLists
 9537 2477 20       		.uleb128 0x20
 9538 2478 2F110000 		.4byte	.LASF242
 9539 247c 01       		.byte	0x1
 9540 247d 6001     		.2byte	0x160
 9541 247f 2E020000 		.4byte	0x22e
 9542 2483 05       		.uleb128 0x5
 9543 2484 03       		.byte	0x3
 9544 2485 94000000 		.4byte	xDelayedTaskList1
 9545 2489 20       		.uleb128 0x20
 9546 248a 41110000 		.4byte	.LASF243
 9547 248e 01       		.byte	0x1
 9548 248f 6101     		.2byte	0x161
 9549 2491 2E020000 		.4byte	0x22e
 9550 2495 05       		.uleb128 0x5
 9551 2496 03       		.byte	0x3
 9552 2497 A8000000 		.4byte	xDelayedTaskList2
 9553 249b 20       		.uleb128 0x20
 9554 249c 040F0000 		.4byte	.LASF244
 9555 24a0 01       		.byte	0x1
 9556 24a1 6201     		.2byte	0x162
 9557 24a3 AD240000 		.4byte	0x24ad
 9558 24a7 05       		.uleb128 0x5
 9559 24a8 03       		.byte	0x3
 9560 24a9 28000000 		.4byte	pxDelayedTaskList
 9561 24ad 08       		.uleb128 0x8
 9562 24ae 5B0C0000 		.4byte	0xc5b
 9563 24b2 20       		.uleb128 0x20
 9564 24b3 300F0000 		.4byte	.LASF245
 9565 24b7 01       		.byte	0x1
 9566 24b8 6301     		.2byte	0x163
 9567 24ba AD240000 		.4byte	0x24ad
 9568 24be 05       		.uleb128 0x5
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 273


 9569 24bf 03       		.byte	0x3
 9570 24c0 D0000000 		.4byte	pxOverflowDelayedTaskList
 9571 24c4 20       		.uleb128 0x20
 9572 24c5 8C060000 		.4byte	.LASF246
 9573 24c9 01       		.byte	0x1
 9574 24ca 6401     		.2byte	0x164
 9575 24cc 2E020000 		.4byte	0x22e
 9576 24d0 05       		.uleb128 0x5
 9577 24d1 03       		.byte	0x3
 9578 24d2 14000000 		.4byte	xPendingReadyList
 9579 24d6 20       		.uleb128 0x20
 9580 24d7 AB0F0000 		.4byte	.LASF247
 9581 24db 01       		.byte	0x1
 9582 24dc 6801     		.2byte	0x168
 9583 24de 2E020000 		.4byte	0x22e
 9584 24e2 05       		.uleb128 0x5
 9585 24e3 03       		.byte	0x3
 9586 24e4 BC000000 		.4byte	xTasksWaitingTermination
 9587 24e8 20       		.uleb128 0x20
 9588 24e9 96020000 		.4byte	.LASF248
 9589 24ed 01       		.byte	0x1
 9590 24ee 6901     		.2byte	0x169
 9591 24f0 23020000 		.4byte	0x223
 9592 24f4 05       		.uleb128 0x5
 9593 24f5 03       		.byte	0x3
 9594 24f6 E8000000 		.4byte	uxDeletedTasksWaitingCleanUp
 9595 24fa 20       		.uleb128 0x20
 9596 24fb D7030000 		.4byte	.LASF249
 9597 24ff 01       		.byte	0x1
 9598 2500 6F01     		.2byte	0x16f
 9599 2502 2E020000 		.4byte	0x22e
 9600 2506 05       		.uleb128 0x5
 9601 2507 03       		.byte	0x3
 9602 2508 00000000 		.4byte	xSuspendedTaskList
 9603 250c 20       		.uleb128 0x20
 9604 250d 75070000 		.4byte	.LASF250
 9605 2511 01       		.byte	0x1
 9606 2512 7401     		.2byte	0x174
 9607 2514 23020000 		.4byte	0x223
 9608 2518 05       		.uleb128 0x5
 9609 2519 03       		.byte	0x3
 9610 251a D4000000 		.4byte	uxCurrentNumberOfTasks
 9611 251e 20       		.uleb128 0x20
 9612 251f FA000000 		.4byte	.LASF251
 9613 2523 01       		.byte	0x1
 9614 2524 7501     		.2byte	0x175
 9615 2526 30250000 		.4byte	0x2530
 9616 252a 05       		.uleb128 0x5
 9617 252b 03       		.byte	0x3
 9618 252c EC000000 		.4byte	xTickCount
 9619 2530 08       		.uleb128 0x8
 9620 2531 4B010000 		.4byte	0x14b
 9621 2535 20       		.uleb128 0x20
 9622 2536 210E0000 		.4byte	.LASF252
 9623 253a 01       		.byte	0x1
 9624 253b 7601     		.2byte	0x176
 9625 253d 23020000 		.4byte	0x223
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 274


 9626 2541 05       		.uleb128 0x5
 9627 2542 03       		.byte	0x3
 9628 2543 E4000000 		.4byte	uxTopReadyPriority
 9629 2547 20       		.uleb128 0x20
 9630 2548 66050000 		.4byte	.LASF253
 9631 254c 01       		.byte	0x1
 9632 254d 7701     		.2byte	0x177
 9633 254f 59250000 		.4byte	0x2559
 9634 2553 05       		.uleb128 0x5
 9635 2554 03       		.byte	0x3
 9636 2555 DC000000 		.4byte	xSchedulerRunning
 9637 2559 08       		.uleb128 0x8
 9638 255a 35010000 		.4byte	0x135
 9639 255e 20       		.uleb128 0x20
 9640 255f 07050000 		.4byte	.LASF254
 9641 2563 01       		.byte	0x1
 9642 2564 7801     		.2byte	0x178
 9643 2566 23020000 		.4byte	0x223
 9644 256a 05       		.uleb128 0x5
 9645 256b 03       		.byte	0x3
 9646 256c FC000000 		.4byte	uxPendedTicks
 9647 2570 20       		.uleb128 0x20
 9648 2571 0F000000 		.4byte	.LASF255
 9649 2575 01       		.byte	0x1
 9650 2576 7901     		.2byte	0x179
 9651 2578 59250000 		.4byte	0x2559
 9652 257c 05       		.uleb128 0x5
 9653 257d 03       		.byte	0x3
 9654 257e 00010000 		.4byte	xYieldPending
 9655 2582 20       		.uleb128 0x20
 9656 2583 7C040000 		.4byte	.LASF256
 9657 2587 01       		.byte	0x1
 9658 2588 7A01     		.2byte	0x17a
 9659 258a 59250000 		.4byte	0x2559
 9660 258e 05       		.uleb128 0x5
 9661 258f 03       		.byte	0x3
 9662 2590 F8000000 		.4byte	xNumOfOverflows
 9663 2594 20       		.uleb128 0x20
 9664 2595 05010000 		.4byte	.LASF83
 9665 2599 01       		.byte	0x1
 9666 259a 7B01     		.2byte	0x17b
 9667 259c 40010000 		.4byte	0x140
 9668 25a0 05       		.uleb128 0x5
 9669 25a1 03       		.byte	0x3
 9670 25a2 E0000000 		.4byte	uxTaskNumber
 9671 25a6 20       		.uleb128 0x20
 9672 25a7 77060000 		.4byte	.LASF257
 9673 25ab 01       		.byte	0x1
 9674 25ac 7C01     		.2byte	0x17c
 9675 25ae 30250000 		.4byte	0x2530
 9676 25b2 05       		.uleb128 0x5
 9677 25b3 03       		.byte	0x3
 9678 25b4 2C000000 		.4byte	xNextTaskUnblockTime
 9679 25b8 20       		.uleb128 0x20
 9680 25b9 07080000 		.4byte	.LASF258
 9681 25bd 01       		.byte	0x1
 9682 25be 7D01     		.2byte	0x17d
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 275


 9683 25c0 39020000 		.4byte	0x239
 9684 25c4 05       		.uleb128 0x5
 9685 25c5 03       		.byte	0x3
 9686 25c6 F4000000 		.4byte	xIdleTaskHandle
 9687 25ca 20       		.uleb128 0x20
 9688 25cb 59060000 		.4byte	.LASF259
 9689 25cf 01       		.byte	0x1
 9690 25d0 8701     		.2byte	0x187
 9691 25d2 23020000 		.4byte	0x223
 9692 25d6 05       		.uleb128 0x5
 9693 25d7 03       		.byte	0x3
 9694 25d8 F0000000 		.4byte	uxSchedulerSuspended
 9695 25dc 20       		.uleb128 0x20
 9696 25dd C40F0000 		.4byte	.LASF260
 9697 25e1 01       		.byte	0x1
 9698 25e2 8B01     		.2byte	0x18b
 9699 25e4 EB000000 		.4byte	0xeb
 9700 25e8 05       		.uleb128 0x5
 9701 25e9 03       		.byte	0x3
 9702 25ea 04010000 		.4byte	ulTaskSwitchedInTime
 9703 25ee 28       		.uleb128 0x28
 9704 25ef 370A0000 		.4byte	.LASF261
 9705 25f3 01       		.byte	0x1
 9706 25f4 8C01     		.2byte	0x18c
 9707 25f6 EB000000 		.4byte	0xeb
 9708 25fa 35       		.uleb128 0x35
 9709 25fb C2090000 		.4byte	.LASF262
 9710 25ff 09       		.byte	0x9
 9711 2600 1407     		.2byte	0x714
 9712 2602 06260000 		.4byte	0x2606
 9713 2606 08       		.uleb128 0x8
 9714 2607 E0000000 		.4byte	0xe0
 9715 260b 36       		.uleb128 0x36
 9716 260c 83020000 		.4byte	.LASF263
 9717 2610 01       		.byte	0x1
 9718 2611 5C01     		.2byte	0x15c
 9719 2613 1D260000 		.4byte	0x261d
 9720 2617 05       		.uleb128 0x5
 9721 2618 03       		.byte	0x3
 9722 2619 00000000 		.4byte	pxCurrentTCB
 9723 261d 08       		.uleb128 0x8
 9724 261e E6050000 		.4byte	0x5e6
 9725 2622 37       		.uleb128 0x37
 9726 2623 53110000 		.4byte	.LASF264
 9727 2627 53110000 		.4byte	.LASF264
 9728 262b 0A       		.byte	0xa
 9729 262c 82       		.byte	0x82
 9730 262d 37       		.uleb128 0x37
 9731 262e E10D0000 		.4byte	.LASF265
 9732 2632 E10D0000 		.4byte	.LASF265
 9733 2636 0B       		.byte	0xb
 9734 2637 19       		.byte	0x19
 9735 2638 38       		.uleb128 0x38
 9736 2639 B00B0000 		.4byte	.LASF266
 9737 263d B00B0000 		.4byte	.LASF266
 9738 2641 07       		.byte	0x7
 9739 2642 6301     		.2byte	0x163
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 276


 9740 2644 37       		.uleb128 0x37
 9741 2645 F1050000 		.4byte	.LASF267
 9742 2649 F1050000 		.4byte	.LASF267
 9743 264d 0A       		.byte	0xa
 9744 264e 66       		.byte	0x66
 9745 264f 38       		.uleb128 0x38
 9746 2650 AB030000 		.4byte	.LASF268
 9747 2654 AB030000 		.4byte	.LASF268
 9748 2658 07       		.byte	0x7
 9749 2659 5801     		.2byte	0x158
 9750 265b 37       		.uleb128 0x37
 9751 265c FF0C0000 		.4byte	.LASF269
 9752 2660 FF0C0000 		.4byte	.LASF269
 9753 2664 02       		.byte	0x2
 9754 2665 61       		.byte	0x61
 9755 2666 38       		.uleb128 0x38
 9756 2667 BB030000 		.4byte	.LASF270
 9757 266b BB030000 		.4byte	.LASF270
 9758 266f 07       		.byte	0x7
 9759 2670 8501     		.2byte	0x185
 9760 2672 37       		.uleb128 0x37
 9761 2673 7E0A0000 		.4byte	.LASF271
 9762 2677 7E0A0000 		.4byte	.LASF271
 9763 267b 02       		.byte	0x2
 9764 267c 62       		.byte	0x62
 9765 267d 38       		.uleb128 0x38
 9766 267e F70E0000 		.4byte	.LASF272
 9767 2682 F70E0000 		.4byte	.LASF272
 9768 2686 07       		.byte	0x7
 9769 2687 9401     		.2byte	0x194
 9770 2689 38       		.uleb128 0x38
 9771 268a B5010000 		.4byte	.LASF273
 9772 268e B5010000 		.4byte	.LASF273
 9773 2692 07       		.byte	0x7
 9774 2693 7001     		.2byte	0x170
 9775 2695 37       		.uleb128 0x37
 9776 2696 00080000 		.4byte	.LASF274
 9777 269a 00080000 		.4byte	.LASF274
 9778 269e 0B       		.byte	0xb
 9779 269f 1E       		.byte	0x1e
 9780 26a0 37       		.uleb128 0x37
 9781 26a1 06100000 		.4byte	.LASF275
 9782 26a5 06100000 		.4byte	.LASF275
 9783 26a9 0B       		.byte	0xb
 9784 26aa 21       		.byte	0x21
 9785 26ab 37       		.uleb128 0x37
 9786 26ac CA030000 		.4byte	.LASF276
 9787 26b0 CA030000 		.4byte	.LASF276
 9788 26b4 0A       		.byte	0xa
 9789 26b5 81       		.byte	0x81
 9790 26b6 37       		.uleb128 0x37
 9791 26b7 110B0000 		.4byte	.LASF277
 9792 26bb 110B0000 		.4byte	.LASF277
 9793 26bf 0C       		.byte	0xc
 9794 26c0 4F       		.byte	0x4f
 9795 26c1 37       		.uleb128 0x37
 9796 26c2 EC070000 		.4byte	.LASF278
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 277


 9797 26c6 EC070000 		.4byte	.LASF278
 9798 26ca 0A       		.byte	0xa
 9799 26cb 8B       		.byte	0x8b
 9800 26cc 37       		.uleb128 0x37
 9801 26cd 06110000 		.4byte	.LASF279
 9802 26d1 06110000 		.4byte	.LASF279
 9803 26d5 0A       		.byte	0xa
 9804 26d6 92       		.byte	0x92
 9805 26d7 38       		.uleb128 0x38
 9806 26d8 94050000 		.4byte	.LASF280
 9807 26dc 94050000 		.4byte	.LASF280
 9808 26e0 01       		.byte	0x1
 9809 26e1 9701     		.2byte	0x197
 9810 26e3 37       		.uleb128 0x37
 9811 26e4 8F100000 		.4byte	.LASF281
 9812 26e8 8F100000 		.4byte	.LASF281
 9813 26ec 0C       		.byte	0xc
 9814 26ed 5D       		.byte	0x5d
 9815 26ee 37       		.uleb128 0x37
 9816 26ef 8F080000 		.4byte	.LASF282
 9817 26f3 8F080000 		.4byte	.LASF282
 9818 26f7 0D       		.byte	0xd
 9819 26f8 E7       		.byte	0xe7
 9820 26f9 00       		.byte	0
 9821              		.section	.debug_abbrev,"",%progbits
 9822              	.Ldebug_abbrev0:
 9823 0000 01       		.uleb128 0x1
 9824 0001 11       		.uleb128 0x11
 9825 0002 01       		.byte	0x1
 9826 0003 25       		.uleb128 0x25
 9827 0004 0E       		.uleb128 0xe
 9828 0005 13       		.uleb128 0x13
 9829 0006 0B       		.uleb128 0xb
 9830 0007 03       		.uleb128 0x3
 9831 0008 0E       		.uleb128 0xe
 9832 0009 1B       		.uleb128 0x1b
 9833 000a 0E       		.uleb128 0xe
 9834 000b 55       		.uleb128 0x55
 9835 000c 17       		.uleb128 0x17
 9836 000d 11       		.uleb128 0x11
 9837 000e 01       		.uleb128 0x1
 9838 000f 10       		.uleb128 0x10
 9839 0010 17       		.uleb128 0x17
 9840 0011 00       		.byte	0
 9841 0012 00       		.byte	0
 9842 0013 02       		.uleb128 0x2
 9843 0014 16       		.uleb128 0x16
 9844 0015 00       		.byte	0
 9845 0016 03       		.uleb128 0x3
 9846 0017 0E       		.uleb128 0xe
 9847 0018 3A       		.uleb128 0x3a
 9848 0019 0B       		.uleb128 0xb
 9849 001a 3B       		.uleb128 0x3b
 9850 001b 0B       		.uleb128 0xb
 9851 001c 49       		.uleb128 0x49
 9852 001d 13       		.uleb128 0x13
 9853 001e 00       		.byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 278


 9854 001f 00       		.byte	0
 9855 0020 03       		.uleb128 0x3
 9856 0021 24       		.uleb128 0x24
 9857 0022 00       		.byte	0
 9858 0023 0B       		.uleb128 0xb
 9859 0024 0B       		.uleb128 0xb
 9860 0025 3E       		.uleb128 0x3e
 9861 0026 0B       		.uleb128 0xb
 9862 0027 03       		.uleb128 0x3
 9863 0028 0E       		.uleb128 0xe
 9864 0029 00       		.byte	0
 9865 002a 00       		.byte	0
 9866 002b 04       		.uleb128 0x4
 9867 002c 24       		.uleb128 0x24
 9868 002d 00       		.byte	0
 9869 002e 0B       		.uleb128 0xb
 9870 002f 0B       		.uleb128 0xb
 9871 0030 3E       		.uleb128 0x3e
 9872 0031 0B       		.uleb128 0xb
 9873 0032 03       		.uleb128 0x3
 9874 0033 08       		.uleb128 0x8
 9875 0034 00       		.byte	0
 9876 0035 00       		.byte	0
 9877 0036 05       		.uleb128 0x5
 9878 0037 0F       		.uleb128 0xf
 9879 0038 00       		.byte	0
 9880 0039 0B       		.uleb128 0xb
 9881 003a 0B       		.uleb128 0xb
 9882 003b 00       		.byte	0
 9883 003c 00       		.byte	0
 9884 003d 06       		.uleb128 0x6
 9885 003e 0F       		.uleb128 0xf
 9886 003f 00       		.byte	0
 9887 0040 0B       		.uleb128 0xb
 9888 0041 0B       		.uleb128 0xb
 9889 0042 49       		.uleb128 0x49
 9890 0043 13       		.uleb128 0x13
 9891 0044 00       		.byte	0
 9892 0045 00       		.byte	0
 9893 0046 07       		.uleb128 0x7
 9894 0047 26       		.uleb128 0x26
 9895 0048 00       		.byte	0
 9896 0049 49       		.uleb128 0x49
 9897 004a 13       		.uleb128 0x13
 9898 004b 00       		.byte	0
 9899 004c 00       		.byte	0
 9900 004d 08       		.uleb128 0x8
 9901 004e 35       		.uleb128 0x35
 9902 004f 00       		.byte	0
 9903 0050 49       		.uleb128 0x49
 9904 0051 13       		.uleb128 0x13
 9905 0052 00       		.byte	0
 9906 0053 00       		.byte	0
 9907 0054 09       		.uleb128 0x9
 9908 0055 15       		.uleb128 0x15
 9909 0056 01       		.byte	0x1
 9910 0057 27       		.uleb128 0x27
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 279


 9911 0058 19       		.uleb128 0x19
 9912 0059 01       		.uleb128 0x1
 9913 005a 13       		.uleb128 0x13
 9914 005b 00       		.byte	0
 9915 005c 00       		.byte	0
 9916 005d 0A       		.uleb128 0xa
 9917 005e 05       		.uleb128 0x5
 9918 005f 00       		.byte	0
 9919 0060 49       		.uleb128 0x49
 9920 0061 13       		.uleb128 0x13
 9921 0062 00       		.byte	0
 9922 0063 00       		.byte	0
 9923 0064 0B       		.uleb128 0xb
 9924 0065 13       		.uleb128 0x13
 9925 0066 01       		.byte	0x1
 9926 0067 03       		.uleb128 0x3
 9927 0068 0E       		.uleb128 0xe
 9928 0069 0B       		.uleb128 0xb
 9929 006a 0B       		.uleb128 0xb
 9930 006b 3A       		.uleb128 0x3a
 9931 006c 0B       		.uleb128 0xb
 9932 006d 3B       		.uleb128 0x3b
 9933 006e 0B       		.uleb128 0xb
 9934 006f 01       		.uleb128 0x1
 9935 0070 13       		.uleb128 0x13
 9936 0071 00       		.byte	0
 9937 0072 00       		.byte	0
 9938 0073 0C       		.uleb128 0xc
 9939 0074 0D       		.uleb128 0xd
 9940 0075 00       		.byte	0
 9941 0076 03       		.uleb128 0x3
 9942 0077 0E       		.uleb128 0xe
 9943 0078 3A       		.uleb128 0x3a
 9944 0079 0B       		.uleb128 0xb
 9945 007a 3B       		.uleb128 0x3b
 9946 007b 0B       		.uleb128 0xb
 9947 007c 49       		.uleb128 0x49
 9948 007d 13       		.uleb128 0x13
 9949 007e 38       		.uleb128 0x38
 9950 007f 0B       		.uleb128 0xb
 9951 0080 00       		.byte	0
 9952 0081 00       		.byte	0
 9953 0082 0D       		.uleb128 0xd
 9954 0083 04       		.uleb128 0x4
 9955 0084 01       		.byte	0x1
 9956 0085 0B       		.uleb128 0xb
 9957 0086 0B       		.uleb128 0xb
 9958 0087 49       		.uleb128 0x49
 9959 0088 13       		.uleb128 0x13
 9960 0089 3A       		.uleb128 0x3a
 9961 008a 0B       		.uleb128 0xb
 9962 008b 3B       		.uleb128 0x3b
 9963 008c 0B       		.uleb128 0xb
 9964 008d 01       		.uleb128 0x1
 9965 008e 13       		.uleb128 0x13
 9966 008f 00       		.byte	0
 9967 0090 00       		.byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 280


 9968 0091 0E       		.uleb128 0xe
 9969 0092 28       		.uleb128 0x28
 9970 0093 00       		.byte	0
 9971 0094 03       		.uleb128 0x3
 9972 0095 0E       		.uleb128 0xe
 9973 0096 1C       		.uleb128 0x1c
 9974 0097 0B       		.uleb128 0xb
 9975 0098 00       		.byte	0
 9976 0099 00       		.byte	0
 9977 009a 0F       		.uleb128 0xf
 9978 009b 13       		.uleb128 0x13
 9979 009c 01       		.byte	0x1
 9980 009d 03       		.uleb128 0x3
 9981 009e 0E       		.uleb128 0xe
 9982 009f 0B       		.uleb128 0xb
 9983 00a0 0B       		.uleb128 0xb
 9984 00a1 3A       		.uleb128 0x3a
 9985 00a2 0B       		.uleb128 0xb
 9986 00a3 3B       		.uleb128 0x3b
 9987 00a4 05       		.uleb128 0x5
 9988 00a5 01       		.uleb128 0x1
 9989 00a6 13       		.uleb128 0x13
 9990 00a7 00       		.byte	0
 9991 00a8 00       		.byte	0
 9992 00a9 10       		.uleb128 0x10
 9993 00aa 0D       		.uleb128 0xd
 9994 00ab 00       		.byte	0
 9995 00ac 03       		.uleb128 0x3
 9996 00ad 0E       		.uleb128 0xe
 9997 00ae 3A       		.uleb128 0x3a
 9998 00af 0B       		.uleb128 0xb
 9999 00b0 3B       		.uleb128 0x3b
 10000 00b1 05       		.uleb128 0x5
 10001 00b2 49       		.uleb128 0x49
 10002 00b3 13       		.uleb128 0x13
 10003 00b4 38       		.uleb128 0x38
 10004 00b5 0B       		.uleb128 0xb
 10005 00b6 00       		.byte	0
 10006 00b7 00       		.byte	0
 10007 00b8 11       		.uleb128 0x11
 10008 00b9 01       		.uleb128 0x1
 10009 00ba 01       		.byte	0x1
 10010 00bb 49       		.uleb128 0x49
 10011 00bc 13       		.uleb128 0x13
 10012 00bd 01       		.uleb128 0x1
 10013 00be 13       		.uleb128 0x13
 10014 00bf 00       		.byte	0
 10015 00c0 00       		.byte	0
 10016 00c1 12       		.uleb128 0x12
 10017 00c2 21       		.uleb128 0x21
 10018 00c3 00       		.byte	0
 10019 00c4 49       		.uleb128 0x49
 10020 00c5 13       		.uleb128 0x13
 10021 00c6 2F       		.uleb128 0x2f
 10022 00c7 0B       		.uleb128 0xb
 10023 00c8 00       		.byte	0
 10024 00c9 00       		.byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 281


 10025 00ca 13       		.uleb128 0x13
 10026 00cb 16       		.uleb128 0x16
 10027 00cc 00       		.byte	0
 10028 00cd 03       		.uleb128 0x3
 10029 00ce 0E       		.uleb128 0xe
 10030 00cf 3A       		.uleb128 0x3a
 10031 00d0 0B       		.uleb128 0xb
 10032 00d1 3B       		.uleb128 0x3b
 10033 00d2 05       		.uleb128 0x5
 10034 00d3 49       		.uleb128 0x49
 10035 00d4 13       		.uleb128 0x13
 10036 00d5 00       		.byte	0
 10037 00d6 00       		.byte	0
 10038 00d7 14       		.uleb128 0x14
 10039 00d8 2E       		.uleb128 0x2e
 10040 00d9 01       		.byte	0x1
 10041 00da 03       		.uleb128 0x3
 10042 00db 0E       		.uleb128 0xe
 10043 00dc 3A       		.uleb128 0x3a
 10044 00dd 0B       		.uleb128 0xb
 10045 00de 3B       		.uleb128 0x3b
 10046 00df 0B       		.uleb128 0xb
 10047 00e0 27       		.uleb128 0x27
 10048 00e1 19       		.uleb128 0x19
 10049 00e2 49       		.uleb128 0x49
 10050 00e3 13       		.uleb128 0x13
 10051 00e4 20       		.uleb128 0x20
 10052 00e5 0B       		.uleb128 0xb
 10053 00e6 01       		.uleb128 0x1
 10054 00e7 13       		.uleb128 0x13
 10055 00e8 00       		.byte	0
 10056 00e9 00       		.byte	0
 10057 00ea 15       		.uleb128 0x15
 10058 00eb 34       		.uleb128 0x34
 10059 00ec 00       		.byte	0
 10060 00ed 03       		.uleb128 0x3
 10061 00ee 0E       		.uleb128 0xe
 10062 00ef 3A       		.uleb128 0x3a
 10063 00f0 0B       		.uleb128 0xb
 10064 00f1 3B       		.uleb128 0x3b
 10065 00f2 0B       		.uleb128 0xb
 10066 00f3 49       		.uleb128 0x49
 10067 00f4 13       		.uleb128 0x13
 10068 00f5 00       		.byte	0
 10069 00f6 00       		.byte	0
 10070 00f7 16       		.uleb128 0x16
 10071 00f8 2E       		.uleb128 0x2e
 10072 00f9 01       		.byte	0x1
 10073 00fa 03       		.uleb128 0x3
 10074 00fb 0E       		.uleb128 0xe
 10075 00fc 3A       		.uleb128 0x3a
 10076 00fd 0B       		.uleb128 0xb
 10077 00fe 3B       		.uleb128 0x3b
 10078 00ff 0B       		.uleb128 0xb
 10079 0100 27       		.uleb128 0x27
 10080 0101 19       		.uleb128 0x19
 10081 0102 20       		.uleb128 0x20
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 282


 10082 0103 0B       		.uleb128 0xb
 10083 0104 01       		.uleb128 0x1
 10084 0105 13       		.uleb128 0x13
 10085 0106 00       		.byte	0
 10086 0107 00       		.byte	0
 10087 0108 17       		.uleb128 0x17
 10088 0109 05       		.uleb128 0x5
 10089 010a 00       		.byte	0
 10090 010b 03       		.uleb128 0x3
 10091 010c 0E       		.uleb128 0xe
 10092 010d 3A       		.uleb128 0x3a
 10093 010e 0B       		.uleb128 0xb
 10094 010f 3B       		.uleb128 0x3b
 10095 0110 0B       		.uleb128 0xb
 10096 0111 49       		.uleb128 0x49
 10097 0112 13       		.uleb128 0x13
 10098 0113 00       		.byte	0
 10099 0114 00       		.byte	0
 10100 0115 18       		.uleb128 0x18
 10101 0116 2E       		.uleb128 0x2e
 10102 0117 01       		.byte	0x1
 10103 0118 03       		.uleb128 0x3
 10104 0119 0E       		.uleb128 0xe
 10105 011a 3A       		.uleb128 0x3a
 10106 011b 0B       		.uleb128 0xb
 10107 011c 3B       		.uleb128 0x3b
 10108 011d 05       		.uleb128 0x5
 10109 011e 27       		.uleb128 0x27
 10110 011f 19       		.uleb128 0x19
 10111 0120 49       		.uleb128 0x49
 10112 0121 13       		.uleb128 0x13
 10113 0122 11       		.uleb128 0x11
 10114 0123 01       		.uleb128 0x1
 10115 0124 12       		.uleb128 0x12
 10116 0125 06       		.uleb128 0x6
 10117 0126 40       		.uleb128 0x40
 10118 0127 18       		.uleb128 0x18
 10119 0128 9742     		.uleb128 0x2117
 10120 012a 19       		.uleb128 0x19
 10121 012b 01       		.uleb128 0x1
 10122 012c 13       		.uleb128 0x13
 10123 012d 00       		.byte	0
 10124 012e 00       		.byte	0
 10125 012f 19       		.uleb128 0x19
 10126 0130 05       		.uleb128 0x5
 10127 0131 00       		.byte	0
 10128 0132 03       		.uleb128 0x3
 10129 0133 0E       		.uleb128 0xe
 10130 0134 3A       		.uleb128 0x3a
 10131 0135 0B       		.uleb128 0xb
 10132 0136 3B       		.uleb128 0x3b
 10133 0137 05       		.uleb128 0x5
 10134 0138 49       		.uleb128 0x49
 10135 0139 13       		.uleb128 0x13
 10136 013a 02       		.uleb128 0x2
 10137 013b 17       		.uleb128 0x17
 10138 013c 00       		.byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 283


 10139 013d 00       		.byte	0
 10140 013e 1A       		.uleb128 0x1a
 10141 013f 34       		.uleb128 0x34
 10142 0140 00       		.byte	0
 10143 0141 03       		.uleb128 0x3
 10144 0142 0E       		.uleb128 0xe
 10145 0143 3A       		.uleb128 0x3a
 10146 0144 0B       		.uleb128 0xb
 10147 0145 3B       		.uleb128 0x3b
 10148 0146 05       		.uleb128 0x5
 10149 0147 49       		.uleb128 0x49
 10150 0148 13       		.uleb128 0x13
 10151 0149 02       		.uleb128 0x2
 10152 014a 17       		.uleb128 0x17
 10153 014b 00       		.byte	0
 10154 014c 00       		.byte	0
 10155 014d 1B       		.uleb128 0x1b
 10156 014e 2E       		.uleb128 0x2e
 10157 014f 01       		.byte	0x1
 10158 0150 03       		.uleb128 0x3
 10159 0151 0E       		.uleb128 0xe
 10160 0152 3A       		.uleb128 0x3a
 10161 0153 0B       		.uleb128 0xb
 10162 0154 3B       		.uleb128 0x3b
 10163 0155 05       		.uleb128 0x5
 10164 0156 27       		.uleb128 0x27
 10165 0157 19       		.uleb128 0x19
 10166 0158 11       		.uleb128 0x11
 10167 0159 01       		.uleb128 0x1
 10168 015a 12       		.uleb128 0x12
 10169 015b 06       		.uleb128 0x6
 10170 015c 40       		.uleb128 0x40
 10171 015d 18       		.uleb128 0x18
 10172 015e 9742     		.uleb128 0x2117
 10173 0160 19       		.uleb128 0x19
 10174 0161 01       		.uleb128 0x1
 10175 0162 13       		.uleb128 0x13
 10176 0163 00       		.byte	0
 10177 0164 00       		.byte	0
 10178 0165 1C       		.uleb128 0x1c
 10179 0166 898201   		.uleb128 0x4109
 10180 0169 00       		.byte	0
 10181 016a 11       		.uleb128 0x11
 10182 016b 01       		.uleb128 0x1
 10183 016c 31       		.uleb128 0x31
 10184 016d 13       		.uleb128 0x13
 10185 016e 00       		.byte	0
 10186 016f 00       		.byte	0
 10187 0170 1D       		.uleb128 0x1d
 10188 0171 898201   		.uleb128 0x4109
 10189 0174 01       		.byte	0x1
 10190 0175 11       		.uleb128 0x11
 10191 0176 01       		.uleb128 0x1
 10192 0177 31       		.uleb128 0x31
 10193 0178 13       		.uleb128 0x13
 10194 0179 00       		.byte	0
 10195 017a 00       		.byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 284


 10196 017b 1E       		.uleb128 0x1e
 10197 017c 8A8201   		.uleb128 0x410a
 10198 017f 00       		.byte	0
 10199 0180 02       		.uleb128 0x2
 10200 0181 18       		.uleb128 0x18
 10201 0182 9142     		.uleb128 0x2111
 10202 0184 18       		.uleb128 0x18
 10203 0185 00       		.byte	0
 10204 0186 00       		.byte	0
 10205 0187 1F       		.uleb128 0x1f
 10206 0188 05       		.uleb128 0x5
 10207 0189 00       		.byte	0
 10208 018a 03       		.uleb128 0x3
 10209 018b 0E       		.uleb128 0xe
 10210 018c 3A       		.uleb128 0x3a
 10211 018d 0B       		.uleb128 0xb
 10212 018e 3B       		.uleb128 0x3b
 10213 018f 05       		.uleb128 0x5
 10214 0190 49       		.uleb128 0x49
 10215 0191 13       		.uleb128 0x13
 10216 0192 02       		.uleb128 0x2
 10217 0193 18       		.uleb128 0x18
 10218 0194 00       		.byte	0
 10219 0195 00       		.byte	0
 10220 0196 20       		.uleb128 0x20
 10221 0197 34       		.uleb128 0x34
 10222 0198 00       		.byte	0
 10223 0199 03       		.uleb128 0x3
 10224 019a 0E       		.uleb128 0xe
 10225 019b 3A       		.uleb128 0x3a
 10226 019c 0B       		.uleb128 0xb
 10227 019d 3B       		.uleb128 0x3b
 10228 019e 05       		.uleb128 0x5
 10229 019f 49       		.uleb128 0x49
 10230 01a0 13       		.uleb128 0x13
 10231 01a1 02       		.uleb128 0x2
 10232 01a2 18       		.uleb128 0x18
 10233 01a3 00       		.byte	0
 10234 01a4 00       		.byte	0
 10235 01a5 21       		.uleb128 0x21
 10236 01a6 34       		.uleb128 0x34
 10237 01a7 00       		.byte	0
 10238 01a8 03       		.uleb128 0x3
 10239 01a9 08       		.uleb128 0x8
 10240 01aa 3A       		.uleb128 0x3a
 10241 01ab 0B       		.uleb128 0xb
 10242 01ac 3B       		.uleb128 0x3b
 10243 01ad 05       		.uleb128 0x5
 10244 01ae 49       		.uleb128 0x49
 10245 01af 13       		.uleb128 0x13
 10246 01b0 02       		.uleb128 0x2
 10247 01b1 17       		.uleb128 0x17
 10248 01b2 00       		.byte	0
 10249 01b3 00       		.byte	0
 10250 01b4 22       		.uleb128 0x22
 10251 01b5 898201   		.uleb128 0x4109
 10252 01b8 01       		.byte	0x1
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 285


 10253 01b9 11       		.uleb128 0x11
 10254 01ba 01       		.uleb128 0x1
 10255 01bb 31       		.uleb128 0x31
 10256 01bc 13       		.uleb128 0x13
 10257 01bd 01       		.uleb128 0x1
 10258 01be 13       		.uleb128 0x13
 10259 01bf 00       		.byte	0
 10260 01c0 00       		.byte	0
 10261 01c1 23       		.uleb128 0x23
 10262 01c2 0B       		.uleb128 0xb
 10263 01c3 01       		.byte	0x1
 10264 01c4 11       		.uleb128 0x11
 10265 01c5 01       		.uleb128 0x1
 10266 01c6 12       		.uleb128 0x12
 10267 01c7 06       		.uleb128 0x6
 10268 01c8 00       		.byte	0
 10269 01c9 00       		.byte	0
 10270 01ca 24       		.uleb128 0x24
 10271 01cb 2E       		.uleb128 0x2e
 10272 01cc 01       		.byte	0x1
 10273 01cd 03       		.uleb128 0x3
 10274 01ce 0E       		.uleb128 0xe
 10275 01cf 3A       		.uleb128 0x3a
 10276 01d0 0B       		.uleb128 0xb
 10277 01d1 3B       		.uleb128 0x3b
 10278 01d2 05       		.uleb128 0x5
 10279 01d3 27       		.uleb128 0x27
 10280 01d4 19       		.uleb128 0x19
 10281 01d5 8701     		.uleb128 0x87
 10282 01d7 19       		.uleb128 0x19
 10283 01d8 11       		.uleb128 0x11
 10284 01d9 01       		.uleb128 0x1
 10285 01da 12       		.uleb128 0x12
 10286 01db 06       		.uleb128 0x6
 10287 01dc 40       		.uleb128 0x40
 10288 01dd 18       		.uleb128 0x18
 10289 01de 9742     		.uleb128 0x2117
 10290 01e0 19       		.uleb128 0x19
 10291 01e1 01       		.uleb128 0x1
 10292 01e2 13       		.uleb128 0x13
 10293 01e3 00       		.byte	0
 10294 01e4 00       		.byte	0
 10295 01e5 25       		.uleb128 0x25
 10296 01e6 2E       		.uleb128 0x2e
 10297 01e7 01       		.byte	0x1
 10298 01e8 3F       		.uleb128 0x3f
 10299 01e9 19       		.uleb128 0x19
 10300 01ea 03       		.uleb128 0x3
 10301 01eb 0E       		.uleb128 0xe
 10302 01ec 3A       		.uleb128 0x3a
 10303 01ed 0B       		.uleb128 0xb
 10304 01ee 3B       		.uleb128 0x3b
 10305 01ef 05       		.uleb128 0x5
 10306 01f0 27       		.uleb128 0x27
 10307 01f1 19       		.uleb128 0x19
 10308 01f2 49       		.uleb128 0x49
 10309 01f3 13       		.uleb128 0x13
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 286


 10310 01f4 11       		.uleb128 0x11
 10311 01f5 01       		.uleb128 0x1
 10312 01f6 12       		.uleb128 0x12
 10313 01f7 06       		.uleb128 0x6
 10314 01f8 40       		.uleb128 0x40
 10315 01f9 18       		.uleb128 0x18
 10316 01fa 9742     		.uleb128 0x2117
 10317 01fc 19       		.uleb128 0x19
 10318 01fd 01       		.uleb128 0x1
 10319 01fe 13       		.uleb128 0x13
 10320 01ff 00       		.byte	0
 10321 0200 00       		.byte	0
 10322 0201 26       		.uleb128 0x26
 10323 0202 0B       		.uleb128 0xb
 10324 0203 01       		.byte	0x1
 10325 0204 11       		.uleb128 0x11
 10326 0205 01       		.uleb128 0x1
 10327 0206 12       		.uleb128 0x12
 10328 0207 06       		.uleb128 0x6
 10329 0208 01       		.uleb128 0x1
 10330 0209 13       		.uleb128 0x13
 10331 020a 00       		.byte	0
 10332 020b 00       		.byte	0
 10333 020c 27       		.uleb128 0x27
 10334 020d 2E       		.uleb128 0x2e
 10335 020e 01       		.byte	0x1
 10336 020f 3F       		.uleb128 0x3f
 10337 0210 19       		.uleb128 0x19
 10338 0211 03       		.uleb128 0x3
 10339 0212 0E       		.uleb128 0xe
 10340 0213 3A       		.uleb128 0x3a
 10341 0214 0B       		.uleb128 0xb
 10342 0215 3B       		.uleb128 0x3b
 10343 0216 05       		.uleb128 0x5
 10344 0217 27       		.uleb128 0x27
 10345 0218 19       		.uleb128 0x19
 10346 0219 11       		.uleb128 0x11
 10347 021a 01       		.uleb128 0x1
 10348 021b 12       		.uleb128 0x12
 10349 021c 06       		.uleb128 0x6
 10350 021d 40       		.uleb128 0x40
 10351 021e 18       		.uleb128 0x18
 10352 021f 9742     		.uleb128 0x2117
 10353 0221 19       		.uleb128 0x19
 10354 0222 01       		.uleb128 0x1
 10355 0223 13       		.uleb128 0x13
 10356 0224 00       		.byte	0
 10357 0225 00       		.byte	0
 10358 0226 28       		.uleb128 0x28
 10359 0227 34       		.uleb128 0x34
 10360 0228 00       		.byte	0
 10361 0229 03       		.uleb128 0x3
 10362 022a 0E       		.uleb128 0xe
 10363 022b 3A       		.uleb128 0x3a
 10364 022c 0B       		.uleb128 0xb
 10365 022d 3B       		.uleb128 0x3b
 10366 022e 05       		.uleb128 0x5
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 287


 10367 022f 49       		.uleb128 0x49
 10368 0230 13       		.uleb128 0x13
 10369 0231 00       		.byte	0
 10370 0232 00       		.byte	0
 10371 0233 29       		.uleb128 0x29
 10372 0234 1D       		.uleb128 0x1d
 10373 0235 01       		.byte	0x1
 10374 0236 31       		.uleb128 0x31
 10375 0237 13       		.uleb128 0x13
 10376 0238 11       		.uleb128 0x11
 10377 0239 01       		.uleb128 0x1
 10378 023a 12       		.uleb128 0x12
 10379 023b 06       		.uleb128 0x6
 10380 023c 58       		.uleb128 0x58
 10381 023d 0B       		.uleb128 0xb
 10382 023e 59       		.uleb128 0x59
 10383 023f 05       		.uleb128 0x5
 10384 0240 01       		.uleb128 0x1
 10385 0241 13       		.uleb128 0x13
 10386 0242 00       		.byte	0
 10387 0243 00       		.byte	0
 10388 0244 2A       		.uleb128 0x2a
 10389 0245 34       		.uleb128 0x34
 10390 0246 00       		.byte	0
 10391 0247 31       		.uleb128 0x31
 10392 0248 13       		.uleb128 0x13
 10393 0249 00       		.byte	0
 10394 024a 00       		.byte	0
 10395 024b 2B       		.uleb128 0x2b
 10396 024c 1D       		.uleb128 0x1d
 10397 024d 01       		.byte	0x1
 10398 024e 31       		.uleb128 0x31
 10399 024f 13       		.uleb128 0x13
 10400 0250 11       		.uleb128 0x11
 10401 0251 01       		.uleb128 0x1
 10402 0252 12       		.uleb128 0x12
 10403 0253 06       		.uleb128 0x6
 10404 0254 58       		.uleb128 0x58
 10405 0255 0B       		.uleb128 0xb
 10406 0256 59       		.uleb128 0x59
 10407 0257 05       		.uleb128 0x5
 10408 0258 00       		.byte	0
 10409 0259 00       		.byte	0
 10410 025a 2C       		.uleb128 0x2c
 10411 025b 05       		.uleb128 0x5
 10412 025c 00       		.byte	0
 10413 025d 31       		.uleb128 0x31
 10414 025e 13       		.uleb128 0x13
 10415 025f 02       		.uleb128 0x2
 10416 0260 17       		.uleb128 0x17
 10417 0261 00       		.byte	0
 10418 0262 00       		.byte	0
 10419 0263 2D       		.uleb128 0x2d
 10420 0264 2E       		.uleb128 0x2e
 10421 0265 00       		.byte	0
 10422 0266 3F       		.uleb128 0x3f
 10423 0267 19       		.uleb128 0x19
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 288


 10424 0268 03       		.uleb128 0x3
 10425 0269 0E       		.uleb128 0xe
 10426 026a 3A       		.uleb128 0x3a
 10427 026b 0B       		.uleb128 0xb
 10428 026c 3B       		.uleb128 0x3b
 10429 026d 05       		.uleb128 0x5
 10430 026e 27       		.uleb128 0x27
 10431 026f 19       		.uleb128 0x19
 10432 0270 11       		.uleb128 0x11
 10433 0271 01       		.uleb128 0x1
 10434 0272 12       		.uleb128 0x12
 10435 0273 06       		.uleb128 0x6
 10436 0274 40       		.uleb128 0x40
 10437 0275 18       		.uleb128 0x18
 10438 0276 9742     		.uleb128 0x2117
 10439 0278 19       		.uleb128 0x19
 10440 0279 00       		.byte	0
 10441 027a 00       		.byte	0
 10442 027b 2E       		.uleb128 0x2e
 10443 027c 34       		.uleb128 0x34
 10444 027d 00       		.byte	0
 10445 027e 03       		.uleb128 0x3
 10446 027f 0E       		.uleb128 0xe
 10447 0280 3A       		.uleb128 0x3a
 10448 0281 0B       		.uleb128 0xb
 10449 0282 3B       		.uleb128 0x3b
 10450 0283 05       		.uleb128 0x5
 10451 0284 49       		.uleb128 0x49
 10452 0285 13       		.uleb128 0x13
 10453 0286 1C       		.uleb128 0x1c
 10454 0287 0B       		.uleb128 0xb
 10455 0288 00       		.byte	0
 10456 0289 00       		.byte	0
 10457 028a 2F       		.uleb128 0x2f
 10458 028b 2E       		.uleb128 0x2e
 10459 028c 00       		.byte	0
 10460 028d 3F       		.uleb128 0x3f
 10461 028e 19       		.uleb128 0x19
 10462 028f 03       		.uleb128 0x3
 10463 0290 0E       		.uleb128 0xe
 10464 0291 3A       		.uleb128 0x3a
 10465 0292 0B       		.uleb128 0xb
 10466 0293 3B       		.uleb128 0x3b
 10467 0294 05       		.uleb128 0x5
 10468 0295 27       		.uleb128 0x27
 10469 0296 19       		.uleb128 0x19
 10470 0297 49       		.uleb128 0x49
 10471 0298 13       		.uleb128 0x13
 10472 0299 11       		.uleb128 0x11
 10473 029a 01       		.uleb128 0x1
 10474 029b 12       		.uleb128 0x12
 10475 029c 06       		.uleb128 0x6
 10476 029d 40       		.uleb128 0x40
 10477 029e 18       		.uleb128 0x18
 10478 029f 9742     		.uleb128 0x2117
 10479 02a1 19       		.uleb128 0x19
 10480 02a2 00       		.byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 289


 10481 02a3 00       		.byte	0
 10482 02a4 30       		.uleb128 0x30
 10483 02a5 0B       		.uleb128 0xb
 10484 02a6 01       		.byte	0x1
 10485 02a7 55       		.uleb128 0x55
 10486 02a8 17       		.uleb128 0x17
 10487 02a9 00       		.byte	0
 10488 02aa 00       		.byte	0
 10489 02ab 31       		.uleb128 0x31
 10490 02ac 0B       		.uleb128 0xb
 10491 02ad 01       		.byte	0x1
 10492 02ae 55       		.uleb128 0x55
 10493 02af 17       		.uleb128 0x17
 10494 02b0 01       		.uleb128 0x1
 10495 02b1 13       		.uleb128 0x13
 10496 02b2 00       		.byte	0
 10497 02b3 00       		.byte	0
 10498 02b4 32       		.uleb128 0x32
 10499 02b5 34       		.uleb128 0x34
 10500 02b6 00       		.byte	0
 10501 02b7 03       		.uleb128 0x3
 10502 02b8 0E       		.uleb128 0xe
 10503 02b9 3A       		.uleb128 0x3a
 10504 02ba 0B       		.uleb128 0xb
 10505 02bb 3B       		.uleb128 0x3b
 10506 02bc 05       		.uleb128 0x5
 10507 02bd 49       		.uleb128 0x49
 10508 02be 13       		.uleb128 0x13
 10509 02bf 1C       		.uleb128 0x1c
 10510 02c0 0D       		.uleb128 0xd
 10511 02c1 00       		.byte	0
 10512 02c2 00       		.byte	0
 10513 02c3 33       		.uleb128 0x33
 10514 02c4 34       		.uleb128 0x34
 10515 02c5 00       		.byte	0
 10516 02c6 31       		.uleb128 0x31
 10517 02c7 13       		.uleb128 0x13
 10518 02c8 02       		.uleb128 0x2
 10519 02c9 18       		.uleb128 0x18
 10520 02ca 00       		.byte	0
 10521 02cb 00       		.byte	0
 10522 02cc 34       		.uleb128 0x34
 10523 02cd 34       		.uleb128 0x34
 10524 02ce 00       		.byte	0
 10525 02cf 03       		.uleb128 0x3
 10526 02d0 08       		.uleb128 0x8
 10527 02d1 3A       		.uleb128 0x3a
 10528 02d2 0B       		.uleb128 0xb
 10529 02d3 3B       		.uleb128 0x3b
 10530 02d4 05       		.uleb128 0x5
 10531 02d5 49       		.uleb128 0x49
 10532 02d6 13       		.uleb128 0x13
 10533 02d7 02       		.uleb128 0x2
 10534 02d8 18       		.uleb128 0x18
 10535 02d9 00       		.byte	0
 10536 02da 00       		.byte	0
 10537 02db 35       		.uleb128 0x35
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 290


 10538 02dc 34       		.uleb128 0x34
 10539 02dd 00       		.byte	0
 10540 02de 03       		.uleb128 0x3
 10541 02df 0E       		.uleb128 0xe
 10542 02e0 3A       		.uleb128 0x3a
 10543 02e1 0B       		.uleb128 0xb
 10544 02e2 3B       		.uleb128 0x3b
 10545 02e3 05       		.uleb128 0x5
 10546 02e4 49       		.uleb128 0x49
 10547 02e5 13       		.uleb128 0x13
 10548 02e6 3F       		.uleb128 0x3f
 10549 02e7 19       		.uleb128 0x19
 10550 02e8 3C       		.uleb128 0x3c
 10551 02e9 19       		.uleb128 0x19
 10552 02ea 00       		.byte	0
 10553 02eb 00       		.byte	0
 10554 02ec 36       		.uleb128 0x36
 10555 02ed 34       		.uleb128 0x34
 10556 02ee 00       		.byte	0
 10557 02ef 03       		.uleb128 0x3
 10558 02f0 0E       		.uleb128 0xe
 10559 02f1 3A       		.uleb128 0x3a
 10560 02f2 0B       		.uleb128 0xb
 10561 02f3 3B       		.uleb128 0x3b
 10562 02f4 05       		.uleb128 0x5
 10563 02f5 49       		.uleb128 0x49
 10564 02f6 13       		.uleb128 0x13
 10565 02f7 3F       		.uleb128 0x3f
 10566 02f8 19       		.uleb128 0x19
 10567 02f9 02       		.uleb128 0x2
 10568 02fa 18       		.uleb128 0x18
 10569 02fb 00       		.byte	0
 10570 02fc 00       		.byte	0
 10571 02fd 37       		.uleb128 0x37
 10572 02fe 2E       		.uleb128 0x2e
 10573 02ff 00       		.byte	0
 10574 0300 3F       		.uleb128 0x3f
 10575 0301 19       		.uleb128 0x19
 10576 0302 3C       		.uleb128 0x3c
 10577 0303 19       		.uleb128 0x19
 10578 0304 6E       		.uleb128 0x6e
 10579 0305 0E       		.uleb128 0xe
 10580 0306 03       		.uleb128 0x3
 10581 0307 0E       		.uleb128 0xe
 10582 0308 3A       		.uleb128 0x3a
 10583 0309 0B       		.uleb128 0xb
 10584 030a 3B       		.uleb128 0x3b
 10585 030b 0B       		.uleb128 0xb
 10586 030c 00       		.byte	0
 10587 030d 00       		.byte	0
 10588 030e 38       		.uleb128 0x38
 10589 030f 2E       		.uleb128 0x2e
 10590 0310 00       		.byte	0
 10591 0311 3F       		.uleb128 0x3f
 10592 0312 19       		.uleb128 0x19
 10593 0313 3C       		.uleb128 0x3c
 10594 0314 19       		.uleb128 0x19
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 291


 10595 0315 6E       		.uleb128 0x6e
 10596 0316 0E       		.uleb128 0xe
 10597 0317 03       		.uleb128 0x3
 10598 0318 0E       		.uleb128 0xe
 10599 0319 3A       		.uleb128 0x3a
 10600 031a 0B       		.uleb128 0xb
 10601 031b 3B       		.uleb128 0x3b
 10602 031c 05       		.uleb128 0x5
 10603 031d 00       		.byte	0
 10604 031e 00       		.byte	0
 10605 031f 00       		.byte	0
 10606              		.section	.debug_loc,"",%progbits
 10607              	.Ldebug_loc0:
 10608              	.LLST0:
 10609 0000 00000000 		.4byte	.LVL0
 10610 0004 20000000 		.4byte	.LVL1
 10611 0008 0100     		.2byte	0x1
 10612 000a 50       		.byte	0x50
 10613 000b 20000000 		.4byte	.LVL1
 10614 000f 22000000 		.4byte	.LVL2
 10615 0013 0400     		.2byte	0x4
 10616 0015 F3       		.byte	0xf3
 10617 0016 01       		.uleb128 0x1
 10618 0017 50       		.byte	0x50
 10619 0018 9F       		.byte	0x9f
 10620 0019 22000000 		.4byte	.LVL2
 10621 001d 24000000 		.4byte	.LVL3
 10622 0021 0100     		.2byte	0x1
 10623 0023 50       		.byte	0x50
 10624 0024 24000000 		.4byte	.LVL3
 10625 0028 26000000 		.4byte	.LVL4
 10626 002c 0400     		.2byte	0x4
 10627 002e F3       		.byte	0xf3
 10628 002f 01       		.uleb128 0x1
 10629 0030 50       		.byte	0x50
 10630 0031 9F       		.byte	0x9f
 10631 0032 26000000 		.4byte	.LVL4
 10632 0036 28000000 		.4byte	.LVL5
 10633 003a 0100     		.2byte	0x1
 10634 003c 50       		.byte	0x50
 10635 003d 28000000 		.4byte	.LVL5
 10636 0041 2A000000 		.4byte	.LVL6
 10637 0045 0400     		.2byte	0x4
 10638 0047 F3       		.byte	0xf3
 10639 0048 01       		.uleb128 0x1
 10640 0049 50       		.byte	0x50
 10641 004a 9F       		.byte	0x9f
 10642 004b 2A000000 		.4byte	.LVL6
 10643 004f 2C000000 		.4byte	.LVL7
 10644 0053 0100     		.2byte	0x1
 10645 0055 50       		.byte	0x50
 10646 0056 2C000000 		.4byte	.LVL7
 10647 005a 38000000 		.4byte	.LFE80
 10648 005e 0400     		.2byte	0x4
 10649 0060 F3       		.byte	0xf3
 10650 0061 01       		.uleb128 0x1
 10651 0062 50       		.byte	0x50
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 292


 10652 0063 9F       		.byte	0x9f
 10653 0064 00000000 		.4byte	0
 10654 0068 00000000 		.4byte	0
 10655              	.LLST1:
 10656 006c 00000000 		.4byte	.LVL0
 10657 0070 2C000000 		.4byte	.LVL7
 10658 0074 0200     		.2byte	0x2
 10659 0076 30       		.byte	0x30
 10660 0077 9F       		.byte	0x9f
 10661 0078 2C000000 		.4byte	.LVL7
 10662 007c 38000000 		.4byte	.LFE80
 10663 0080 0100     		.2byte	0x1
 10664 0082 50       		.byte	0x50
 10665 0083 00000000 		.4byte	0
 10666 0087 00000000 		.4byte	0
 10667              	.LLST2:
 10668 008b 00000000 		.4byte	.LVL0
 10669 008f 20000000 		.4byte	.LVL1
 10670 0093 0100     		.2byte	0x1
 10671 0095 50       		.byte	0x50
 10672 0096 20000000 		.4byte	.LVL1
 10673 009a 22000000 		.4byte	.LVL2
 10674 009e 0400     		.2byte	0x4
 10675 00a0 F3       		.byte	0xf3
 10676 00a1 01       		.uleb128 0x1
 10677 00a2 50       		.byte	0x50
 10678 00a3 9F       		.byte	0x9f
 10679 00a4 22000000 		.4byte	.LVL2
 10680 00a8 24000000 		.4byte	.LVL3
 10681 00ac 0100     		.2byte	0x1
 10682 00ae 50       		.byte	0x50
 10683 00af 24000000 		.4byte	.LVL3
 10684 00b3 26000000 		.4byte	.LVL4
 10685 00b7 0400     		.2byte	0x4
 10686 00b9 F3       		.byte	0xf3
 10687 00ba 01       		.uleb128 0x1
 10688 00bb 50       		.byte	0x50
 10689 00bc 9F       		.byte	0x9f
 10690 00bd 26000000 		.4byte	.LVL4
 10691 00c1 28000000 		.4byte	.LVL5
 10692 00c5 0100     		.2byte	0x1
 10693 00c7 50       		.byte	0x50
 10694 00c8 28000000 		.4byte	.LVL5
 10695 00cc 2A000000 		.4byte	.LVL6
 10696 00d0 0400     		.2byte	0x4
 10697 00d2 F3       		.byte	0xf3
 10698 00d3 01       		.uleb128 0x1
 10699 00d4 50       		.byte	0x50
 10700 00d5 9F       		.byte	0x9f
 10701 00d6 2A000000 		.4byte	.LVL6
 10702 00da 2C000000 		.4byte	.LVL7
 10703 00de 0100     		.2byte	0x1
 10704 00e0 50       		.byte	0x50
 10705 00e1 2C000000 		.4byte	.LVL7
 10706 00e5 38000000 		.4byte	.LFE80
 10707 00e9 0400     		.2byte	0x4
 10708 00eb F3       		.byte	0xf3
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 293


 10709 00ec 01       		.uleb128 0x1
 10710 00ed 50       		.byte	0x50
 10711 00ee 9F       		.byte	0x9f
 10712 00ef 00000000 		.4byte	0
 10713 00f3 00000000 		.4byte	0
 10714              	.LLST3:
 10715 00f7 00000000 		.4byte	.LVL8
 10716 00fb 06000000 		.4byte	.LVL10
 10717 00ff 0100     		.2byte	0x1
 10718 0101 50       		.byte	0x50
 10719 0102 06000000 		.4byte	.LVL10
 10720 0106 12000000 		.4byte	.LVL13
 10721 010a 0100     		.2byte	0x1
 10722 010c 50       		.byte	0x50
 10723 010d 00000000 		.4byte	0
 10724 0111 00000000 		.4byte	0
 10725              	.LLST4:
 10726 0115 00000000 		.4byte	.LVL8
 10727 0119 04000000 		.4byte	.LVL9
 10728 011d 0200     		.2byte	0x2
 10729 011f 30       		.byte	0x30
 10730 0120 9F       		.byte	0x9f
 10731 0121 04000000 		.4byte	.LVL9
 10732 0125 0E000000 		.4byte	.LVL12
 10733 0129 0100     		.2byte	0x1
 10734 012b 53       		.byte	0x53
 10735 012c 0E000000 		.4byte	.LVL12
 10736 0130 14000000 		.4byte	.LFE109
 10737 0134 0500     		.2byte	0x5
 10738 0136 73       		.byte	0x73
 10739 0137 00       		.sleb128 0
 10740 0138 32       		.byte	0x32
 10741 0139 25       		.byte	0x25
 10742 013a 9F       		.byte	0x9f
 10743 013b 00000000 		.4byte	0
 10744 013f 00000000 		.4byte	0
 10745              	.LLST5:
 10746 0143 22000000 		.4byte	.LVL14
 10747 0147 24000000 		.4byte	.LVL15
 10748 014b 0100     		.2byte	0x1
 10749 014d 52       		.byte	0x52
 10750 014e 00000000 		.4byte	0
 10751 0152 00000000 		.4byte	0
 10752              	.LLST6:
 10753 0156 00000000 		.4byte	.LVL16
 10754 015a 06000000 		.4byte	.LVL17
 10755 015e 0100     		.2byte	0x1
 10756 0160 50       		.byte	0x50
 10757 0161 06000000 		.4byte	.LVL17
 10758 0165 12000000 		.4byte	.LFE111
 10759 0169 0100     		.2byte	0x1
 10760 016b 54       		.byte	0x54
 10761 016c 00000000 		.4byte	0
 10762 0170 00000000 		.4byte	0
 10763              	.LLST7:
 10764 0174 00000000 		.4byte	.LVL20
 10765 0178 1A000000 		.4byte	.LVL23
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 294


 10766 017c 0100     		.2byte	0x1
 10767 017e 50       		.byte	0x50
 10768 017f 1A000000 		.4byte	.LVL23
 10769 0183 92000000 		.4byte	.LFE70
 10770 0187 0100     		.2byte	0x1
 10771 0189 59       		.byte	0x59
 10772 018a 00000000 		.4byte	0
 10773 018e 00000000 		.4byte	0
 10774              	.LLST8:
 10775 0192 00000000 		.4byte	.LVL20
 10776 0196 18000000 		.4byte	.LVL22
 10777 019a 0100     		.2byte	0x1
 10778 019c 51       		.byte	0x51
 10779 019d 18000000 		.4byte	.LVL22
 10780 01a1 56000000 		.4byte	.LVL31
 10781 01a5 0100     		.2byte	0x1
 10782 01a7 55       		.byte	0x55
 10783 01a8 56000000 		.4byte	.LVL31
 10784 01ac 92000000 		.4byte	.LFE70
 10785 01b0 0400     		.2byte	0x4
 10786 01b2 F3       		.byte	0xf3
 10787 01b3 01       		.uleb128 0x1
 10788 01b4 51       		.byte	0x51
 10789 01b5 9F       		.byte	0x9f
 10790 01b6 00000000 		.4byte	0
 10791 01ba 00000000 		.4byte	0
 10792              	.LLST9:
 10793 01be 00000000 		.4byte	.LVL20
 10794 01c2 16000000 		.4byte	.LVL21
 10795 01c6 0100     		.2byte	0x1
 10796 01c8 52       		.byte	0x52
 10797 01c9 16000000 		.4byte	.LVL21
 10798 01cd 2A000000 		.4byte	.LVL25
 10799 01d1 0100     		.2byte	0x1
 10800 01d3 57       		.byte	0x57
 10801 01d4 2A000000 		.4byte	.LVL25
 10802 01d8 32000000 		.4byte	.LVL27
 10803 01dc 0700     		.2byte	0x7
 10804 01de 72       		.byte	0x72
 10805 01df 81808080 		.sleb128 -1073741823
 10805      7C
 10806 01e4 9F       		.byte	0x9f
 10807 01e5 32000000 		.4byte	.LVL27
 10808 01e9 92000000 		.4byte	.LFE70
 10809 01ed 0400     		.2byte	0x4
 10810 01ef F3       		.byte	0xf3
 10811 01f0 01       		.uleb128 0x1
 10812 01f1 52       		.byte	0x52
 10813 01f2 9F       		.byte	0x9f
 10814 01f3 00000000 		.4byte	0
 10815 01f7 00000000 		.4byte	0
 10816              	.LLST10:
 10817 01fb 00000000 		.4byte	.LVL20
 10818 01ff 1D000000 		.4byte	.LVL24-1
 10819 0203 0100     		.2byte	0x1
 10820 0205 53       		.byte	0x53
 10821 0206 1D000000 		.4byte	.LVL24-1
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 295


 10822 020a 92000000 		.4byte	.LFE70
 10823 020e 0100     		.2byte	0x1
 10824 0210 5A       		.byte	0x5a
 10825 0211 00000000 		.4byte	0
 10826 0215 00000000 		.4byte	0
 10827              	.LLST11:
 10828 0219 00000000 		.4byte	.LVL20
 10829 021d 50000000 		.4byte	.LVL30
 10830 0221 0200     		.2byte	0x2
 10831 0223 91       		.byte	0x91
 10832 0224 00       		.sleb128 0
 10833 0225 50000000 		.4byte	.LVL30
 10834 0229 6C000000 		.4byte	.LVL34
 10835 022d 0100     		.2byte	0x1
 10836 022f 56       		.byte	0x56
 10837 0230 00000000 		.4byte	0
 10838 0234 00000000 		.4byte	0
 10839              	.LLST12:
 10840 0238 2E000000 		.4byte	.LVL26
 10841 023c 32000000 		.4byte	.LVL27
 10842 0240 0200     		.2byte	0x2
 10843 0242 30       		.byte	0x30
 10844 0243 9F       		.byte	0x9f
 10845 0244 32000000 		.4byte	.LVL27
 10846 0248 46000000 		.4byte	.LVL29
 10847 024c 0100     		.2byte	0x1
 10848 024e 53       		.byte	0x53
 10849 024f 00000000 		.4byte	0
 10850 0253 00000000 		.4byte	0
 10851              	.LLST13:
 10852 0257 02000000 		.4byte	.LVL36
 10853 025b 06000000 		.4byte	.LVL37
 10854 025f 0200     		.2byte	0x2
 10855 0261 30       		.byte	0x30
 10856 0262 9F       		.byte	0x9f
 10857 0263 06000000 		.4byte	.LVL37
 10858 0267 1C000000 		.4byte	.LVL40
 10859 026b 0100     		.2byte	0x1
 10860 026d 54       		.byte	0x54
 10861 026e 00000000 		.4byte	0
 10862 0272 00000000 		.4byte	0
 10863              	.LLST14:
 10864 0276 00000000 		.4byte	.LVL46
 10865 027a 07000000 		.4byte	.LVL47-1
 10866 027e 0100     		.2byte	0x1
 10867 0280 50       		.byte	0x50
 10868 0281 07000000 		.4byte	.LVL47-1
 10869 0285 A4000000 		.4byte	.LVL51
 10870 0289 0100     		.2byte	0x1
 10871 028b 55       		.byte	0x55
 10872 028c A4000000 		.4byte	.LVL51
 10873 0290 AC000000 		.4byte	.LFE71
 10874 0294 0400     		.2byte	0x4
 10875 0296 F3       		.byte	0xf3
 10876 0297 01       		.uleb128 0x1
 10877 0298 50       		.byte	0x50
 10878 0299 9F       		.byte	0x9f
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 296


 10879 029a 00000000 		.4byte	0
 10880 029e 00000000 		.4byte	0
 10881              	.LLST15:
 10882 02a2 10000000 		.4byte	.LVL53
 10883 02a6 34000000 		.4byte	.LVL56
 10884 02aa 0100     		.2byte	0x1
 10885 02ac 55       		.byte	0x55
 10886 02ad 00000000 		.4byte	0
 10887 02b1 00000000 		.4byte	0
 10888              	.LLST16:
 10889 02b5 00000000 		.4byte	.LVL57
 10890 02b9 02000000 		.4byte	.LVL58
 10891 02bd 0100     		.2byte	0x1
 10892 02bf 50       		.byte	0x50
 10893 02c0 02000000 		.4byte	.LVL58
 10894 02c4 08000000 		.4byte	.LFE104
 10895 02c8 0400     		.2byte	0x4
 10896 02ca F3       		.byte	0xf3
 10897 02cb 01       		.uleb128 0x1
 10898 02cc 50       		.byte	0x50
 10899 02cd 9F       		.byte	0x9f
 10900 02ce 00000000 		.4byte	0
 10901 02d2 00000000 		.4byte	0
 10902              	.LLST17:
 10903 02d6 00000000 		.4byte	.LVL60
 10904 02da 10000000 		.4byte	.LVL62
 10905 02de 0100     		.2byte	0x1
 10906 02e0 50       		.byte	0x50
 10907 02e1 10000000 		.4byte	.LVL62
 10908 02e5 4A000000 		.4byte	.LVL66
 10909 02e9 0100     		.2byte	0x1
 10910 02eb 54       		.byte	0x54
 10911 02ec 4A000000 		.4byte	.LVL66
 10912 02f0 84000000 		.4byte	.LFE128
 10913 02f4 0400     		.2byte	0x4
 10914 02f6 F3       		.byte	0xf3
 10915 02f7 01       		.uleb128 0x1
 10916 02f8 50       		.byte	0x50
 10917 02f9 9F       		.byte	0x9f
 10918 02fa 00000000 		.4byte	0
 10919 02fe 00000000 		.4byte	0
 10920              	.LLST18:
 10921 0302 00000000 		.4byte	.LVL60
 10922 0306 15000000 		.4byte	.LVL63-1
 10923 030a 0100     		.2byte	0x1
 10924 030c 51       		.byte	0x51
 10925 030d 15000000 		.4byte	.LVL63-1
 10926 0311 80000000 		.4byte	.LVL71
 10927 0315 0100     		.2byte	0x1
 10928 0317 56       		.byte	0x56
 10929 0318 80000000 		.4byte	.LVL71
 10930 031c 84000000 		.4byte	.LFE128
 10931 0320 0400     		.2byte	0x4
 10932 0322 F3       		.byte	0xf3
 10933 0323 01       		.uleb128 0x1
 10934 0324 51       		.byte	0x51
 10935 0325 9F       		.byte	0x9f
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 297


 10936 0326 00000000 		.4byte	0
 10937 032a 00000000 		.4byte	0
 10938              	.LLST19:
 10939 032e 4A000000 		.4byte	.LVL66
 10940 0332 80000000 		.4byte	.LVL71
 10941 0336 0100     		.2byte	0x1
 10942 0338 54       		.byte	0x54
 10943 0339 00000000 		.4byte	0
 10944 033d 00000000 		.4byte	0
 10945              	.LLST20:
 10946 0341 0C000000 		.4byte	.LVL61
 10947 0345 6A000000 		.4byte	.LVL69
 10948 0349 0100     		.2byte	0x1
 10949 034b 55       		.byte	0x55
 10950 034c 00000000 		.4byte	0
 10951 0350 00000000 		.4byte	0
 10952              	.LLST21:
 10953 0354 00000000 		.4byte	.LVL72
 10954 0358 07000000 		.4byte	.LVL73-1
 10955 035c 0100     		.2byte	0x1
 10956 035e 50       		.byte	0x50
 10957 035f 07000000 		.4byte	.LVL73-1
 10958 0363 22000000 		.4byte	.LFE117
 10959 0367 0100     		.2byte	0x1
 10960 0369 54       		.byte	0x54
 10961 036a 00000000 		.4byte	0
 10962 036e 00000000 		.4byte	0
 10963              	.LLST22:
 10964 0372 00000000 		.4byte	.LVL72
 10965 0376 07000000 		.4byte	.LVL73-1
 10966 037a 0100     		.2byte	0x1
 10967 037c 51       		.byte	0x51
 10968 037d 07000000 		.4byte	.LVL73-1
 10969 0381 22000000 		.4byte	.LFE117
 10970 0385 0400     		.2byte	0x4
 10971 0387 F3       		.byte	0xf3
 10972 0388 01       		.uleb128 0x1
 10973 0389 51       		.byte	0x51
 10974 038a 9F       		.byte	0x9f
 10975 038b 00000000 		.4byte	0
 10976 038f 00000000 		.4byte	0
 10977              	.LLST23:
 10978 0393 0E000000 		.4byte	.LVL74
 10979 0397 20000000 		.4byte	.LVL76
 10980 039b 0100     		.2byte	0x1
 10981 039d 50       		.byte	0x50
 10982 039e 00000000 		.4byte	0
 10983 03a2 00000000 		.4byte	0
 10984              	.LLST24:
 10985 03a6 00000000 		.4byte	.LVL77
 10986 03aa 10000000 		.4byte	.LVL78
 10987 03ae 0100     		.2byte	0x1
 10988 03b0 50       		.byte	0x50
 10989 03b1 10000000 		.4byte	.LVL78
 10990 03b5 62000000 		.4byte	.LFE69
 10991 03b9 0100     		.2byte	0x1
 10992 03bb 56       		.byte	0x56
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 298


 10993 03bc 00000000 		.4byte	0
 10994 03c0 00000000 		.4byte	0
 10995              	.LLST25:
 10996 03c4 00000000 		.4byte	.LVL77
 10997 03c8 13000000 		.4byte	.LVL79-1
 10998 03cc 0100     		.2byte	0x1
 10999 03ce 51       		.byte	0x51
 11000 03cf 13000000 		.4byte	.LVL79-1
 11001 03d3 62000000 		.4byte	.LFE69
 11002 03d7 0100     		.2byte	0x1
 11003 03d9 57       		.byte	0x57
 11004 03da 00000000 		.4byte	0
 11005 03de 00000000 		.4byte	0
 11006              	.LLST26:
 11007 03e2 00000000 		.4byte	.LVL77
 11008 03e6 13000000 		.4byte	.LVL79-1
 11009 03ea 0100     		.2byte	0x1
 11010 03ec 52       		.byte	0x52
 11011 03ed 13000000 		.4byte	.LVL79-1
 11012 03f1 62000000 		.4byte	.LFE69
 11013 03f5 0400     		.2byte	0x4
 11014 03f7 F3       		.byte	0xf3
 11015 03f8 01       		.uleb128 0x1
 11016 03f9 52       		.byte	0x52
 11017 03fa 9F       		.byte	0x9f
 11018 03fb 00000000 		.4byte	0
 11019 03ff 00000000 		.4byte	0
 11020              	.LLST27:
 11021 0403 00000000 		.4byte	.LVL77
 11022 0407 13000000 		.4byte	.LVL79-1
 11023 040b 0100     		.2byte	0x1
 11024 040d 53       		.byte	0x53
 11025 040e 13000000 		.4byte	.LVL79-1
 11026 0412 62000000 		.4byte	.LFE69
 11027 0416 0100     		.2byte	0x1
 11028 0418 58       		.byte	0x58
 11029 0419 00000000 		.4byte	0
 11030 041d 00000000 		.4byte	0
 11031              	.LLST28:
 11032 0421 1E000000 		.4byte	.LVL81
 11033 0425 2A000000 		.4byte	.LVL82
 11034 0429 0100     		.2byte	0x1
 11035 042b 50       		.byte	0x50
 11036 042c 2A000000 		.4byte	.LVL82
 11037 0430 30000000 		.4byte	.LVL84
 11038 0434 0100     		.2byte	0x1
 11039 0436 54       		.byte	0x54
 11040 0437 32000000 		.4byte	.LVL85
 11041 043b 62000000 		.4byte	.LFE69
 11042 043f 0100     		.2byte	0x1
 11043 0441 54       		.byte	0x54
 11044 0442 00000000 		.4byte	0
 11045 0446 00000000 		.4byte	0
 11046              	.LLST29:
 11047 044a 54000000 		.4byte	.LVL87
 11048 044e 58000000 		.4byte	.LVL88
 11049 0452 0200     		.2byte	0x2
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 299


 11050 0454 31       		.byte	0x31
 11051 0455 9F       		.byte	0x9f
 11052 0456 5C000000 		.4byte	.LVL89
 11053 045a 62000000 		.4byte	.LFE69
 11054 045e 0100     		.2byte	0x1
 11055 0460 50       		.byte	0x50
 11056 0461 00000000 		.4byte	0
 11057 0465 00000000 		.4byte	0
 11058              	.LLST30:
 11059 0469 14000000 		.4byte	.LVL79
 11060 046d 1A000000 		.4byte	.LVL80
 11061 0471 0100     		.2byte	0x1
 11062 0473 50       		.byte	0x50
 11063 0474 1A000000 		.4byte	.LVL80
 11064 0478 30000000 		.4byte	.LVL84
 11065 047c 0100     		.2byte	0x1
 11066 047e 59       		.byte	0x59
 11067 047f 30000000 		.4byte	.LVL84
 11068 0483 32000000 		.4byte	.LVL85
 11069 0487 0100     		.2byte	0x1
 11070 0489 50       		.byte	0x50
 11071 048a 00000000 		.4byte	0
 11072 048e 00000000 		.4byte	0
 11073              	.LLST31:
 11074 0492 00000000 		.4byte	.LVL90
 11075 0496 07000000 		.4byte	.LVL91-1
 11076 049a 0100     		.2byte	0x1
 11077 049c 50       		.byte	0x50
 11078 049d 07000000 		.4byte	.LVL91-1
 11079 04a1 10000000 		.4byte	.LVL92
 11080 04a5 0100     		.2byte	0x1
 11081 04a7 54       		.byte	0x54
 11082 04a8 00000000 		.4byte	0
 11083 04ac 00000000 		.4byte	0
 11084              	.LLST32:
 11085 04b0 10000000 		.4byte	.LVL92
 11086 04b4 B2000000 		.4byte	.LVL99
 11087 04b8 0100     		.2byte	0x1
 11088 04ba 54       		.byte	0x54
 11089 04bb 00000000 		.4byte	0
 11090 04bf 00000000 		.4byte	0
 11091              	.LLST33:
 11092 04c3 00000000 		.4byte	.LVL100
 11093 04c7 11000000 		.4byte	.LVL102-1
 11094 04cb 0100     		.2byte	0x1
 11095 04cd 50       		.byte	0x50
 11096 04ce 11000000 		.4byte	.LVL102-1
 11097 04d2 44000000 		.4byte	.LVL106
 11098 04d6 0100     		.2byte	0x1
 11099 04d8 54       		.byte	0x54
 11100 04d9 44000000 		.4byte	.LVL106
 11101 04dd 46000000 		.4byte	.LVL107
 11102 04e1 0100     		.2byte	0x1
 11103 04e3 50       		.byte	0x50
 11104 04e4 46000000 		.4byte	.LVL107
 11105 04e8 48000000 		.4byte	.LVL108
 11106 04ec 0400     		.2byte	0x4
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 300


 11107 04ee F3       		.byte	0xf3
 11108 04ef 01       		.uleb128 0x1
 11109 04f0 50       		.byte	0x50
 11110 04f1 9F       		.byte	0x9f
 11111 04f2 48000000 		.4byte	.LVL108
 11112 04f6 5C000000 		.4byte	.LVL114
 11113 04fa 0100     		.2byte	0x1
 11114 04fc 54       		.byte	0x54
 11115 04fd 5C000000 		.4byte	.LVL114
 11116 0501 64000000 		.4byte	.LFE75
 11117 0505 0400     		.2byte	0x4
 11118 0507 F3       		.byte	0xf3
 11119 0508 01       		.uleb128 0x1
 11120 0509 50       		.byte	0x50
 11121 050a 9F       		.byte	0x9f
 11122 050b 00000000 		.4byte	0
 11123 050f 00000000 		.4byte	0
 11124              	.LLST34:
 11125 0513 14000000 		.4byte	.LVL103
 11126 0517 44000000 		.4byte	.LVL106
 11127 051b 0100     		.2byte	0x1
 11128 051d 55       		.byte	0x55
 11129 051e 48000000 		.4byte	.LVL108
 11130 0522 5C000000 		.4byte	.LVL114
 11131 0526 0100     		.2byte	0x1
 11132 0528 55       		.byte	0x55
 11133 0529 00000000 		.4byte	0
 11134 052d 00000000 		.4byte	0
 11135              	.LLST35:
 11136 0531 02000000 		.4byte	.LVL101
 11137 0535 11000000 		.4byte	.LVL102-1
 11138 0539 0100     		.2byte	0x1
 11139 053b 50       		.byte	0x50
 11140 053c 11000000 		.4byte	.LVL102-1
 11141 0540 44000000 		.4byte	.LVL106
 11142 0544 0100     		.2byte	0x1
 11143 0546 54       		.byte	0x54
 11144 0547 44000000 		.4byte	.LVL106
 11145 054b 46000000 		.4byte	.LVL107
 11146 054f 0100     		.2byte	0x1
 11147 0551 50       		.byte	0x50
 11148 0552 46000000 		.4byte	.LVL107
 11149 0556 48000000 		.4byte	.LVL108
 11150 055a 0400     		.2byte	0x4
 11151 055c F3       		.byte	0xf3
 11152 055d 01       		.uleb128 0x1
 11153 055e 50       		.byte	0x50
 11154 055f 9F       		.byte	0x9f
 11155 0560 48000000 		.4byte	.LVL108
 11156 0564 5C000000 		.4byte	.LVL114
 11157 0568 0100     		.2byte	0x1
 11158 056a 54       		.byte	0x54
 11159 056b 5C000000 		.4byte	.LVL114
 11160 056f 64000000 		.4byte	.LFE75
 11161 0573 0400     		.2byte	0x4
 11162 0575 F3       		.byte	0xf3
 11163 0576 01       		.uleb128 0x1
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 301


 11164 0577 50       		.byte	0x50
 11165 0578 9F       		.byte	0x9f
 11166 0579 00000000 		.4byte	0
 11167 057d 00000000 		.4byte	0
 11168              	.LLST36:
 11169 0581 00000000 		.4byte	.LVL115
 11170 0585 07000000 		.4byte	.LVL116-1
 11171 0589 0100     		.2byte	0x1
 11172 058b 50       		.byte	0x50
 11173 058c 07000000 		.4byte	.LVL116-1
 11174 0590 10000000 		.4byte	.LVL117
 11175 0594 0100     		.2byte	0x1
 11176 0596 54       		.byte	0x54
 11177 0597 00000000 		.4byte	0
 11178 059b 00000000 		.4byte	0
 11179              	.LLST37:
 11180 059f 10000000 		.4byte	.LVL117
 11181 05a3 12000000 		.4byte	.LVL118
 11182 05a7 0100     		.2byte	0x1
 11183 05a9 54       		.byte	0x54
 11184 05aa 00000000 		.4byte	0
 11185 05ae 00000000 		.4byte	0
 11186              	.LLST38:
 11187 05b2 12000000 		.4byte	.LVL118
 11188 05b6 1A000000 		.4byte	.LVL120
 11189 05ba 0100     		.2byte	0x1
 11190 05bc 54       		.byte	0x54
 11191 05bd 1A000000 		.4byte	.LVL120
 11192 05c1 20000000 		.4byte	.LFE76
 11193 05c5 0100     		.2byte	0x1
 11194 05c7 50       		.byte	0x50
 11195 05c8 00000000 		.4byte	0
 11196 05cc 00000000 		.4byte	0
 11197              	.LLST39:
 11198 05d0 00000000 		.4byte	.LVL121
 11199 05d4 1C000000 		.4byte	.LVL122
 11200 05d8 0100     		.2byte	0x1
 11201 05da 50       		.byte	0x50
 11202 05db 00000000 		.4byte	0
 11203 05df 00000000 		.4byte	0
 11204              	.LLST40:
 11205 05e3 1C000000 		.4byte	.LVL122
 11206 05e7 1E000000 		.4byte	.LVL123
 11207 05eb 0100     		.2byte	0x1
 11208 05ed 50       		.byte	0x50
 11209 05ee 00000000 		.4byte	0
 11210 05f2 00000000 		.4byte	0
 11211              	.LLST41:
 11212 05f6 1E000000 		.4byte	.LVL123
 11213 05fa 22000000 		.4byte	.LVL124
 11214 05fe 0100     		.2byte	0x1
 11215 0600 53       		.byte	0x53
 11216 0601 00000000 		.4byte	0
 11217 0605 00000000 		.4byte	0
 11218              	.LLST42:
 11219 0609 00000000 		.4byte	.LVL125
 11220 060d 0F000000 		.4byte	.LVL128-1
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 302


 11221 0611 0100     		.2byte	0x1
 11222 0613 50       		.byte	0x50
 11223 0614 0F000000 		.4byte	.LVL128-1
 11224 0618 18000000 		.4byte	.LVL129
 11225 061c 0100     		.2byte	0x1
 11226 061e 54       		.byte	0x54
 11227 061f 00000000 		.4byte	0
 11228 0623 00000000 		.4byte	0
 11229              	.LLST43:
 11230 0627 00000000 		.4byte	.LVL125
 11231 062b 0C000000 		.4byte	.LVL127
 11232 062f 0100     		.2byte	0x1
 11233 0631 51       		.byte	0x51
 11234 0632 0C000000 		.4byte	.LVL127
 11235 0636 66000000 		.4byte	.LVL134
 11236 063a 0100     		.2byte	0x1
 11237 063c 55       		.byte	0x55
 11238 063d 66000000 		.4byte	.LVL134
 11239 0641 87000000 		.4byte	.LVL135-1
 11240 0645 0300     		.2byte	0x3
 11241 0647 74       		.byte	0x74
 11242 0648 C800     		.sleb128 72
 11243 064a 00000000 		.4byte	0
 11244 064e 00000000 		.4byte	0
 11245              	.LLST44:
 11246 0652 18000000 		.4byte	.LVL129
 11247 0656 DA000000 		.4byte	.LVL140
 11248 065a 0100     		.2byte	0x1
 11249 065c 54       		.byte	0x54
 11250 065d 00000000 		.4byte	0
 11251 0661 00000000 		.4byte	0
 11252              	.LLST45:
 11253 0665 1A000000 		.4byte	.LVL130
 11254 0669 5E000000 		.4byte	.LVL133
 11255 066d 0100     		.2byte	0x1
 11256 066f 53       		.byte	0x53
 11257 0670 00000000 		.4byte	0
 11258 0674 00000000 		.4byte	0
 11259              	.LLST46:
 11260 0678 54000000 		.4byte	.LVL132
 11261 067c 90000000 		.4byte	.LVL136
 11262 0680 0100     		.2byte	0x1
 11263 0682 56       		.byte	0x56
 11264 0683 00000000 		.4byte	0
 11265 0687 00000000 		.4byte	0
 11266              	.LLST47:
 11267 068b 06000000 		.4byte	.LVL126
 11268 068f 52000000 		.4byte	.LVL131
 11269 0693 0200     		.2byte	0x2
 11270 0695 30       		.byte	0x30
 11271 0696 9F       		.byte	0x9f
 11272 0697 52000000 		.4byte	.LVL131
 11273 069b D4000000 		.4byte	.LVL138
 11274 069f 0100     		.2byte	0x1
 11275 06a1 57       		.byte	0x57
 11276 06a2 00000000 		.4byte	0
 11277 06a6 00000000 		.4byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 303


 11278              	.LLST48:
 11279 06aa 00000000 		.4byte	.LVL141
 11280 06ae 13000000 		.4byte	.LVL142-1
 11281 06b2 0100     		.2byte	0x1
 11282 06b4 50       		.byte	0x50
 11283 06b5 13000000 		.4byte	.LVL142-1
 11284 06b9 6C000000 		.4byte	.LVL147
 11285 06bd 0100     		.2byte	0x1
 11286 06bf 54       		.byte	0x54
 11287 06c0 6C000000 		.4byte	.LVL147
 11288 06c4 78000000 		.4byte	.LFE81
 11289 06c8 0100     		.2byte	0x1
 11290 06ca 50       		.byte	0x50
 11291 06cb 00000000 		.4byte	0
 11292 06cf 00000000 		.4byte	0
 11293              	.LLST50:
 11294 06d3 00000000 		.4byte	.LVL148
 11295 06d7 1B000000 		.4byte	.LVL150-1
 11296 06db 0100     		.2byte	0x1
 11297 06dd 50       		.byte	0x50
 11298 06de 1B000000 		.4byte	.LVL150-1
 11299 06e2 80000000 		.4byte	.LVL158
 11300 06e6 0100     		.2byte	0x1
 11301 06e8 54       		.byte	0x54
 11302 06e9 80000000 		.4byte	.LVL158
 11303 06ed 88000000 		.4byte	.LFE82
 11304 06f1 0400     		.2byte	0x4
 11305 06f3 F3       		.byte	0xf3
 11306 06f4 01       		.uleb128 0x1
 11307 06f5 50       		.byte	0x50
 11308 06f6 9F       		.byte	0x9f
 11309 06f7 00000000 		.4byte	0
 11310 06fb 00000000 		.4byte	0
 11311              	.LLST51:
 11312 06ff 04000000 		.4byte	.LVL149
 11313 0703 3A000000 		.4byte	.LVL151
 11314 0707 0200     		.2byte	0x2
 11315 0709 30       		.byte	0x30
 11316 070a 9F       		.byte	0x9f
 11317 070b 3A000000 		.4byte	.LVL151
 11318 070f 68000000 		.4byte	.LVL154
 11319 0713 0100     		.2byte	0x1
 11320 0715 56       		.byte	0x56
 11321 0716 68000000 		.4byte	.LVL154
 11322 071a 78000000 		.4byte	.LVL156
 11323 071e 0200     		.2byte	0x2
 11324 0720 30       		.byte	0x30
 11325 0721 9F       		.byte	0x9f
 11326 0722 78000000 		.4byte	.LVL156
 11327 0726 80000000 		.4byte	.LVL158
 11328 072a 0100     		.2byte	0x1
 11329 072c 56       		.byte	0x56
 11330 072d 80000000 		.4byte	.LVL158
 11331 0731 88000000 		.4byte	.LFE82
 11332 0735 0100     		.2byte	0x1
 11333 0737 50       		.byte	0x50
 11334 0738 00000000 		.4byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 304


 11335 073c 00000000 		.4byte	0
 11336              	.LLST52:
 11337 0740 04000000 		.4byte	.LVL149
 11338 0744 1B000000 		.4byte	.LVL150-1
 11339 0748 0100     		.2byte	0x1
 11340 074a 50       		.byte	0x50
 11341 074b 1B000000 		.4byte	.LVL150-1
 11342 074f 80000000 		.4byte	.LVL158
 11343 0753 0100     		.2byte	0x1
 11344 0755 54       		.byte	0x54
 11345 0756 80000000 		.4byte	.LVL158
 11346 075a 88000000 		.4byte	.LFE82
 11347 075e 0400     		.2byte	0x4
 11348 0760 F3       		.byte	0xf3
 11349 0761 01       		.uleb128 0x1
 11350 0762 50       		.byte	0x50
 11351 0763 9F       		.byte	0x9f
 11352 0764 00000000 		.4byte	0
 11353 0768 00000000 		.4byte	0
 11354              	.LLST53:
 11355 076c 78000000 		.4byte	.LVL156
 11356 0770 7C000000 		.4byte	.LVL157
 11357 0774 0100     		.2byte	0x1
 11358 0776 55       		.byte	0x55
 11359 0777 00000000 		.4byte	0
 11360 077b 00000000 		.4byte	0
 11361              	.LLST54:
 11362 077f 16000000 		.4byte	.LVL159
 11363 0783 41000000 		.4byte	.LVL160-1
 11364 0787 0100     		.2byte	0x1
 11365 0789 50       		.byte	0x50
 11366 078a 00000000 		.4byte	0
 11367 078e 00000000 		.4byte	0
 11368              	.LLST55:
 11369 0792 00000000 		.4byte	.LVL166
 11370 0796 0A000000 		.4byte	.LVL167
 11371 079a 0100     		.2byte	0x1
 11372 079c 50       		.byte	0x50
 11373 079d 00000000 		.4byte	0
 11374 07a1 00000000 		.4byte	0
 11375              	.LLST56:
 11376 07a5 44000000 		.4byte	.LVL174
 11377 07a9 4A000000 		.4byte	.LVL176
 11378 07ad 0100     		.2byte	0x1
 11379 07af 54       		.byte	0x54
 11380 07b0 70000000 		.4byte	.LVL178
 11381 07b4 C4000000 		.4byte	.LVL183
 11382 07b8 0100     		.2byte	0x1
 11383 07ba 54       		.byte	0x54
 11384 07bb 00000000 		.4byte	0
 11385 07bf 00000000 		.4byte	0
 11386              	.LLST57:
 11387 07c3 72000000 		.4byte	.LVL179
 11388 07c7 83000000 		.4byte	.LVL180-1
 11389 07cb 0100     		.2byte	0x1
 11390 07cd 53       		.byte	0x53
 11391 07ce 00000000 		.4byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 305


 11392 07d2 00000000 		.4byte	0
 11393              	.LLST58:
 11394 07d6 04000000 		.4byte	.LVL168
 11395 07da 44000000 		.4byte	.LVL174
 11396 07de 0200     		.2byte	0x2
 11397 07e0 30       		.byte	0x30
 11398 07e1 9F       		.byte	0x9f
 11399 07e2 44000000 		.4byte	.LVL174
 11400 07e6 48000000 		.4byte	.LVL175
 11401 07ea 0100     		.2byte	0x1
 11402 07ec 58       		.byte	0x58
 11403 07ed 4A000000 		.4byte	.LVL176
 11404 07f1 4E000000 		.4byte	.LVL177
 11405 07f5 0200     		.2byte	0x2
 11406 07f7 30       		.byte	0x30
 11407 07f8 9F       		.byte	0x9f
 11408 07f9 4E000000 		.4byte	.LVL177
 11409 07fd DC000000 		.4byte	.LVL184
 11410 0801 0100     		.2byte	0x1
 11411 0803 58       		.byte	0x58
 11412 0804 DC000000 		.4byte	.LVL184
 11413 0808 EE000000 		.4byte	.LVL185
 11414 080c 0200     		.2byte	0x2
 11415 080e 30       		.byte	0x30
 11416 080f 9F       		.byte	0x9f
 11417 0810 EE000000 		.4byte	.LVL185
 11418 0814 04010000 		.4byte	.LVL188
 11419 0818 0100     		.2byte	0x1
 11420 081a 58       		.byte	0x58
 11421 081b 04010000 		.4byte	.LVL188
 11422 081f 08010000 		.4byte	.LFE92
 11423 0823 0100     		.2byte	0x1
 11424 0825 50       		.byte	0x50
 11425 0826 00000000 		.4byte	0
 11426 082a 00000000 		.4byte	0
 11427              	.LLST59:
 11428 082e 16000000 		.4byte	.LVL169
 11429 0832 DC000000 		.4byte	.LVL184
 11430 0836 0100     		.2byte	0x1
 11431 0838 57       		.byte	0x57
 11432 0839 EE000000 		.4byte	.LVL185
 11433 083d F2000000 		.4byte	.LVL186
 11434 0841 0100     		.2byte	0x1
 11435 0843 57       		.byte	0x57
 11436 0844 00000000 		.4byte	0
 11437 0848 00000000 		.4byte	0
 11438              	.LLST60:
 11439 084c 1E000000 		.4byte	.LVL170
 11440 0850 2C000000 		.4byte	.LVL171
 11441 0854 0100     		.2byte	0x1
 11442 0856 52       		.byte	0x52
 11443 0857 2C000000 		.4byte	.LVL171
 11444 085b 32000000 		.4byte	.LVL172
 11445 085f 0500     		.2byte	0x5
 11446 0861 03       		.byte	0x3
 11447 0862 D0000000 		.4byte	pxOverflowDelayedTaskList
 11448 0866 00000000 		.4byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 306


 11449 086a 00000000 		.4byte	0
 11450              	.LLST61:
 11451 086e 02000000 		.4byte	.LVL189
 11452 0872 26000000 		.4byte	.LVL191
 11453 0876 0200     		.2byte	0x2
 11454 0878 30       		.byte	0x30
 11455 0879 9F       		.byte	0x9f
 11456 087a 26000000 		.4byte	.LVL191
 11457 087e 74000000 		.4byte	.LVL196
 11458 0882 0100     		.2byte	0x1
 11459 0884 55       		.byte	0x55
 11460 0885 74000000 		.4byte	.LVL196
 11461 0889 76000000 		.4byte	.LVL197
 11462 088d 0200     		.2byte	0x2
 11463 088f 30       		.byte	0x30
 11464 0890 9F       		.byte	0x9f
 11465 0891 76000000 		.4byte	.LVL197
 11466 0895 C2000000 		.4byte	.LVL205
 11467 0899 0100     		.2byte	0x1
 11468 089b 55       		.byte	0x55
 11469 089c C2000000 		.4byte	.LVL205
 11470 08a0 C6000000 		.4byte	.LVL206
 11471 08a4 0200     		.2byte	0x2
 11472 08a6 30       		.byte	0x30
 11473 08a7 9F       		.byte	0x9f
 11474 08a8 C6000000 		.4byte	.LVL206
 11475 08ac C8000000 		.4byte	.LVL207
 11476 08b0 0100     		.2byte	0x1
 11477 08b2 55       		.byte	0x55
 11478 08b3 00000000 		.4byte	0
 11479 08b7 00000000 		.4byte	0
 11480              	.LLST62:
 11481 08bb 02000000 		.4byte	.LVL189
 11482 08bf AE000000 		.4byte	.LVL203
 11483 08c3 0200     		.2byte	0x2
 11484 08c5 30       		.byte	0x30
 11485 08c6 9F       		.byte	0x9f
 11486 08c7 AE000000 		.4byte	.LVL203
 11487 08cb C2000000 		.4byte	.LVL205
 11488 08cf 0200     		.2byte	0x2
 11489 08d1 31       		.byte	0x31
 11490 08d2 9F       		.byte	0x9f
 11491 08d3 C2000000 		.4byte	.LVL205
 11492 08d7 C8000000 		.4byte	.LVL207
 11493 08db 0200     		.2byte	0x2
 11494 08dd 30       		.byte	0x30
 11495 08de 9F       		.byte	0x9f
 11496 08df C8000000 		.4byte	.LVL207
 11497 08e3 D0000000 		.4byte	.LVL209
 11498 08e7 0100     		.2byte	0x1
 11499 08e9 54       		.byte	0x54
 11500 08ea D0000000 		.4byte	.LVL209
 11501 08ee D8000000 		.4byte	.LFE86
 11502 08f2 0100     		.2byte	0x1
 11503 08f4 50       		.byte	0x50
 11504 08f5 00000000 		.4byte	0
 11505 08f9 00000000 		.4byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 307


 11506              	.LLST63:
 11507 08fd 8A000000 		.4byte	.LVL199
 11508 0901 9A000000 		.4byte	.LVL201
 11509 0905 0100     		.2byte	0x1
 11510 0907 54       		.byte	0x54
 11511 0908 9A000000 		.4byte	.LVL201
 11512 090c 9C000000 		.4byte	.LVL202
 11513 0910 0300     		.2byte	0x3
 11514 0912 74       		.byte	0x74
 11515 0913 7F       		.sleb128 -1
 11516 0914 9F       		.byte	0x9f
 11517 0915 9C000000 		.4byte	.LVL202
 11518 0919 C0000000 		.4byte	.LVL204
 11519 091d 0100     		.2byte	0x1
 11520 091f 54       		.byte	0x54
 11521 0920 C6000000 		.4byte	.LVL206
 11522 0924 C8000000 		.4byte	.LVL207
 11523 0928 0100     		.2byte	0x1
 11524 092a 54       		.byte	0x54
 11525 092b 00000000 		.4byte	0
 11526 092f 00000000 		.4byte	0
 11527              	.LLST64:
 11528 0933 00000000 		.4byte	.LVL210
 11529 0937 09000000 		.4byte	.LVL212-1
 11530 093b 0100     		.2byte	0x1
 11531 093d 50       		.byte	0x50
 11532 093e 09000000 		.4byte	.LVL212-1
 11533 0942 62000000 		.4byte	.LVL219
 11534 0946 0100     		.2byte	0x1
 11535 0948 55       		.byte	0x55
 11536 0949 62000000 		.4byte	.LVL219
 11537 094d 6C000000 		.4byte	.LFE73
 11538 0951 0400     		.2byte	0x4
 11539 0953 F3       		.byte	0xf3
 11540 0954 01       		.uleb128 0x1
 11541 0955 50       		.byte	0x50
 11542 0956 9F       		.byte	0x9f
 11543 0957 00000000 		.4byte	0
 11544 095b 00000000 		.4byte	0
 11545              	.LLST65:
 11546 095f 00000000 		.4byte	.LVL210
 11547 0963 09000000 		.4byte	.LVL212-1
 11548 0967 0100     		.2byte	0x1
 11549 0969 51       		.byte	0x51
 11550 096a 09000000 		.4byte	.LVL212-1
 11551 096e 62000000 		.4byte	.LVL219
 11552 0972 0100     		.2byte	0x1
 11553 0974 54       		.byte	0x54
 11554 0975 62000000 		.4byte	.LVL219
 11555 0979 6C000000 		.4byte	.LFE73
 11556 097d 0400     		.2byte	0x4
 11557 097f F3       		.byte	0xf3
 11558 0980 01       		.uleb128 0x1
 11559 0981 51       		.byte	0x51
 11560 0982 9F       		.byte	0x9f
 11561 0983 00000000 		.4byte	0
 11562 0987 00000000 		.4byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 308


 11563              	.LLST66:
 11564 098b 14000000 		.4byte	.LVL214
 11565 098f 49000000 		.4byte	.LVL217-1
 11566 0993 0100     		.2byte	0x1
 11567 0995 53       		.byte	0x53
 11568 0996 00000000 		.4byte	0
 11569 099a 00000000 		.4byte	0
 11570              	.LLST67:
 11571 099e 06000000 		.4byte	.LVL211
 11572 09a2 3E000000 		.4byte	.LVL215
 11573 09a6 0200     		.2byte	0x2
 11574 09a8 30       		.byte	0x30
 11575 09a9 9F       		.byte	0x9f
 11576 09aa 3E000000 		.4byte	.LVL215
 11577 09ae 49000000 		.4byte	.LVL217-1
 11578 09b2 0100     		.2byte	0x1
 11579 09b4 52       		.byte	0x52
 11580 09b5 00000000 		.4byte	0
 11581 09b9 00000000 		.4byte	0
 11582              	.LLST68:
 11583 09bd 10000000 		.4byte	.LVL213
 11584 09c1 46000000 		.4byte	.LVL216
 11585 09c5 0100     		.2byte	0x1
 11586 09c7 50       		.byte	0x50
 11587 09c8 00000000 		.4byte	0
 11588 09cc 00000000 		.4byte	0
 11589              	.LLST69:
 11590 09d0 00000000 		.4byte	.LVL220
 11591 09d4 09000000 		.4byte	.LVL222-1
 11592 09d8 0100     		.2byte	0x1
 11593 09da 50       		.byte	0x50
 11594 09db 09000000 		.4byte	.LVL222-1
 11595 09df 18000000 		.4byte	.LVL225
 11596 09e3 0100     		.2byte	0x1
 11597 09e5 54       		.byte	0x54
 11598 09e6 18000000 		.4byte	.LVL225
 11599 09ea 1A000000 		.4byte	.LVL226
 11600 09ee 0100     		.2byte	0x1
 11601 09f0 50       		.byte	0x50
 11602 09f1 1A000000 		.4byte	.LVL226
 11603 09f5 34000000 		.4byte	.LFE74
 11604 09f9 0400     		.2byte	0x4
 11605 09fb F3       		.byte	0xf3
 11606 09fc 01       		.uleb128 0x1
 11607 09fd 50       		.byte	0x50
 11608 09fe 9F       		.byte	0x9f
 11609 09ff 00000000 		.4byte	0
 11610 0a03 00000000 		.4byte	0
 11611              	.LLST70:
 11612 0a07 02000000 		.4byte	.LVL221
 11613 0a0b 16000000 		.4byte	.LVL224
 11614 0a0f 0200     		.2byte	0x2
 11615 0a11 30       		.byte	0x30
 11616 0a12 9F       		.byte	0x9f
 11617 0a13 16000000 		.4byte	.LVL224
 11618 0a17 18000000 		.4byte	.LVL225
 11619 0a1b 0100     		.2byte	0x1
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 309


 11620 0a1d 50       		.byte	0x50
 11621 0a1e 18000000 		.4byte	.LVL225
 11622 0a22 1A000000 		.4byte	.LVL226
 11623 0a26 0200     		.2byte	0x2
 11624 0a28 30       		.byte	0x30
 11625 0a29 9F       		.byte	0x9f
 11626 0a2a 1A000000 		.4byte	.LVL226
 11627 0a2e 34000000 		.4byte	.LFE74
 11628 0a32 0100     		.2byte	0x1
 11629 0a34 50       		.byte	0x50
 11630 0a35 00000000 		.4byte	0
 11631 0a39 00000000 		.4byte	0
 11632              	.LLST71:
 11633 0a3d 40000000 		.4byte	.LVL228
 11634 0a41 5A000000 		.4byte	.LVL229
 11635 0a45 0100     		.2byte	0x1
 11636 0a47 53       		.byte	0x53
 11637 0a48 00000000 		.4byte	0
 11638 0a4c 00000000 		.4byte	0
 11639              	.LLST72:
 11640 0a50 80000000 		.4byte	.LVL233
 11641 0a54 B2000000 		.4byte	.LVL234
 11642 0a58 0100     		.2byte	0x1
 11643 0a5a 53       		.byte	0x53
 11644 0a5b 00000000 		.4byte	0
 11645 0a5f 00000000 		.4byte	0
 11646              	.LLST73:
 11647 0a63 76000000 		.4byte	.LVL231
 11648 0a67 7A000000 		.4byte	.LVL232
 11649 0a6b 0100     		.2byte	0x1
 11650 0a6d 53       		.byte	0x53
 11651 0a6e 00000000 		.4byte	0
 11652 0a72 00000000 		.4byte	0
 11653              	.LLST74:
 11654 0a76 80000000 		.4byte	.LVL233
 11655 0a7a B2000000 		.4byte	.LVL234
 11656 0a7e 0B00     		.2byte	0xb
 11657 0a80 73       		.byte	0x73
 11658 0a81 00       		.sleb128 0
 11659 0a82 44       		.byte	0x44
 11660 0a83 1E       		.byte	0x1e
 11661 0a84 03       		.byte	0x3
 11662 0a85 30000000 		.4byte	pxReadyTasksLists
 11663 0a89 22       		.byte	0x22
 11664 0a8a 9F       		.byte	0x9f
 11665 0a8b 00000000 		.4byte	0
 11666 0a8f 00000000 		.4byte	0
 11667              	.LLST75:
 11668 0a93 00000000 		.4byte	.LVL235
 11669 0a97 07000000 		.4byte	.LVL236-1
 11670 0a9b 0100     		.2byte	0x1
 11671 0a9d 50       		.byte	0x50
 11672 0a9e 07000000 		.4byte	.LVL236-1
 11673 0aa2 10000000 		.4byte	.LVL237
 11674 0aa6 0100     		.2byte	0x1
 11675 0aa8 54       		.byte	0x54
 11676 0aa9 00000000 		.4byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 310


 11677 0aad 00000000 		.4byte	0
 11678              	.LLST76:
 11679 0ab1 10000000 		.4byte	.LVL237
 11680 0ab5 B8000000 		.4byte	.LVL248
 11681 0ab9 0100     		.2byte	0x1
 11682 0abb 54       		.byte	0x54
 11683 0abc 00000000 		.4byte	0
 11684 0ac0 00000000 		.4byte	0
 11685              	.LLST77:
 11686 0ac4 00000000 		.4byte	.LVL249
 11687 0ac8 0F000000 		.4byte	.LVL251-1
 11688 0acc 0100     		.2byte	0x1
 11689 0ace 50       		.byte	0x50
 11690 0acf 0F000000 		.4byte	.LVL251-1
 11691 0ad3 20000000 		.4byte	.LFE94
 11692 0ad7 0400     		.2byte	0x4
 11693 0ad9 F3       		.byte	0xf3
 11694 0ada 01       		.uleb128 0x1
 11695 0adb 50       		.byte	0x50
 11696 0adc 9F       		.byte	0x9f
 11697 0add 00000000 		.4byte	0
 11698 0ae1 00000000 		.4byte	0
 11699              	.LLST78:
 11700 0ae5 00000000 		.4byte	.LVL249
 11701 0ae9 0A000000 		.4byte	.LVL250
 11702 0aed 0100     		.2byte	0x1
 11703 0aef 51       		.byte	0x51
 11704 0af0 0A000000 		.4byte	.LVL250
 11705 0af4 1A000000 		.4byte	.LVL253
 11706 0af8 0100     		.2byte	0x1
 11707 0afa 54       		.byte	0x54
 11708 0afb 1A000000 		.4byte	.LVL253
 11709 0aff 20000000 		.4byte	.LFE94
 11710 0b03 0400     		.2byte	0x4
 11711 0b05 F3       		.byte	0xf3
 11712 0b06 01       		.uleb128 0x1
 11713 0b07 51       		.byte	0x51
 11714 0b08 9F       		.byte	0x9f
 11715 0b09 00000000 		.4byte	0
 11716 0b0d 00000000 		.4byte	0
 11717              	.LLST79:
 11718 0b11 00000000 		.4byte	.LVL254
 11719 0b15 19000000 		.4byte	.LVL257-1
 11720 0b19 0100     		.2byte	0x1
 11721 0b1b 50       		.byte	0x50
 11722 0b1c 19000000 		.4byte	.LVL257-1
 11723 0b20 28000000 		.4byte	.LFE95
 11724 0b24 0400     		.2byte	0x4
 11725 0b26 F3       		.byte	0xf3
 11726 0b27 01       		.uleb128 0x1
 11727 0b28 50       		.byte	0x50
 11728 0b29 9F       		.byte	0x9f
 11729 0b2a 00000000 		.4byte	0
 11730 0b2e 00000000 		.4byte	0
 11731              	.LLST80:
 11732 0b32 00000000 		.4byte	.LVL254
 11733 0b36 0E000000 		.4byte	.LVL256
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 311


 11734 0b3a 0100     		.2byte	0x1
 11735 0b3c 51       		.byte	0x51
 11736 0b3d 0E000000 		.4byte	.LVL256
 11737 0b41 28000000 		.4byte	.LFE95
 11738 0b45 0400     		.2byte	0x4
 11739 0b47 F3       		.byte	0xf3
 11740 0b48 01       		.uleb128 0x1
 11741 0b49 51       		.byte	0x51
 11742 0b4a 9F       		.byte	0x9f
 11743 0b4b 00000000 		.4byte	0
 11744 0b4f 00000000 		.4byte	0
 11745              	.LLST81:
 11746 0b53 00000000 		.4byte	.LVL254
 11747 0b57 0A000000 		.4byte	.LVL255
 11748 0b5b 0100     		.2byte	0x1
 11749 0b5d 52       		.byte	0x52
 11750 0b5e 0A000000 		.4byte	.LVL255
 11751 0b62 24000000 		.4byte	.LVL259
 11752 0b66 0100     		.2byte	0x1
 11753 0b68 54       		.byte	0x54
 11754 0b69 24000000 		.4byte	.LVL259
 11755 0b6d 28000000 		.4byte	.LFE95
 11756 0b71 0400     		.2byte	0x4
 11757 0b73 F3       		.byte	0xf3
 11758 0b74 01       		.uleb128 0x1
 11759 0b75 52       		.byte	0x52
 11760 0b76 9F       		.byte	0x9f
 11761 0b77 00000000 		.4byte	0
 11762 0b7b 00000000 		.4byte	0
 11763              	.LLST82:
 11764 0b7f 00000000 		.4byte	.LVL260
 11765 0b83 0C000000 		.4byte	.LVL262
 11766 0b87 0100     		.2byte	0x1
 11767 0b89 50       		.byte	0x50
 11768 0b8a 0C000000 		.4byte	.LVL262
 11769 0b8e 74000000 		.4byte	.LFE96
 11770 0b92 0400     		.2byte	0x4
 11771 0b94 F3       		.byte	0xf3
 11772 0b95 01       		.uleb128 0x1
 11773 0b96 50       		.byte	0x50
 11774 0b97 9F       		.byte	0x9f
 11775 0b98 00000000 		.4byte	0
 11776 0b9c 00000000 		.4byte	0
 11777              	.LLST83:
 11778 0ba0 06000000 		.4byte	.LVL261
 11779 0ba4 6A000000 		.4byte	.LVL270
 11780 0ba8 0100     		.2byte	0x1
 11781 0baa 54       		.byte	0x54
 11782 0bab 00000000 		.4byte	0
 11783 0baf 00000000 		.4byte	0
 11784              	.LLST84:
 11785 0bb3 5C000000 		.4byte	.LVL267
 11786 0bb7 66000000 		.4byte	.LVL268
 11787 0bbb 0200     		.2byte	0x2
 11788 0bbd 31       		.byte	0x31
 11789 0bbe 9F       		.byte	0x9f
 11790 0bbf 68000000 		.4byte	.LVL269
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 312


 11791 0bc3 74000000 		.4byte	.LFE96
 11792 0bc7 0100     		.2byte	0x1
 11793 0bc9 50       		.byte	0x50
 11794 0bca 00000000 		.4byte	0
 11795 0bce 00000000 		.4byte	0
 11796              	.LLST85:
 11797 0bd2 00000000 		.4byte	.LVL271
 11798 0bd6 0D000000 		.4byte	.LVL274-1
 11799 0bda 0100     		.2byte	0x1
 11800 0bdc 50       		.byte	0x50
 11801 0bdd 0D000000 		.4byte	.LVL274-1
 11802 0be1 54000000 		.4byte	.LFE97
 11803 0be5 0400     		.2byte	0x4
 11804 0be7 F3       		.byte	0xf3
 11805 0be8 01       		.uleb128 0x1
 11806 0be9 50       		.byte	0x50
 11807 0bea 9F       		.byte	0x9f
 11808 0beb 00000000 		.4byte	0
 11809 0bef 00000000 		.4byte	0
 11810              	.LLST86:
 11811 0bf3 00000000 		.4byte	.LVL271
 11812 0bf7 06000000 		.4byte	.LVL272
 11813 0bfb 0100     		.2byte	0x1
 11814 0bfd 51       		.byte	0x51
 11815 0bfe 06000000 		.4byte	.LVL272
 11816 0c02 54000000 		.4byte	.LFE97
 11817 0c06 0400     		.2byte	0x4
 11818 0c08 F3       		.byte	0xf3
 11819 0c09 01       		.uleb128 0x1
 11820 0c0a 51       		.byte	0x51
 11821 0c0b 9F       		.byte	0x9f
 11822 0c0c 00000000 		.4byte	0
 11823 0c10 00000000 		.4byte	0
 11824              	.LLST87:
 11825 0c14 0A000000 		.4byte	.LVL273
 11826 0c18 50000000 		.4byte	.LVL277
 11827 0c1c 0100     		.2byte	0x1
 11828 0c1e 55       		.byte	0x55
 11829 0c1f 00000000 		.4byte	0
 11830 0c23 00000000 		.4byte	0
 11831              	.LLST88:
 11832 0c27 00000000 		.4byte	.LVL278
 11833 0c2b 07000000 		.4byte	.LVL279-1
 11834 0c2f 0100     		.2byte	0x1
 11835 0c31 50       		.byte	0x50
 11836 0c32 07000000 		.4byte	.LVL279-1
 11837 0c36 1C000000 		.4byte	.LVL281
 11838 0c3a 0100     		.2byte	0x1
 11839 0c3c 54       		.byte	0x54
 11840 0c3d 1C000000 		.4byte	.LVL281
 11841 0c41 20000000 		.4byte	.LFE98
 11842 0c45 0400     		.2byte	0x4
 11843 0c47 F3       		.byte	0xf3
 11844 0c48 01       		.uleb128 0x1
 11845 0c49 50       		.byte	0x50
 11846 0c4a 9F       		.byte	0x9f
 11847 0c4b 00000000 		.4byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 313


 11848 0c4f 00000000 		.4byte	0
 11849              	.LLST89:
 11850 0c53 00000000 		.4byte	.LVL283
 11851 0c57 09000000 		.4byte	.LVL284-1
 11852 0c5b 0100     		.2byte	0x1
 11853 0c5d 50       		.byte	0x50
 11854 0c5e 09000000 		.4byte	.LVL284-1
 11855 0c62 3C000000 		.4byte	.LVL289
 11856 0c66 0100     		.2byte	0x1
 11857 0c68 54       		.byte	0x54
 11858 0c69 3C000000 		.4byte	.LVL289
 11859 0c6d 3E000000 		.4byte	.LVL290
 11860 0c71 0400     		.2byte	0x4
 11861 0c73 F3       		.byte	0xf3
 11862 0c74 01       		.uleb128 0x1
 11863 0c75 50       		.byte	0x50
 11864 0c76 9F       		.byte	0x9f
 11865 0c77 3E000000 		.4byte	.LVL290
 11866 0c7b 44000000 		.4byte	.LVL292
 11867 0c7f 0100     		.2byte	0x1
 11868 0c81 54       		.byte	0x54
 11869 0c82 44000000 		.4byte	.LVL292
 11870 0c86 46000000 		.4byte	.LVL293
 11871 0c8a 0400     		.2byte	0x4
 11872 0c8c F3       		.byte	0xf3
 11873 0c8d 01       		.uleb128 0x1
 11874 0c8e 50       		.byte	0x50
 11875 0c8f 9F       		.byte	0x9f
 11876 0c90 46000000 		.4byte	.LVL293
 11877 0c94 48000000 		.4byte	.LVL294
 11878 0c98 0100     		.2byte	0x1
 11879 0c9a 54       		.byte	0x54
 11880 0c9b 48000000 		.4byte	.LVL294
 11881 0c9f 4A000000 		.4byte	.LVL295
 11882 0ca3 0400     		.2byte	0x4
 11883 0ca5 F3       		.byte	0xf3
 11884 0ca6 01       		.uleb128 0x1
 11885 0ca7 50       		.byte	0x50
 11886 0ca8 9F       		.byte	0x9f
 11887 0ca9 4A000000 		.4byte	.LVL295
 11888 0cad 4C000000 		.4byte	.LVL296
 11889 0cb1 0100     		.2byte	0x1
 11890 0cb3 54       		.byte	0x54
 11891 0cb4 4C000000 		.4byte	.LVL296
 11892 0cb8 58000000 		.4byte	.LFE100
 11893 0cbc 0400     		.2byte	0x4
 11894 0cbe F3       		.byte	0xf3
 11895 0cbf 01       		.uleb128 0x1
 11896 0cc0 50       		.byte	0x50
 11897 0cc1 9F       		.byte	0x9f
 11898 0cc2 00000000 		.4byte	0
 11899 0cc6 00000000 		.4byte	0
 11900              	.LLST90:
 11901 0cca 00000000 		.4byte	.LVL283
 11902 0cce 09000000 		.4byte	.LVL284-1
 11903 0cd2 0100     		.2byte	0x1
 11904 0cd4 51       		.byte	0x51
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 314


 11905 0cd5 09000000 		.4byte	.LVL284-1
 11906 0cd9 54000000 		.4byte	.LVL298
 11907 0cdd 0100     		.2byte	0x1
 11908 0cdf 55       		.byte	0x55
 11909 0ce0 54000000 		.4byte	.LVL298
 11910 0ce4 58000000 		.4byte	.LFE100
 11911 0ce8 0400     		.2byte	0x4
 11912 0cea F3       		.byte	0xf3
 11913 0ceb 01       		.uleb128 0x1
 11914 0cec 51       		.byte	0x51
 11915 0ced 9F       		.byte	0x9f
 11916 0cee 00000000 		.4byte	0
 11917 0cf2 00000000 		.4byte	0
 11918              	.LLST91:
 11919 0cf6 3A000000 		.4byte	.LVL288
 11920 0cfa 3E000000 		.4byte	.LVL290
 11921 0cfe 0200     		.2byte	0x2
 11922 0d00 30       		.byte	0x30
 11923 0d01 9F       		.byte	0x9f
 11924 0d02 42000000 		.4byte	.LVL291
 11925 0d06 46000000 		.4byte	.LVL293
 11926 0d0a 0200     		.2byte	0x2
 11927 0d0c 31       		.byte	0x31
 11928 0d0d 9F       		.byte	0x9f
 11929 0d0e 4C000000 		.4byte	.LVL296
 11930 0d12 54000000 		.4byte	.LVL298
 11931 0d16 0100     		.2byte	0x1
 11932 0d18 54       		.byte	0x54
 11933 0d19 54000000 		.4byte	.LVL298
 11934 0d1d 58000000 		.4byte	.LFE100
 11935 0d21 0100     		.2byte	0x1
 11936 0d23 50       		.byte	0x50
 11937 0d24 00000000 		.4byte	0
 11938 0d28 00000000 		.4byte	0
 11939              	.LLST92:
 11940 0d2c 10000000 		.4byte	.LVL285
 11941 0d30 39000000 		.4byte	.LVL288-1
 11942 0d34 0100     		.2byte	0x1
 11943 0d36 51       		.byte	0x51
 11944 0d37 3E000000 		.4byte	.LVL290
 11945 0d3b 4C000000 		.4byte	.LVL296
 11946 0d3f 0100     		.2byte	0x1
 11947 0d41 51       		.byte	0x51
 11948 0d42 00000000 		.4byte	0
 11949 0d46 00000000 		.4byte	0
 11950              	.LLST93:
 11951 0d4a 14000000 		.4byte	.LVL286
 11952 0d4e 36000000 		.4byte	.LVL287
 11953 0d52 0100     		.2byte	0x1
 11954 0d54 50       		.byte	0x50
 11955 0d55 36000000 		.4byte	.LVL287
 11956 0d59 39000000 		.4byte	.LVL288-1
 11957 0d5d 0600     		.2byte	0x6
 11958 0d5f 71       		.byte	0x71
 11959 0d60 00       		.sleb128 0
 11960 0d61 72       		.byte	0x72
 11961 0d62 00       		.sleb128 0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 315


 11962 0d63 1C       		.byte	0x1c
 11963 0d64 9F       		.byte	0x9f
 11964 0d65 3E000000 		.4byte	.LVL290
 11965 0d69 4C000000 		.4byte	.LVL296
 11966 0d6d 0100     		.2byte	0x1
 11967 0d6f 50       		.byte	0x50
 11968 0d70 00000000 		.4byte	0
 11969 0d74 00000000 		.4byte	0
 11970              	.LLST94:
 11971 0d78 00000000 		.4byte	.LVL299
 11972 0d7c 04000000 		.4byte	.LVL301
 11973 0d80 0100     		.2byte	0x1
 11974 0d82 50       		.byte	0x50
 11975 0d83 04000000 		.4byte	.LVL301
 11976 0d87 06000000 		.4byte	.LVL302
 11977 0d8b 0400     		.2byte	0x4
 11978 0d8d F3       		.byte	0xf3
 11979 0d8e 01       		.uleb128 0x1
 11980 0d8f 50       		.byte	0x50
 11981 0d90 9F       		.byte	0x9f
 11982 0d91 06000000 		.4byte	.LVL302
 11983 0d95 08000000 		.4byte	.LVL303
 11984 0d99 0100     		.2byte	0x1
 11985 0d9b 50       		.byte	0x50
 11986 0d9c 08000000 		.4byte	.LVL303
 11987 0da0 0A000000 		.4byte	.LFE102
 11988 0da4 0400     		.2byte	0x4
 11989 0da6 F3       		.byte	0xf3
 11990 0da7 01       		.uleb128 0x1
 11991 0da8 50       		.byte	0x50
 11992 0da9 9F       		.byte	0x9f
 11993 0daa 00000000 		.4byte	0
 11994 0dae 00000000 		.4byte	0
 11995              	.LLST95:
 11996 0db2 04000000 		.4byte	.LVL301
 11997 0db6 06000000 		.4byte	.LVL302
 11998 0dba 0100     		.2byte	0x1
 11999 0dbc 50       		.byte	0x50
 12000 0dbd 08000000 		.4byte	.LVL303
 12001 0dc1 0A000000 		.4byte	.LFE102
 12002 0dc5 0100     		.2byte	0x1
 12003 0dc7 50       		.byte	0x50
 12004 0dc8 00000000 		.4byte	0
 12005 0dcc 00000000 		.4byte	0
 12006              	.LLST96:
 12007 0dd0 02000000 		.4byte	.LVL300
 12008 0dd4 04000000 		.4byte	.LVL301
 12009 0dd8 0100     		.2byte	0x1
 12010 0dda 50       		.byte	0x50
 12011 0ddb 04000000 		.4byte	.LVL301
 12012 0ddf 06000000 		.4byte	.LVL302
 12013 0de3 0400     		.2byte	0x4
 12014 0de5 F3       		.byte	0xf3
 12015 0de6 01       		.uleb128 0x1
 12016 0de7 50       		.byte	0x50
 12017 0de8 9F       		.byte	0x9f
 12018 0de9 00000000 		.4byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 316


 12019 0ded 00000000 		.4byte	0
 12020              	.LLST97:
 12021 0df1 02000000 		.4byte	.LVL305
 12022 0df5 04000000 		.4byte	.LVL306
 12023 0df9 0100     		.2byte	0x1
 12024 0dfb 50       		.byte	0x50
 12025 0dfc 00000000 		.4byte	0
 12026 0e00 00000000 		.4byte	0
 12027              	.LLST98:
 12028 0e04 00000000 		.4byte	.LVL307
 12029 0e08 10000000 		.4byte	.LVL309
 12030 0e0c 0100     		.2byte	0x1
 12031 0e0e 50       		.byte	0x50
 12032 0e0f 00000000 		.4byte	0
 12033 0e13 00000000 		.4byte	0
 12034              	.LLST99:
 12035 0e17 00000000 		.4byte	.LVL307
 12036 0e1b 49000000 		.4byte	.LVL312-1
 12037 0e1f 0100     		.2byte	0x1
 12038 0e21 51       		.byte	0x51
 12039 0e22 49000000 		.4byte	.LVL312-1
 12040 0e26 58000000 		.4byte	.LVL314
 12041 0e2a 0100     		.2byte	0x1
 12042 0e2c 54       		.byte	0x54
 12043 0e2d 58000000 		.4byte	.LVL314
 12044 0e31 5D000000 		.4byte	.LVL315-1
 12045 0e35 0100     		.2byte	0x1
 12046 0e37 51       		.byte	0x51
 12047 0e38 5D000000 		.4byte	.LVL315-1
 12048 0e3c 72000000 		.4byte	.LVL318
 12049 0e40 0100     		.2byte	0x1
 12050 0e42 54       		.byte	0x54
 12051 0e43 72000000 		.4byte	.LVL318
 12052 0e47 78000000 		.4byte	.LFE107
 12053 0e4b 0400     		.2byte	0x4
 12054 0e4d F3       		.byte	0xf3
 12055 0e4e 01       		.uleb128 0x1
 12056 0e4f 51       		.byte	0x51
 12057 0e50 9F       		.byte	0x9f
 12058 0e51 00000000 		.4byte	0
 12059 0e55 00000000 		.4byte	0
 12060              	.LLST100:
 12061 0e59 00000000 		.4byte	.LVL307
 12062 0e5d 0C000000 		.4byte	.LVL308
 12063 0e61 0100     		.2byte	0x1
 12064 0e63 52       		.byte	0x52
 12065 0e64 0C000000 		.4byte	.LVL308
 12066 0e68 72000000 		.4byte	.LVL318
 12067 0e6c 0100     		.2byte	0x1
 12068 0e6e 56       		.byte	0x56
 12069 0e6f 72000000 		.4byte	.LVL318
 12070 0e73 78000000 		.4byte	.LFE107
 12071 0e77 0400     		.2byte	0x4
 12072 0e79 F3       		.byte	0xf3
 12073 0e7a 01       		.uleb128 0x1
 12074 0e7b 52       		.byte	0x52
 12075 0e7c 9F       		.byte	0x9f
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 317


 12076 0e7d 00000000 		.4byte	0
 12077 0e81 00000000 		.4byte	0
 12078              	.LLST101:
 12079 0e85 00000000 		.4byte	.LVL307
 12080 0e89 3C000000 		.4byte	.LVL310
 12081 0e8d 0100     		.2byte	0x1
 12082 0e8f 53       		.byte	0x53
 12083 0e90 3C000000 		.4byte	.LVL310
 12084 0e94 40000000 		.4byte	.LVL311
 12085 0e98 0400     		.2byte	0x4
 12086 0e9a F3       		.byte	0xf3
 12087 0e9b 01       		.uleb128 0x1
 12088 0e9c 53       		.byte	0x53
 12089 0e9d 9F       		.byte	0x9f
 12090 0e9e 40000000 		.4byte	.LVL311
 12091 0ea2 49000000 		.4byte	.LVL312-1
 12092 0ea6 0100     		.2byte	0x1
 12093 0ea8 53       		.byte	0x53
 12094 0ea9 49000000 		.4byte	.LVL312-1
 12095 0ead 58000000 		.4byte	.LVL314
 12096 0eb1 0400     		.2byte	0x4
 12097 0eb3 F3       		.byte	0xf3
 12098 0eb4 01       		.uleb128 0x1
 12099 0eb5 53       		.byte	0x53
 12100 0eb6 9F       		.byte	0x9f
 12101 0eb7 58000000 		.4byte	.LVL314
 12102 0ebb 5D000000 		.4byte	.LVL315-1
 12103 0ebf 0100     		.2byte	0x1
 12104 0ec1 53       		.byte	0x53
 12105 0ec2 5D000000 		.4byte	.LVL315-1
 12106 0ec6 78000000 		.4byte	.LFE107
 12107 0eca 0400     		.2byte	0x4
 12108 0ecc F3       		.byte	0xf3
 12109 0ecd 01       		.uleb128 0x1
 12110 0ece 53       		.byte	0x53
 12111 0ecf 9F       		.byte	0x9f
 12112 0ed0 00000000 		.4byte	0
 12113 0ed4 00000000 		.4byte	0
 12114              	.LLST102:
 12115 0ed8 10000000 		.4byte	.LVL309
 12116 0edc 72000000 		.4byte	.LVL318
 12117 0ee0 0100     		.2byte	0x1
 12118 0ee2 55       		.byte	0x55
 12119 0ee3 00000000 		.4byte	0
 12120 0ee7 00000000 		.4byte	0
 12121              	.LLST103:
 12122 0eeb 00000000 		.4byte	.LVL319
 12123 0eef 28000000 		.4byte	.LVL323
 12124 0ef3 0100     		.2byte	0x1
 12125 0ef5 50       		.byte	0x50
 12126 0ef6 28000000 		.4byte	.LVL323
 12127 0efa 54000000 		.4byte	.LVL327
 12128 0efe 0100     		.2byte	0x1
 12129 0f00 57       		.byte	0x57
 12130 0f01 54000000 		.4byte	.LVL327
 12131 0f05 56000000 		.4byte	.LVL328
 12132 0f09 0100     		.2byte	0x1
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 318


 12133 0f0b 50       		.byte	0x50
 12134 0f0c 56000000 		.4byte	.LVL328
 12135 0f10 5C000000 		.4byte	.LFE108
 12136 0f14 0400     		.2byte	0x4
 12137 0f16 F3       		.byte	0xf3
 12138 0f17 01       		.uleb128 0x1
 12139 0f18 50       		.byte	0x50
 12140 0f19 9F       		.byte	0x9f
 12141 0f1a 00000000 		.4byte	0
 12142 0f1e 00000000 		.4byte	0
 12143              	.LLST104:
 12144 0f22 00000000 		.4byte	.LVL319
 12145 0f26 28000000 		.4byte	.LVL323
 12146 0f2a 0100     		.2byte	0x1
 12147 0f2c 51       		.byte	0x51
 12148 0f2d 28000000 		.4byte	.LVL323
 12149 0f31 54000000 		.4byte	.LVL327
 12150 0f35 0100     		.2byte	0x1
 12151 0f37 55       		.byte	0x55
 12152 0f38 54000000 		.4byte	.LVL327
 12153 0f3c 56000000 		.4byte	.LVL328
 12154 0f40 0100     		.2byte	0x1
 12155 0f42 51       		.byte	0x51
 12156 0f43 56000000 		.4byte	.LVL328
 12157 0f47 5C000000 		.4byte	.LFE108
 12158 0f4b 0400     		.2byte	0x4
 12159 0f4d F3       		.byte	0xf3
 12160 0f4e 01       		.uleb128 0x1
 12161 0f4f 51       		.byte	0x51
 12162 0f50 9F       		.byte	0x9f
 12163 0f51 00000000 		.4byte	0
 12164 0f55 00000000 		.4byte	0
 12165              	.LLST105:
 12166 0f59 00000000 		.4byte	.LVL319
 12167 0f5d 28000000 		.4byte	.LVL323
 12168 0f61 0100     		.2byte	0x1
 12169 0f63 52       		.byte	0x52
 12170 0f64 28000000 		.4byte	.LVL323
 12171 0f68 54000000 		.4byte	.LVL327
 12172 0f6c 0400     		.2byte	0x4
 12173 0f6e F3       		.byte	0xf3
 12174 0f6f 01       		.uleb128 0x1
 12175 0f70 52       		.byte	0x52
 12176 0f71 9F       		.byte	0x9f
 12177 0f72 54000000 		.4byte	.LVL327
 12178 0f76 56000000 		.4byte	.LVL328
 12179 0f7a 0100     		.2byte	0x1
 12180 0f7c 52       		.byte	0x52
 12181 0f7d 56000000 		.4byte	.LVL328
 12182 0f81 5C000000 		.4byte	.LFE108
 12183 0f85 0400     		.2byte	0x4
 12184 0f87 F3       		.byte	0xf3
 12185 0f88 01       		.uleb128 0x1
 12186 0f89 52       		.byte	0x52
 12187 0f8a 9F       		.byte	0x9f
 12188 0f8b 00000000 		.4byte	0
 12189 0f8f 00000000 		.4byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 319


 12190              	.LLST106:
 12191 0f93 3A000000 		.4byte	.LVL324
 12192 0f97 54000000 		.4byte	.LVL327
 12193 0f9b 0100     		.2byte	0x1
 12194 0f9d 56       		.byte	0x56
 12195 0f9e 00000000 		.4byte	0
 12196 0fa2 00000000 		.4byte	0
 12197              	.LLST107:
 12198 0fa6 26000000 		.4byte	.LVL322
 12199 0faa 54000000 		.4byte	.LVL327
 12200 0fae 0100     		.2byte	0x1
 12201 0fb0 5A       		.byte	0x5a
 12202 0fb1 00000000 		.4byte	0
 12203 0fb5 00000000 		.4byte	0
 12204              	.LLST108:
 12205 0fb9 04000000 		.4byte	.LVL320
 12206 0fbd 28000000 		.4byte	.LVL323
 12207 0fc1 0200     		.2byte	0x2
 12208 0fc3 30       		.byte	0x30
 12209 0fc4 9F       		.byte	0x9f
 12210 0fc5 28000000 		.4byte	.LVL323
 12211 0fc9 54000000 		.4byte	.LVL327
 12212 0fcd 0100     		.2byte	0x1
 12213 0fcf 54       		.byte	0x54
 12214 0fd0 54000000 		.4byte	.LVL327
 12215 0fd4 56000000 		.4byte	.LVL328
 12216 0fd8 0200     		.2byte	0x2
 12217 0fda 30       		.byte	0x30
 12218 0fdb 9F       		.byte	0x9f
 12219 0fdc 56000000 		.4byte	.LVL328
 12220 0fe0 5C000000 		.4byte	.LFE108
 12221 0fe4 0100     		.2byte	0x1
 12222 0fe6 54       		.byte	0x54
 12223 0fe7 00000000 		.4byte	0
 12224 0feb 00000000 		.4byte	0
 12225              	.LLST109:
 12226 0fef 08000000 		.4byte	.LVL321
 12227 0ff3 28000000 		.4byte	.LVL323
 12228 0ff7 0100     		.2byte	0x1
 12229 0ff9 51       		.byte	0x51
 12230 0ffa 28000000 		.4byte	.LVL323
 12231 0ffe 54000000 		.4byte	.LVL327
 12232 1002 0100     		.2byte	0x1
 12233 1004 55       		.byte	0x55
 12234 1005 00000000 		.4byte	0
 12235 1009 00000000 		.4byte	0
 12236              	.LLST110:
 12237 100d 28000000 		.4byte	.LVL323
 12238 1011 54000000 		.4byte	.LVL327
 12239 1015 0100     		.2byte	0x1
 12240 1017 55       		.byte	0x55
 12241 1018 00000000 		.4byte	0
 12242 101c 00000000 		.4byte	0
 12243              	.LLST111:
 12244 1020 00000000 		.4byte	.LVL329
 12245 1024 0B000000 		.4byte	.LVL331-1
 12246 1028 0100     		.2byte	0x1
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 320


 12247 102a 50       		.byte	0x50
 12248 102b 0B000000 		.4byte	.LVL331-1
 12249 102f 9C000000 		.4byte	.LVL349
 12250 1033 0100     		.2byte	0x1
 12251 1035 57       		.byte	0x57
 12252 1036 9C000000 		.4byte	.LVL349
 12253 103a A4000000 		.4byte	.LFE91
 12254 103e 0400     		.2byte	0x4
 12255 1040 F3       		.byte	0xf3
 12256 1041 01       		.uleb128 0x1
 12257 1042 50       		.byte	0x50
 12258 1043 9F       		.byte	0x9f
 12259 1044 00000000 		.4byte	0
 12260 1048 00000000 		.4byte	0
 12261              	.LLST112:
 12262 104c 00000000 		.4byte	.LVL329
 12263 1050 0B000000 		.4byte	.LVL331-1
 12264 1054 0100     		.2byte	0x1
 12265 1056 51       		.byte	0x51
 12266 1057 0B000000 		.4byte	.LVL331-1
 12267 105b 1A000000 		.4byte	.LVL332
 12268 105f 0100     		.2byte	0x1
 12269 1061 54       		.byte	0x54
 12270 1062 1A000000 		.4byte	.LVL332
 12271 1066 92000000 		.4byte	.LVL346
 12272 106a 0400     		.2byte	0x4
 12273 106c F3       		.byte	0xf3
 12274 106d 01       		.uleb128 0x1
 12275 106e 51       		.byte	0x51
 12276 106f 9F       		.byte	0x9f
 12277 1070 92000000 		.4byte	.LVL346
 12278 1074 94000000 		.4byte	.LVL347
 12279 1078 0100     		.2byte	0x1
 12280 107a 54       		.byte	0x54
 12281 107b 94000000 		.4byte	.LVL347
 12282 107f A4000000 		.4byte	.LFE91
 12283 1083 0400     		.2byte	0x4
 12284 1085 F3       		.byte	0xf3
 12285 1086 01       		.uleb128 0x1
 12286 1087 51       		.byte	0x51
 12287 1088 9F       		.byte	0x9f
 12288 1089 00000000 		.4byte	0
 12289 108d 00000000 		.4byte	0
 12290              	.LLST113:
 12291 1091 00000000 		.4byte	.LVL329
 12292 1095 0B000000 		.4byte	.LVL331-1
 12293 1099 0100     		.2byte	0x1
 12294 109b 52       		.byte	0x52
 12295 109c 0B000000 		.4byte	.LVL331-1
 12296 10a0 9C000000 		.4byte	.LVL349
 12297 10a4 0100     		.2byte	0x1
 12298 10a6 56       		.byte	0x56
 12299 10a7 9C000000 		.4byte	.LVL349
 12300 10ab A4000000 		.4byte	.LFE91
 12301 10af 0400     		.2byte	0x4
 12302 10b1 F3       		.byte	0xf3
 12303 10b2 01       		.uleb128 0x1
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 321


 12304 10b3 52       		.byte	0x52
 12305 10b4 9F       		.byte	0x9f
 12306 10b5 00000000 		.4byte	0
 12307 10b9 00000000 		.4byte	0
 12308              	.LLST114:
 12309 10bd 08000000 		.4byte	.LVL330
 12310 10c1 1A000000 		.4byte	.LVL332
 12311 10c5 0200     		.2byte	0x2
 12312 10c7 30       		.byte	0x30
 12313 10c8 9F       		.byte	0x9f
 12314 10c9 1A000000 		.4byte	.LVL332
 12315 10cd 92000000 		.4byte	.LVL346
 12316 10d1 0100     		.2byte	0x1
 12317 10d3 54       		.byte	0x54
 12318 10d4 92000000 		.4byte	.LVL346
 12319 10d8 94000000 		.4byte	.LVL347
 12320 10dc 0200     		.2byte	0x2
 12321 10de 30       		.byte	0x30
 12322 10df 9F       		.byte	0x9f
 12323 10e0 94000000 		.4byte	.LVL347
 12324 10e4 9C000000 		.4byte	.LVL349
 12325 10e8 0100     		.2byte	0x1
 12326 10ea 54       		.byte	0x54
 12327 10eb 9C000000 		.4byte	.LVL349
 12328 10ef A4000000 		.4byte	.LFE91
 12329 10f3 0100     		.2byte	0x1
 12330 10f5 50       		.byte	0x50
 12331 10f6 00000000 		.4byte	0
 12332 10fa 00000000 		.4byte	0
 12333              	.LLST115:
 12334 10fe 08000000 		.4byte	.LVL330
 12335 1102 1A000000 		.4byte	.LVL332
 12336 1106 0200     		.2byte	0x2
 12337 1108 35       		.byte	0x35
 12338 1109 9F       		.byte	0x9f
 12339 110a 1A000000 		.4byte	.LVL332
 12340 110e 42000000 		.4byte	.LVL336
 12341 1112 0100     		.2byte	0x1
 12342 1114 55       		.byte	0x55
 12343 1115 92000000 		.4byte	.LVL346
 12344 1119 94000000 		.4byte	.LVL347
 12345 111d 0200     		.2byte	0x2
 12346 111f 35       		.byte	0x35
 12347 1120 9F       		.byte	0x9f
 12348 1121 00000000 		.4byte	0
 12349 1125 00000000 		.4byte	0
 12350              	.LLST116:
 12351 1129 00000000 		.4byte	.LVL350
 12352 112d 0C000000 		.4byte	.LVL351
 12353 1131 0100     		.2byte	0x1
 12354 1133 50       		.byte	0x50
 12355 1134 00000000 		.4byte	0
 12356 1138 00000000 		.4byte	0
 12357              	.LLST117:
 12358 113c 0C000000 		.4byte	.LVL351
 12359 1140 11000000 		.4byte	.LVL352-1
 12360 1144 0100     		.2byte	0x1
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 322


 12361 1146 53       		.byte	0x53
 12362 1147 00000000 		.4byte	0
 12363 114b 00000000 		.4byte	0
 12364              	.LLST118:
 12365 114f 0C000000 		.4byte	.LVL351
 12366 1153 11000000 		.4byte	.LVL352-1
 12367 1157 0200     		.2byte	0x2
 12368 1159 73       		.byte	0x73
 12369 115a 30       		.sleb128 48
 12370 115b 00000000 		.4byte	0
 12371 115f 00000000 		.4byte	0
 12372              	.LLST119:
 12373 1163 00000000 		.4byte	.LVL354
 12374 1167 2C000000 		.4byte	.LVL355
 12375 116b 0100     		.2byte	0x1
 12376 116d 50       		.byte	0x50
 12377 116e 2C000000 		.4byte	.LVL355
 12378 1172 4B000000 		.4byte	.LVL356-1
 12379 1176 0100     		.2byte	0x1
 12380 1178 53       		.byte	0x53
 12381 1179 4B000000 		.4byte	.LVL356-1
 12382 117d 7C000000 		.4byte	.LVL357
 12383 1181 0100     		.2byte	0x1
 12384 1183 54       		.byte	0x54
 12385 1184 7C000000 		.4byte	.LVL357
 12386 1188 9E000000 		.4byte	.LVL359
 12387 118c 0300     		.2byte	0x3
 12388 118e 75       		.byte	0x75
 12389 118f 7C       		.sleb128 -4
 12390 1190 9F       		.byte	0x9f
 12391 1191 9E000000 		.4byte	.LVL359
 12392 1195 AC000000 		.4byte	.LVL360
 12393 1199 0100     		.2byte	0x1
 12394 119b 53       		.byte	0x53
 12395 119c AC000000 		.4byte	.LVL360
 12396 11a0 BC000000 		.4byte	.LVL361
 12397 11a4 0100     		.2byte	0x1
 12398 11a6 50       		.byte	0x50
 12399 11a7 BC000000 		.4byte	.LVL361
 12400 11ab BE000000 		.4byte	.LVL362
 12401 11af 0400     		.2byte	0x4
 12402 11b1 F3       		.byte	0xf3
 12403 11b2 01       		.uleb128 0x1
 12404 11b3 50       		.byte	0x50
 12405 11b4 9F       		.byte	0x9f
 12406 11b5 BE000000 		.4byte	.LVL362
 12407 11b9 C0000000 		.4byte	.LVL363
 12408 11bd 0100     		.2byte	0x1
 12409 11bf 50       		.byte	0x50
 12410 11c0 C0000000 		.4byte	.LVL363
 12411 11c4 C2000000 		.4byte	.LVL364
 12412 11c8 0400     		.2byte	0x4
 12413 11ca F3       		.byte	0xf3
 12414 11cb 01       		.uleb128 0x1
 12415 11cc 50       		.byte	0x50
 12416 11cd 9F       		.byte	0x9f
 12417 11ce C2000000 		.4byte	.LVL364
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 323


 12418 11d2 C4000000 		.4byte	.LVL365
 12419 11d6 0100     		.2byte	0x1
 12420 11d8 50       		.byte	0x50
 12421 11d9 C4000000 		.4byte	.LVL365
 12422 11dd D0000000 		.4byte	.LFE114
 12423 11e1 0400     		.2byte	0x4
 12424 11e3 F3       		.byte	0xf3
 12425 11e4 01       		.uleb128 0x1
 12426 11e5 50       		.byte	0x50
 12427 11e6 9F       		.byte	0x9f
 12428 11e7 00000000 		.4byte	0
 12429 11eb 00000000 		.4byte	0
 12430              	.LLST120:
 12431 11ef 00000000 		.4byte	.LVL354
 12432 11f3 2C000000 		.4byte	.LVL355
 12433 11f7 0100     		.2byte	0x1
 12434 11f9 50       		.byte	0x50
 12435 11fa 2C000000 		.4byte	.LVL355
 12436 11fe 4B000000 		.4byte	.LVL356-1
 12437 1202 0100     		.2byte	0x1
 12438 1204 53       		.byte	0x53
 12439 1205 4B000000 		.4byte	.LVL356-1
 12440 1209 7C000000 		.4byte	.LVL357
 12441 120d 0100     		.2byte	0x1
 12442 120f 54       		.byte	0x54
 12443 1210 7C000000 		.4byte	.LVL357
 12444 1214 9E000000 		.4byte	.LVL359
 12445 1218 0300     		.2byte	0x3
 12446 121a 75       		.byte	0x75
 12447 121b 7C       		.sleb128 -4
 12448 121c 9F       		.byte	0x9f
 12449 121d 9E000000 		.4byte	.LVL359
 12450 1221 AC000000 		.4byte	.LVL360
 12451 1225 0100     		.2byte	0x1
 12452 1227 53       		.byte	0x53
 12453 1228 AC000000 		.4byte	.LVL360
 12454 122c BC000000 		.4byte	.LVL361
 12455 1230 0100     		.2byte	0x1
 12456 1232 50       		.byte	0x50
 12457 1233 BC000000 		.4byte	.LVL361
 12458 1237 BE000000 		.4byte	.LVL362
 12459 123b 0400     		.2byte	0x4
 12460 123d F3       		.byte	0xf3
 12461 123e 01       		.uleb128 0x1
 12462 123f 50       		.byte	0x50
 12463 1240 9F       		.byte	0x9f
 12464 1241 BE000000 		.4byte	.LVL362
 12465 1245 C0000000 		.4byte	.LVL363
 12466 1249 0100     		.2byte	0x1
 12467 124b 50       		.byte	0x50
 12468 124c C0000000 		.4byte	.LVL363
 12469 1250 C2000000 		.4byte	.LVL364
 12470 1254 0400     		.2byte	0x4
 12471 1256 F3       		.byte	0xf3
 12472 1257 01       		.uleb128 0x1
 12473 1258 50       		.byte	0x50
 12474 1259 9F       		.byte	0x9f
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 324


 12475 125a C2000000 		.4byte	.LVL364
 12476 125e C4000000 		.4byte	.LVL365
 12477 1262 0100     		.2byte	0x1
 12478 1264 50       		.byte	0x50
 12479 1265 C4000000 		.4byte	.LVL365
 12480 1269 D0000000 		.4byte	.LFE114
 12481 126d 0400     		.2byte	0x4
 12482 126f F3       		.byte	0xf3
 12483 1270 01       		.uleb128 0x1
 12484 1271 50       		.byte	0x50
 12485 1272 9F       		.byte	0x9f
 12486 1273 00000000 		.4byte	0
 12487 1277 00000000 		.4byte	0
 12488              	.LLST121:
 12489 127b 00000000 		.4byte	.LVL354
 12490 127f C0000000 		.4byte	.LVL363
 12491 1283 0200     		.2byte	0x2
 12492 1285 30       		.byte	0x30
 12493 1286 9F       		.byte	0x9f
 12494 1287 C0000000 		.4byte	.LVL363
 12495 128b C2000000 		.4byte	.LVL364
 12496 128f 0100     		.2byte	0x1
 12497 1291 50       		.byte	0x50
 12498 1292 C2000000 		.4byte	.LVL364
 12499 1296 C4000000 		.4byte	.LVL365
 12500 129a 0200     		.2byte	0x2
 12501 129c 30       		.byte	0x30
 12502 129d 9F       		.byte	0x9f
 12503 129e C4000000 		.4byte	.LVL365
 12504 12a2 D0000000 		.4byte	.LFE114
 12505 12a6 0100     		.2byte	0x1
 12506 12a8 50       		.byte	0x50
 12507 12a9 00000000 		.4byte	0
 12508 12ad 00000000 		.4byte	0
 12509              	.LLST122:
 12510 12b1 00000000 		.4byte	.LVL366
 12511 12b5 10000000 		.4byte	.LVL367
 12512 12b9 0100     		.2byte	0x1
 12513 12bb 50       		.byte	0x50
 12514 12bc 10000000 		.4byte	.LVL367
 12515 12c0 21000000 		.4byte	.LVL368-1
 12516 12c4 0100     		.2byte	0x1
 12517 12c6 53       		.byte	0x53
 12518 12c7 21000000 		.4byte	.LVL368-1
 12519 12cb 52000000 		.4byte	.LVL369
 12520 12cf 0100     		.2byte	0x1
 12521 12d1 54       		.byte	0x54
 12522 12d2 52000000 		.4byte	.LVL369
 12523 12d6 76000000 		.4byte	.LVL371
 12524 12da 0300     		.2byte	0x3
 12525 12dc 75       		.byte	0x75
 12526 12dd 7C       		.sleb128 -4
 12527 12de 9F       		.byte	0x9f
 12528 12df 76000000 		.4byte	.LVL371
 12529 12e3 78000000 		.4byte	.LVL372
 12530 12e7 0100     		.2byte	0x1
 12531 12e9 50       		.byte	0x50
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 325


 12532 12ea 78000000 		.4byte	.LVL372
 12533 12ee 7A000000 		.4byte	.LVL373
 12534 12f2 0400     		.2byte	0x4
 12535 12f4 F3       		.byte	0xf3
 12536 12f5 01       		.uleb128 0x1
 12537 12f6 50       		.byte	0x50
 12538 12f7 9F       		.byte	0x9f
 12539 12f8 7A000000 		.4byte	.LVL373
 12540 12fc 82000000 		.4byte	.LVL376
 12541 1300 0100     		.2byte	0x1
 12542 1302 53       		.byte	0x53
 12543 1303 82000000 		.4byte	.LVL376
 12544 1307 88000000 		.4byte	.LFE115
 12545 130b 0400     		.2byte	0x4
 12546 130d F3       		.byte	0xf3
 12547 130e 01       		.uleb128 0x1
 12548 130f 50       		.byte	0x50
 12549 1310 9F       		.byte	0x9f
 12550 1311 00000000 		.4byte	0
 12551 1315 00000000 		.4byte	0
 12552              	.LLST123:
 12553 1319 00000000 		.4byte	.LVL366
 12554 131d 10000000 		.4byte	.LVL367
 12555 1321 0100     		.2byte	0x1
 12556 1323 50       		.byte	0x50
 12557 1324 10000000 		.4byte	.LVL367
 12558 1328 21000000 		.4byte	.LVL368-1
 12559 132c 0100     		.2byte	0x1
 12560 132e 53       		.byte	0x53
 12561 132f 21000000 		.4byte	.LVL368-1
 12562 1333 52000000 		.4byte	.LVL369
 12563 1337 0100     		.2byte	0x1
 12564 1339 54       		.byte	0x54
 12565 133a 52000000 		.4byte	.LVL369
 12566 133e 76000000 		.4byte	.LVL371
 12567 1342 0300     		.2byte	0x3
 12568 1344 75       		.byte	0x75
 12569 1345 7C       		.sleb128 -4
 12570 1346 9F       		.byte	0x9f
 12571 1347 76000000 		.4byte	.LVL371
 12572 134b 78000000 		.4byte	.LVL372
 12573 134f 0100     		.2byte	0x1
 12574 1351 50       		.byte	0x50
 12575 1352 78000000 		.4byte	.LVL372
 12576 1356 7A000000 		.4byte	.LVL373
 12577 135a 0400     		.2byte	0x4
 12578 135c F3       		.byte	0xf3
 12579 135d 01       		.uleb128 0x1
 12580 135e 50       		.byte	0x50
 12581 135f 9F       		.byte	0x9f
 12582 1360 7A000000 		.4byte	.LVL373
 12583 1364 82000000 		.4byte	.LVL376
 12584 1368 0100     		.2byte	0x1
 12585 136a 53       		.byte	0x53
 12586 136b 82000000 		.4byte	.LVL376
 12587 136f 88000000 		.4byte	.LFE115
 12588 1373 0400     		.2byte	0x4
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 326


 12589 1375 F3       		.byte	0xf3
 12590 1376 01       		.uleb128 0x1
 12591 1377 50       		.byte	0x50
 12592 1378 9F       		.byte	0x9f
 12593 1379 00000000 		.4byte	0
 12594 137d 00000000 		.4byte	0
 12595              	.LLST124:
 12596 1381 00000000 		.4byte	.LVL366
 12597 1385 72000000 		.4byte	.LVL370
 12598 1389 0200     		.2byte	0x2
 12599 138b 30       		.byte	0x30
 12600 138c 9F       		.byte	0x9f
 12601 138d 72000000 		.4byte	.LVL370
 12602 1391 76000000 		.4byte	.LVL371
 12603 1395 0200     		.2byte	0x2
 12604 1397 31       		.byte	0x31
 12605 1398 9F       		.byte	0x9f
 12606 1399 76000000 		.4byte	.LVL371
 12607 139d 78000000 		.4byte	.LVL372
 12608 13a1 0200     		.2byte	0x2
 12609 13a3 30       		.byte	0x30
 12610 13a4 9F       		.byte	0x9f
 12611 13a5 78000000 		.4byte	.LVL372
 12612 13a9 7A000000 		.4byte	.LVL373
 12613 13ad 0100     		.2byte	0x1
 12614 13af 50       		.byte	0x50
 12615 13b0 7A000000 		.4byte	.LVL373
 12616 13b4 80000000 		.4byte	.LVL375
 12617 13b8 0200     		.2byte	0x2
 12618 13ba 30       		.byte	0x30
 12619 13bb 9F       		.byte	0x9f
 12620 13bc 80000000 		.4byte	.LVL375
 12621 13c0 88000000 		.4byte	.LFE115
 12622 13c4 0100     		.2byte	0x1
 12623 13c6 50       		.byte	0x50
 12624 13c7 00000000 		.4byte	0
 12625 13cb 00000000 		.4byte	0
 12626              	.LLST125:
 12627 13cf 00000000 		.4byte	.LVL377
 12628 13d3 18000000 		.4byte	.LVL380
 12629 13d7 0100     		.2byte	0x1
 12630 13d9 50       		.byte	0x50
 12631 13da 18000000 		.4byte	.LVL380
 12632 13de 4B000000 		.4byte	.LVL384-1
 12633 13e2 0100     		.2byte	0x1
 12634 13e4 53       		.byte	0x53
 12635 13e5 4B000000 		.4byte	.LVL384-1
 12636 13e9 94000000 		.4byte	.LVL385
 12637 13ed 0100     		.2byte	0x1
 12638 13ef 54       		.byte	0x54
 12639 13f0 94000000 		.4byte	.LVL385
 12640 13f4 96000000 		.4byte	.LVL386
 12641 13f8 0400     		.2byte	0x4
 12642 13fa F3       		.byte	0xf3
 12643 13fb 01       		.uleb128 0x1
 12644 13fc 50       		.byte	0x50
 12645 13fd 9F       		.byte	0x9f
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 327


 12646 13fe 96000000 		.4byte	.LVL386
 12647 1402 A0000000 		.4byte	.LFE116
 12648 1406 0100     		.2byte	0x1
 12649 1408 50       		.byte	0x50
 12650 1409 00000000 		.4byte	0
 12651 140d 00000000 		.4byte	0
 12652              	.LLST126:
 12653 1411 00000000 		.4byte	.LVL377
 12654 1415 12000000 		.4byte	.LVL379
 12655 1419 0100     		.2byte	0x1
 12656 141b 51       		.byte	0x51
 12657 141c 12000000 		.4byte	.LVL379
 12658 1420 96000000 		.4byte	.LVL386
 12659 1424 0400     		.2byte	0x4
 12660 1426 F3       		.byte	0xf3
 12661 1427 01       		.uleb128 0x1
 12662 1428 51       		.byte	0x51
 12663 1429 9F       		.byte	0x9f
 12664 142a 96000000 		.4byte	.LVL386
 12665 142e A0000000 		.4byte	.LFE116
 12666 1432 0100     		.2byte	0x1
 12667 1434 51       		.byte	0x51
 12668 1435 00000000 		.4byte	0
 12669 1439 00000000 		.4byte	0
 12670              	.LLST127:
 12671 143d 00000000 		.4byte	.LVL377
 12672 1441 18000000 		.4byte	.LVL380
 12673 1445 0100     		.2byte	0x1
 12674 1447 50       		.byte	0x50
 12675 1448 18000000 		.4byte	.LVL380
 12676 144c 4B000000 		.4byte	.LVL384-1
 12677 1450 0100     		.2byte	0x1
 12678 1452 53       		.byte	0x53
 12679 1453 4B000000 		.4byte	.LVL384-1
 12680 1457 94000000 		.4byte	.LVL385
 12681 145b 0100     		.2byte	0x1
 12682 145d 54       		.byte	0x54
 12683 145e 94000000 		.4byte	.LVL385
 12684 1462 96000000 		.4byte	.LVL386
 12685 1466 0400     		.2byte	0x4
 12686 1468 F3       		.byte	0xf3
 12687 1469 01       		.uleb128 0x1
 12688 146a 50       		.byte	0x50
 12689 146b 9F       		.byte	0x9f
 12690 146c 96000000 		.4byte	.LVL386
 12691 1470 A0000000 		.4byte	.LFE116
 12692 1474 0100     		.2byte	0x1
 12693 1476 50       		.byte	0x50
 12694 1477 00000000 		.4byte	0
 12695 147b 00000000 		.4byte	0
 12696              	.LLST128:
 12697 147f 1C000000 		.4byte	.LVL381
 12698 1483 30000000 		.4byte	.LVL383
 12699 1487 0100     		.2byte	0x1
 12700 1489 51       		.byte	0x51
 12701 148a 00000000 		.4byte	0
 12702 148e 00000000 		.4byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 328


 12703              	.LLST129:
 12704 1492 10000000 		.4byte	.LVL378
 12705 1496 28000000 		.4byte	.LVL382
 12706 149a 0100     		.2byte	0x1
 12707 149c 52       		.byte	0x52
 12708 149d 28000000 		.4byte	.LVL382
 12709 14a1 4B000000 		.4byte	.LVL384-1
 12710 14a5 0200     		.2byte	0x2
 12711 14a7 73       		.byte	0x73
 12712 14a8 2C       		.sleb128 44
 12713 14a9 00000000 		.4byte	0
 12714 14ad 00000000 		.4byte	0
 12715              	.LLST130:
 12716 14b1 00000000 		.4byte	.LVL387
 12717 14b5 1C000000 		.4byte	.LVL388
 12718 14b9 0100     		.2byte	0x1
 12719 14bb 50       		.byte	0x50
 12720 14bc 1C000000 		.4byte	.LVL388
 12721 14c0 7A000000 		.4byte	.LVL398
 12722 14c4 0100     		.2byte	0x1
 12723 14c6 55       		.byte	0x55
 12724 14c7 7A000000 		.4byte	.LVL398
 12725 14cb A9000000 		.4byte	.LVL399-1
 12726 14cf 0100     		.2byte	0x1
 12727 14d1 50       		.byte	0x50
 12728 14d2 A9000000 		.4byte	.LVL399-1
 12729 14d6 CA000000 		.4byte	.LVL404
 12730 14da 0100     		.2byte	0x1
 12731 14dc 55       		.byte	0x55
 12732 14dd 00000000 		.4byte	0
 12733 14e1 00000000 		.4byte	0
 12734              	.LLST131:
 12735 14e5 20000000 		.4byte	.LVL389
 12736 14e9 2D000000 		.4byte	.LVL390-1
 12737 14ed 0100     		.2byte	0x1
 12738 14ef 50       		.byte	0x50
 12739 14f0 2D000000 		.4byte	.LVL390-1
 12740 14f4 C6000000 		.4byte	.LVL403
 12741 14f8 0100     		.2byte	0x1
 12742 14fa 54       		.byte	0x54
 12743 14fb 00000000 		.4byte	0
 12744 14ff 00000000 		.4byte	0
 12745              	.LLST132:
 12746 1503 54000000 		.4byte	.LVL391
 12747 1507 58000000 		.4byte	.LVL392
 12748 150b 0300     		.2byte	0x3
 12749 150d 08       		.byte	0x8
 12750 150e 42       		.byte	0x42
 12751 150f 9F       		.byte	0x9f
 12752 1510 58000000 		.4byte	.LVL392
 12753 1514 5C000000 		.4byte	.LVL393
 12754 1518 0300     		.2byte	0x3
 12755 151a 08       		.byte	0x8
 12756 151b 53       		.byte	0x53
 12757 151c 9F       		.byte	0x9f
 12758 151d 5C000000 		.4byte	.LVL393
 12759 1521 60000000 		.4byte	.LVL394
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 329


 12760 1525 0300     		.2byte	0x3
 12761 1527 08       		.byte	0x8
 12762 1528 44       		.byte	0x44
 12763 1529 9F       		.byte	0x9f
 12764 152a 60000000 		.4byte	.LVL394
 12765 152e 64000000 		.4byte	.LVL395
 12766 1532 0200     		.2byte	0x2
 12767 1534 30       		.byte	0x30
 12768 1535 9F       		.byte	0x9f
 12769 1536 66000000 		.4byte	.LVL396
 12770 153a B8000000 		.4byte	.LVL402
 12771 153e 0100     		.2byte	0x1
 12772 1540 56       		.byte	0x56
 12773 1541 00000000 		.4byte	0
 12774 1545 00000000 		.4byte	0
 12775              	.LLST133:
 12776 1549 00000000 		.4byte	.LVL405
 12777 154d 1C000000 		.4byte	.LVL406
 12778 1551 0100     		.2byte	0x1
 12779 1553 50       		.byte	0x50
 12780 1554 1C000000 		.4byte	.LVL406
 12781 1558 6C000000 		.4byte	.LVL411
 12782 155c 0100     		.2byte	0x1
 12783 155e 54       		.byte	0x54
 12784 155f 6C000000 		.4byte	.LVL411
 12785 1563 81000000 		.4byte	.LVL412-1
 12786 1567 0100     		.2byte	0x1
 12787 1569 50       		.byte	0x50
 12788 156a 81000000 		.4byte	.LVL412-1
 12789 156e 84000000 		.4byte	.LVL413
 12790 1572 0100     		.2byte	0x1
 12791 1574 54       		.byte	0x54
 12792 1575 84000000 		.4byte	.LVL413
 12793 1579 95000000 		.4byte	.LVL414-1
 12794 157d 0100     		.2byte	0x1
 12795 157f 50       		.byte	0x50
 12796 1580 95000000 		.4byte	.LVL414-1
 12797 1584 B6000000 		.4byte	.LVL419
 12798 1588 0100     		.2byte	0x1
 12799 158a 54       		.byte	0x54
 12800 158b 00000000 		.4byte	0
 12801 158f 00000000 		.4byte	0
 12802              	.LLST134:
 12803 1593 20000000 		.4byte	.LVL407
 12804 1597 2D000000 		.4byte	.LVL408-1
 12805 159b 0100     		.2byte	0x1
 12806 159d 50       		.byte	0x50
 12807 159e 2D000000 		.4byte	.LVL408-1
 12808 15a2 B2000000 		.4byte	.LVL418
 12809 15a6 0100     		.2byte	0x1
 12810 15a8 55       		.byte	0x55
 12811 15a9 00000000 		.4byte	0
 12812 15ad 00000000 		.4byte	0
 12813              	.LLST135:
 12814 15b1 58000000 		.4byte	.LVL409
 12815 15b5 A4000000 		.4byte	.LVL417
 12816 15b9 0100     		.2byte	0x1
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 330


 12817 15bb 56       		.byte	0x56
 12818 15bc 00000000 		.4byte	0
 12819 15c0 00000000 		.4byte	0
 12820              	.LLST136:
 12821 15c4 00000000 		.4byte	.LVL421
 12822 15c8 09000000 		.4byte	.LVL422-1
 12823 15cc 0100     		.2byte	0x1
 12824 15ce 50       		.byte	0x50
 12825 15cf 09000000 		.4byte	.LVL422-1
 12826 15d3 78000000 		.4byte	.LVL428
 12827 15d7 0100     		.2byte	0x1
 12828 15d9 55       		.byte	0x55
 12829 15da 78000000 		.4byte	.LVL428
 12830 15de 80000000 		.4byte	.LFE122
 12831 15e2 0400     		.2byte	0x4
 12832 15e4 F3       		.byte	0xf3
 12833 15e5 01       		.uleb128 0x1
 12834 15e6 50       		.byte	0x50
 12835 15e7 9F       		.byte	0x9f
 12836 15e8 00000000 		.4byte	0
 12837 15ec 00000000 		.4byte	0
 12838              	.LLST137:
 12839 15f0 00000000 		.4byte	.LVL421
 12840 15f4 09000000 		.4byte	.LVL422-1
 12841 15f8 0100     		.2byte	0x1
 12842 15fa 51       		.byte	0x51
 12843 15fb 09000000 		.4byte	.LVL422-1
 12844 15ff 4A000000 		.4byte	.LVL426
 12845 1603 0100     		.2byte	0x1
 12846 1605 54       		.byte	0x54
 12847 1606 4A000000 		.4byte	.LVL426
 12848 160a 80000000 		.4byte	.LFE122
 12849 160e 0400     		.2byte	0x4
 12850 1610 F3       		.byte	0xf3
 12851 1611 01       		.uleb128 0x1
 12852 1612 51       		.byte	0x51
 12853 1613 9F       		.byte	0x9f
 12854 1614 00000000 		.4byte	0
 12855 1618 00000000 		.4byte	0
 12856              	.LLST138:
 12857 161c 4A000000 		.4byte	.LVL426
 12858 1620 78000000 		.4byte	.LVL428
 12859 1624 0100     		.2byte	0x1
 12860 1626 54       		.byte	0x54
 12861 1627 78000000 		.4byte	.LVL428
 12862 162b 80000000 		.4byte	.LFE122
 12863 162f 0100     		.2byte	0x1
 12864 1631 50       		.byte	0x50
 12865 1632 00000000 		.4byte	0
 12866 1636 00000000 		.4byte	0
 12867              	.LLST139:
 12868 163a 00000000 		.4byte	.LVL429
 12869 163e 0D000000 		.4byte	.LVL430-1
 12870 1642 0100     		.2byte	0x1
 12871 1644 50       		.byte	0x50
 12872 1645 0D000000 		.4byte	.LVL430-1
 12873 1649 9C000000 		.4byte	.LVL440
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 331


 12874 164d 0100     		.2byte	0x1
 12875 164f 57       		.byte	0x57
 12876 1650 9C000000 		.4byte	.LVL440
 12877 1654 A4000000 		.4byte	.LFE123
 12878 1658 0400     		.2byte	0x4
 12879 165a F3       		.byte	0xf3
 12880 165b 01       		.uleb128 0x1
 12881 165c 50       		.byte	0x50
 12882 165d 9F       		.byte	0x9f
 12883 165e 00000000 		.4byte	0
 12884 1662 00000000 		.4byte	0
 12885              	.LLST140:
 12886 1666 00000000 		.4byte	.LVL429
 12887 166a 0D000000 		.4byte	.LVL430-1
 12888 166e 0100     		.2byte	0x1
 12889 1670 51       		.byte	0x51
 12890 1671 0D000000 		.4byte	.LVL430-1
 12891 1675 80000000 		.4byte	.LVL434
 12892 1679 0100     		.2byte	0x1
 12893 167b 55       		.byte	0x55
 12894 167c 80000000 		.4byte	.LVL434
 12895 1680 86000000 		.4byte	.LVL437
 12896 1684 0400     		.2byte	0x4
 12897 1686 F3       		.byte	0xf3
 12898 1687 01       		.uleb128 0x1
 12899 1688 51       		.byte	0x51
 12900 1689 9F       		.byte	0x9f
 12901 168a 86000000 		.4byte	.LVL437
 12902 168e 88000000 		.4byte	.LVL438
 12903 1692 0100     		.2byte	0x1
 12904 1694 55       		.byte	0x55
 12905 1695 88000000 		.4byte	.LVL438
 12906 1699 A4000000 		.4byte	.LFE123
 12907 169d 0400     		.2byte	0x4
 12908 169f F3       		.byte	0xf3
 12909 16a0 01       		.uleb128 0x1
 12910 16a1 51       		.byte	0x51
 12911 16a2 9F       		.byte	0x9f
 12912 16a3 00000000 		.4byte	0
 12913 16a7 00000000 		.4byte	0
 12914              	.LLST141:
 12915 16ab 00000000 		.4byte	.LVL429
 12916 16af 0D000000 		.4byte	.LVL430-1
 12917 16b3 0100     		.2byte	0x1
 12918 16b5 52       		.byte	0x52
 12919 16b6 0D000000 		.4byte	.LVL430-1
 12920 16ba 84000000 		.4byte	.LVL436
 12921 16be 0100     		.2byte	0x1
 12922 16c0 54       		.byte	0x54
 12923 16c1 84000000 		.4byte	.LVL436
 12924 16c5 86000000 		.4byte	.LVL437
 12925 16c9 0400     		.2byte	0x4
 12926 16cb F3       		.byte	0xf3
 12927 16cc 01       		.uleb128 0x1
 12928 16cd 52       		.byte	0x52
 12929 16ce 9F       		.byte	0x9f
 12930 16cf 86000000 		.4byte	.LVL437
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 332


 12931 16d3 88000000 		.4byte	.LVL438
 12932 16d7 0100     		.2byte	0x1
 12933 16d9 54       		.byte	0x54
 12934 16da 88000000 		.4byte	.LVL438
 12935 16de A4000000 		.4byte	.LFE123
 12936 16e2 0400     		.2byte	0x4
 12937 16e4 F3       		.byte	0xf3
 12938 16e5 01       		.uleb128 0x1
 12939 16e6 52       		.byte	0x52
 12940 16e7 9F       		.byte	0x9f
 12941 16e8 00000000 		.4byte	0
 12942 16ec 00000000 		.4byte	0
 12943              	.LLST142:
 12944 16f0 00000000 		.4byte	.LVL429
 12945 16f4 0D000000 		.4byte	.LVL430-1
 12946 16f8 0100     		.2byte	0x1
 12947 16fa 53       		.byte	0x53
 12948 16fb 0D000000 		.4byte	.LVL430-1
 12949 16ff 9C000000 		.4byte	.LVL440
 12950 1703 0100     		.2byte	0x1
 12951 1705 56       		.byte	0x56
 12952 1706 9C000000 		.4byte	.LVL440
 12953 170a A4000000 		.4byte	.LFE123
 12954 170e 0400     		.2byte	0x4
 12955 1710 F3       		.byte	0xf3
 12956 1711 01       		.uleb128 0x1
 12957 1712 53       		.byte	0x53
 12958 1713 9F       		.byte	0x9f
 12959 1714 00000000 		.4byte	0
 12960 1718 00000000 		.4byte	0
 12961              	.LLST143:
 12962 171c 82000000 		.4byte	.LVL435
 12963 1720 86000000 		.4byte	.LVL437
 12964 1724 0200     		.2byte	0x2
 12965 1726 31       		.byte	0x31
 12966 1727 9F       		.byte	0x9f
 12967 1728 88000000 		.4byte	.LVL438
 12968 172c 9C000000 		.4byte	.LVL440
 12969 1730 0100     		.2byte	0x1
 12970 1732 54       		.byte	0x54
 12971 1733 9C000000 		.4byte	.LVL440
 12972 1737 A4000000 		.4byte	.LFE123
 12973 173b 0100     		.2byte	0x1
 12974 173d 50       		.byte	0x50
 12975 173e 00000000 		.4byte	0
 12976 1742 00000000 		.4byte	0
 12977              	.LLST144:
 12978 1746 00000000 		.4byte	.LVL441
 12979 174a 0D000000 		.4byte	.LVL443-1
 12980 174e 0100     		.2byte	0x1
 12981 1750 50       		.byte	0x50
 12982 1751 0D000000 		.4byte	.LVL443-1
 12983 1755 AE000000 		.4byte	.LVL452
 12984 1759 0100     		.2byte	0x1
 12985 175b 54       		.byte	0x54
 12986 175c AE000000 		.4byte	.LVL452
 12987 1760 B8000000 		.4byte	.LFE124
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 333


 12988 1764 0400     		.2byte	0x4
 12989 1766 F3       		.byte	0xf3
 12990 1767 01       		.uleb128 0x1
 12991 1768 50       		.byte	0x50
 12992 1769 9F       		.byte	0x9f
 12993 176a 00000000 		.4byte	0
 12994 176e 00000000 		.4byte	0
 12995              	.LLST145:
 12996 1772 00000000 		.4byte	.LVL441
 12997 1776 0D000000 		.4byte	.LVL443-1
 12998 177a 0100     		.2byte	0x1
 12999 177c 51       		.byte	0x51
 13000 177d 0D000000 		.4byte	.LVL443-1
 13001 1781 32000000 		.4byte	.LVL445
 13002 1785 0100     		.2byte	0x1
 13003 1787 57       		.byte	0x57
 13004 1788 32000000 		.4byte	.LVL445
 13005 178c 38000000 		.4byte	.LVL446
 13006 1790 0400     		.2byte	0x4
 13007 1792 F3       		.byte	0xf3
 13008 1793 01       		.uleb128 0x1
 13009 1794 51       		.byte	0x51
 13010 1795 9F       		.byte	0x9f
 13011 1796 38000000 		.4byte	.LVL446
 13012 179a 58000000 		.4byte	.LVL447
 13013 179e 0100     		.2byte	0x1
 13014 17a0 57       		.byte	0x57
 13015 17a1 58000000 		.4byte	.LVL447
 13016 17a5 B8000000 		.4byte	.LFE124
 13017 17a9 0400     		.2byte	0x4
 13018 17ab F3       		.byte	0xf3
 13019 17ac 01       		.uleb128 0x1
 13020 17ad 51       		.byte	0x51
 13021 17ae 9F       		.byte	0x9f
 13022 17af 00000000 		.4byte	0
 13023 17b3 00000000 		.4byte	0
 13024              	.LLST146:
 13025 17b7 00000000 		.4byte	.LVL441
 13026 17bb 0D000000 		.4byte	.LVL443-1
 13027 17bf 0100     		.2byte	0x1
 13028 17c1 52       		.byte	0x52
 13029 17c2 0D000000 		.4byte	.LVL443-1
 13030 17c6 B8000000 		.4byte	.LFE124
 13031 17ca 0400     		.2byte	0x4
 13032 17cc F3       		.byte	0xf3
 13033 17cd 01       		.uleb128 0x1
 13034 17ce 52       		.byte	0x52
 13035 17cf 9F       		.byte	0x9f
 13036 17d0 00000000 		.4byte	0
 13037 17d4 00000000 		.4byte	0
 13038              	.LLST147:
 13039 17d8 00000000 		.4byte	.LVL441
 13040 17dc 0D000000 		.4byte	.LVL443-1
 13041 17e0 0100     		.2byte	0x1
 13042 17e2 53       		.byte	0x53
 13043 17e3 0D000000 		.4byte	.LVL443-1
 13044 17e7 6E000000 		.4byte	.LVL449
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 334


 13045 17eb 0100     		.2byte	0x1
 13046 17ed 56       		.byte	0x56
 13047 17ee 6E000000 		.4byte	.LVL449
 13048 17f2 B8000000 		.4byte	.LFE124
 13049 17f6 0400     		.2byte	0x4
 13050 17f8 F3       		.byte	0xf3
 13051 17f9 01       		.uleb128 0x1
 13052 17fa 53       		.byte	0x53
 13053 17fb 9F       		.byte	0x9f
 13054 17fc 00000000 		.4byte	0
 13055 1800 00000000 		.4byte	0
 13056              	.LLST148:
 13057 1804 0A000000 		.4byte	.LVL442
 13058 1808 0D000000 		.4byte	.LVL443-1
 13059 180c 0100     		.2byte	0x1
 13060 180e 50       		.byte	0x50
 13061 180f 0D000000 		.4byte	.LVL443-1
 13062 1813 AE000000 		.4byte	.LVL452
 13063 1817 0100     		.2byte	0x1
 13064 1819 54       		.byte	0x54
 13065 181a AE000000 		.4byte	.LVL452
 13066 181e B8000000 		.4byte	.LFE124
 13067 1822 0400     		.2byte	0x4
 13068 1824 F3       		.byte	0xf3
 13069 1825 01       		.uleb128 0x1
 13070 1826 50       		.byte	0x50
 13071 1827 9F       		.byte	0x9f
 13072 1828 00000000 		.4byte	0
 13073 182c 00000000 		.4byte	0
 13074              	.LLST149:
 13075 1830 0A000000 		.4byte	.LVL442
 13076 1834 58000000 		.4byte	.LVL447
 13077 1838 0200     		.2byte	0x2
 13078 183a 31       		.byte	0x31
 13079 183b 9F       		.byte	0x9f
 13080 183c 58000000 		.4byte	.LVL447
 13081 1840 AE000000 		.4byte	.LVL452
 13082 1844 0100     		.2byte	0x1
 13083 1846 55       		.byte	0x55
 13084 1847 AE000000 		.4byte	.LVL452
 13085 184b B8000000 		.4byte	.LFE124
 13086 184f 0100     		.2byte	0x1
 13087 1851 50       		.byte	0x50
 13088 1852 00000000 		.4byte	0
 13089 1856 00000000 		.4byte	0
 13090              	.LLST150:
 13091 185a 1A000000 		.4byte	.LVL444
 13092 185e 63000000 		.4byte	.LVL448-1
 13093 1862 0100     		.2byte	0x1
 13094 1864 53       		.byte	0x53
 13095 1865 00000000 		.4byte	0
 13096 1869 00000000 		.4byte	0
 13097              	.LLST151:
 13098 186d 00000000 		.4byte	.LVL453
 13099 1871 72000000 		.4byte	.LVL462
 13100 1875 0100     		.2byte	0x1
 13101 1877 50       		.byte	0x50
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 335


 13102 1878 72000000 		.4byte	.LVL462
 13103 187c 9C000000 		.4byte	.LVL465
 13104 1880 0100     		.2byte	0x1
 13105 1882 56       		.byte	0x56
 13106 1883 9C000000 		.4byte	.LVL465
 13107 1887 A2000000 		.4byte	.LVL466
 13108 188b 0100     		.2byte	0x1
 13109 188d 50       		.byte	0x50
 13110 188e A2000000 		.4byte	.LVL466
 13111 1892 C8000000 		.4byte	.LVL468
 13112 1896 0100     		.2byte	0x1
 13113 1898 56       		.byte	0x56
 13114 1899 C8000000 		.4byte	.LVL468
 13115 189d D8000000 		.4byte	.LFE125
 13116 18a1 0400     		.2byte	0x4
 13117 18a3 F3       		.byte	0xf3
 13118 18a4 01       		.uleb128 0x1
 13119 18a5 50       		.byte	0x50
 13120 18a6 9F       		.byte	0x9f
 13121 18a7 00000000 		.4byte	0
 13122 18ab 00000000 		.4byte	0
 13123              	.LLST152:
 13124 18af 00000000 		.4byte	.LVL453
 13125 18b3 3A000000 		.4byte	.LVL458
 13126 18b7 0100     		.2byte	0x1
 13127 18b9 51       		.byte	0x51
 13128 18ba 3A000000 		.4byte	.LVL458
 13129 18be 40000000 		.4byte	.LVL459
 13130 18c2 0400     		.2byte	0x4
 13131 18c4 F3       		.byte	0xf3
 13132 18c5 01       		.uleb128 0x1
 13133 18c6 51       		.byte	0x51
 13134 18c7 9F       		.byte	0x9f
 13135 18c8 40000000 		.4byte	.LVL459
 13136 18cc 60000000 		.4byte	.LVL460
 13137 18d0 0100     		.2byte	0x1
 13138 18d2 51       		.byte	0x51
 13139 18d3 60000000 		.4byte	.LVL460
 13140 18d7 D8000000 		.4byte	.LFE125
 13141 18db 0400     		.2byte	0x4
 13142 18dd F3       		.byte	0xf3
 13143 18de 01       		.uleb128 0x1
 13144 18df 51       		.byte	0x51
 13145 18e0 9F       		.byte	0x9f
 13146 18e1 00000000 		.4byte	0
 13147 18e5 00000000 		.4byte	0
 13148              	.LLST153:
 13149 18e9 00000000 		.4byte	.LVL453
 13150 18ed 2A000000 		.4byte	.LVL457
 13151 18f1 0100     		.2byte	0x1
 13152 18f3 52       		.byte	0x52
 13153 18f4 2A000000 		.4byte	.LVL457
 13154 18f8 D8000000 		.4byte	.LFE125
 13155 18fc 0400     		.2byte	0x4
 13156 18fe F3       		.byte	0xf3
 13157 18ff 01       		.uleb128 0x1
 13158 1900 52       		.byte	0x52
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 336


 13159 1901 9F       		.byte	0x9f
 13160 1902 00000000 		.4byte	0
 13161 1906 00000000 		.4byte	0
 13162              	.LLST154:
 13163 190a 00000000 		.4byte	.LVL453
 13164 190e 20000000 		.4byte	.LVL455
 13165 1912 0100     		.2byte	0x1
 13166 1914 53       		.byte	0x53
 13167 1915 20000000 		.4byte	.LVL455
 13168 1919 D8000000 		.4byte	.LFE125
 13169 191d 0400     		.2byte	0x4
 13170 191f F3       		.byte	0xf3
 13171 1920 01       		.uleb128 0x1
 13172 1921 53       		.byte	0x53
 13173 1922 9F       		.byte	0x9f
 13174 1923 00000000 		.4byte	0
 13175 1927 00000000 		.4byte	0
 13176              	.LLST155:
 13177 192b 00000000 		.4byte	.LVL453
 13178 192f D0000000 		.4byte	.LVL470
 13179 1933 0200     		.2byte	0x2
 13180 1935 91       		.byte	0x91
 13181 1936 00       		.sleb128 0
 13182 1937 D0000000 		.4byte	.LVL470
 13183 193b D8000000 		.4byte	.LFE125
 13184 193f 0200     		.2byte	0x2
 13185 1941 7D       		.byte	0x7d
 13186 1942 00       		.sleb128 0
 13187 1943 00000000 		.4byte	0
 13188 1947 00000000 		.4byte	0
 13189              	.LLST156:
 13190 194b 02000000 		.4byte	.LVL454
 13191 194f 72000000 		.4byte	.LVL462
 13192 1953 0100     		.2byte	0x1
 13193 1955 50       		.byte	0x50
 13194 1956 72000000 		.4byte	.LVL462
 13195 195a 9C000000 		.4byte	.LVL465
 13196 195e 0100     		.2byte	0x1
 13197 1960 56       		.byte	0x56
 13198 1961 9C000000 		.4byte	.LVL465
 13199 1965 A2000000 		.4byte	.LVL466
 13200 1969 0100     		.2byte	0x1
 13201 196b 50       		.byte	0x50
 13202 196c A2000000 		.4byte	.LVL466
 13203 1970 C8000000 		.4byte	.LVL468
 13204 1974 0100     		.2byte	0x1
 13205 1976 56       		.byte	0x56
 13206 1977 C8000000 		.4byte	.LVL468
 13207 197b D8000000 		.4byte	.LFE125
 13208 197f 0400     		.2byte	0x4
 13209 1981 F3       		.byte	0xf3
 13210 1982 01       		.uleb128 0x1
 13211 1983 50       		.byte	0x50
 13212 1984 9F       		.byte	0x9f
 13213 1985 00000000 		.4byte	0
 13214 1989 00000000 		.4byte	0
 13215              	.LLST157:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 337


 13216 198d 22000000 		.4byte	.LVL456
 13217 1991 68000000 		.4byte	.LVL461
 13218 1995 0100     		.2byte	0x1
 13219 1997 53       		.byte	0x53
 13220 1998 00000000 		.4byte	0
 13221 199c 00000000 		.4byte	0
 13222              	.LLST158:
 13223 19a0 02000000 		.4byte	.LVL454
 13224 19a4 60000000 		.4byte	.LVL460
 13225 19a8 0200     		.2byte	0x2
 13226 19aa 31       		.byte	0x31
 13227 19ab 9F       		.byte	0x9f
 13228 19ac 60000000 		.4byte	.LVL460
 13229 19b0 D0000000 		.4byte	.LVL470
 13230 19b4 0100     		.2byte	0x1
 13231 19b6 55       		.byte	0x55
 13232 19b7 D0000000 		.4byte	.LVL470
 13233 19bb D8000000 		.4byte	.LFE125
 13234 19bf 0100     		.2byte	0x1
 13235 19c1 50       		.byte	0x50
 13236 19c2 00000000 		.4byte	0
 13237 19c6 00000000 		.4byte	0
 13238              	.LLST159:
 13239 19ca C8000000 		.4byte	.LVL468
 13240 19ce CC000000 		.4byte	.LVL469
 13241 19d2 0100     		.2byte	0x1
 13242 19d4 54       		.byte	0x54
 13243 19d5 00000000 		.4byte	0
 13244 19d9 00000000 		.4byte	0
 13245              	.LLST160:
 13246 19dd 00000000 		.4byte	.LVL471
 13247 19e1 3C000000 		.4byte	.LVL475
 13248 19e5 0100     		.2byte	0x1
 13249 19e7 50       		.byte	0x50
 13250 19e8 3C000000 		.4byte	.LVL475
 13251 19ec 66000000 		.4byte	.LVL478
 13252 19f0 0100     		.2byte	0x1
 13253 19f2 54       		.byte	0x54
 13254 19f3 66000000 		.4byte	.LVL478
 13255 19f7 6C000000 		.4byte	.LVL480
 13256 19fb 0100     		.2byte	0x1
 13257 19fd 50       		.byte	0x50
 13258 19fe 6C000000 		.4byte	.LVL480
 13259 1a02 8E000000 		.4byte	.LVL482
 13260 1a06 0100     		.2byte	0x1
 13261 1a08 54       		.byte	0x54
 13262 1a09 8E000000 		.4byte	.LVL482
 13263 1a0d 9C000000 		.4byte	.LFE126
 13264 1a11 0400     		.2byte	0x4
 13265 1a13 F3       		.byte	0xf3
 13266 1a14 01       		.uleb128 0x1
 13267 1a15 50       		.byte	0x50
 13268 1a16 9F       		.byte	0x9f
 13269 1a17 00000000 		.4byte	0
 13270 1a1b 00000000 		.4byte	0
 13271              	.LLST161:
 13272 1a1f 00000000 		.4byte	.LVL471
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 338


 13273 1a23 3F000000 		.4byte	.LVL476-1
 13274 1a27 0100     		.2byte	0x1
 13275 1a29 51       		.byte	0x51
 13276 1a2a 3F000000 		.4byte	.LVL476-1
 13277 1a2e 66000000 		.4byte	.LVL478
 13278 1a32 0100     		.2byte	0x1
 13279 1a34 56       		.byte	0x56
 13280 1a35 66000000 		.4byte	.LVL478
 13281 1a39 6A000000 		.4byte	.LVL479
 13282 1a3d 0100     		.2byte	0x1
 13283 1a3f 51       		.byte	0x51
 13284 1a40 6A000000 		.4byte	.LVL479
 13285 1a44 8E000000 		.4byte	.LVL482
 13286 1a48 0100     		.2byte	0x1
 13287 1a4a 56       		.byte	0x56
 13288 1a4b 8E000000 		.4byte	.LVL482
 13289 1a4f 9C000000 		.4byte	.LFE126
 13290 1a53 0400     		.2byte	0x4
 13291 1a55 F3       		.byte	0xf3
 13292 1a56 01       		.uleb128 0x1
 13293 1a57 51       		.byte	0x51
 13294 1a58 9F       		.byte	0x9f
 13295 1a59 00000000 		.4byte	0
 13296 1a5d 00000000 		.4byte	0
 13297              	.LLST162:
 13298 1a61 02000000 		.4byte	.LVL472
 13299 1a65 3C000000 		.4byte	.LVL475
 13300 1a69 0100     		.2byte	0x1
 13301 1a6b 50       		.byte	0x50
 13302 1a6c 3C000000 		.4byte	.LVL475
 13303 1a70 66000000 		.4byte	.LVL478
 13304 1a74 0100     		.2byte	0x1
 13305 1a76 54       		.byte	0x54
 13306 1a77 66000000 		.4byte	.LVL478
 13307 1a7b 6C000000 		.4byte	.LVL480
 13308 1a7f 0100     		.2byte	0x1
 13309 1a81 50       		.byte	0x50
 13310 1a82 6C000000 		.4byte	.LVL480
 13311 1a86 8E000000 		.4byte	.LVL482
 13312 1a8a 0100     		.2byte	0x1
 13313 1a8c 54       		.byte	0x54
 13314 1a8d 8E000000 		.4byte	.LVL482
 13315 1a91 9C000000 		.4byte	.LFE126
 13316 1a95 0400     		.2byte	0x4
 13317 1a97 F3       		.byte	0xf3
 13318 1a98 01       		.uleb128 0x1
 13319 1a99 50       		.byte	0x50
 13320 1a9a 9F       		.byte	0x9f
 13321 1a9b 00000000 		.4byte	0
 13322 1a9f 00000000 		.4byte	0
 13323              	.LLST163:
 13324 1aa3 1C000000 		.4byte	.LVL473
 13325 1aa7 32000000 		.4byte	.LVL474
 13326 1aab 0100     		.2byte	0x1
 13327 1aad 53       		.byte	0x53
 13328 1aae 00000000 		.4byte	0
 13329 1ab2 00000000 		.4byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 339


 13330              	.LLST164:
 13331 1ab6 8E000000 		.4byte	.LVL482
 13332 1aba 92000000 		.4byte	.LVL483
 13333 1abe 0100     		.2byte	0x1
 13334 1ac0 55       		.byte	0x55
 13335 1ac1 00000000 		.4byte	0
 13336 1ac5 00000000 		.4byte	0
 13337              	.LLST165:
 13338 1ac9 00000000 		.4byte	.LVL484
 13339 1acd 0C000000 		.4byte	.LVL485
 13340 1ad1 0100     		.2byte	0x1
 13341 1ad3 50       		.byte	0x50
 13342 1ad4 00000000 		.4byte	0
 13343 1ad8 00000000 		.4byte	0
 13344              	.LLST166:
 13345 1adc 0C000000 		.4byte	.LVL485
 13346 1ae0 22000000 		.4byte	.LVL488
 13347 1ae4 0100     		.2byte	0x1
 13348 1ae6 54       		.byte	0x54
 13349 1ae7 24000000 		.4byte	.LVL489
 13350 1aeb 26000000 		.4byte	.LVL490
 13351 1aef 0100     		.2byte	0x1
 13352 1af1 54       		.byte	0x54
 13353 1af2 00000000 		.4byte	0
 13354 1af6 00000000 		.4byte	0
 13355              	.LLST167:
 13356 1afa 20000000 		.4byte	.LVL487
 13357 1afe 24000000 		.4byte	.LVL489
 13358 1b02 0200     		.2byte	0x2
 13359 1b04 31       		.byte	0x31
 13360 1b05 9F       		.byte	0x9f
 13361 1b06 26000000 		.4byte	.LVL490
 13362 1b0a 2E000000 		.4byte	.LVL492
 13363 1b0e 0100     		.2byte	0x1
 13364 1b10 54       		.byte	0x54
 13365 1b11 2E000000 		.4byte	.LVL492
 13366 1b15 34000000 		.4byte	.LFE127
 13367 1b19 0100     		.2byte	0x1
 13368 1b1b 50       		.byte	0x50
 13369 1b1c 00000000 		.4byte	0
 13370 1b20 00000000 		.4byte	0
 13371              		.section	.debug_aranges,"",%progbits
 13372 0000 F4010000 		.4byte	0x1f4
 13373 0004 0200     		.2byte	0x2
 13374 0006 00000000 		.4byte	.Ldebug_info0
 13375 000a 04       		.byte	0x4
 13376 000b 00       		.byte	0
 13377 000c 0000     		.2byte	0
 13378 000e 0000     		.2byte	0
 13379 0010 00000000 		.4byte	.LFB80
 13380 0014 38000000 		.4byte	.LFE80-.LFB80
 13381 0018 00000000 		.4byte	.LFB109
 13382 001c 14000000 		.4byte	.LFE109-.LFB109
 13383 0020 00000000 		.4byte	.LFB112
 13384 0024 2C000000 		.4byte	.LFE112-.LFB112
 13385 0028 00000000 		.4byte	.LFB111
 13386 002c 12000000 		.4byte	.LFE111-.LFB111
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 340


 13387 0030 00000000 		.4byte	.LFB70
 13388 0034 92000000 		.4byte	.LFE70-.LFB70
 13389 0038 00000000 		.4byte	.LFB105
 13390 003c 58000000 		.4byte	.LFE105-.LFB105
 13391 0040 00000000 		.4byte	.LFB71
 13392 0044 AC000000 		.4byte	.LFE71-.LFB71
 13393 0048 00000000 		.4byte	.LFB106
 13394 004c 44000000 		.4byte	.LFE106-.LFB106
 13395 0050 00000000 		.4byte	.LFB104
 13396 0054 08000000 		.4byte	.LFE104-.LFB104
 13397 0058 00000000 		.4byte	.LFB128
 13398 005c 84000000 		.4byte	.LFE128-.LFB128
 13399 0060 00000000 		.4byte	.LFB117
 13400 0064 22000000 		.4byte	.LFE117-.LFB117
 13401 0068 00000000 		.4byte	.LFB69
 13402 006c 62000000 		.4byte	.LFE69-.LFB69
 13403 0070 00000000 		.4byte	.LFB72
 13404 0074 BC000000 		.4byte	.LFE72-.LFB72
 13405 0078 00000000 		.4byte	.LFB75
 13406 007c 64000000 		.4byte	.LFE75-.LFB75
 13407 0080 00000000 		.4byte	.LFB76
 13408 0084 20000000 		.4byte	.LFE76-.LFB76
 13409 0088 00000000 		.4byte	.LFB77
 13410 008c 28000000 		.4byte	.LFE77-.LFB77
 13411 0090 00000000 		.4byte	.LFB78
 13412 0094 E8000000 		.4byte	.LFE78-.LFB78
 13413 0098 00000000 		.4byte	.LFB81
 13414 009c 78000000 		.4byte	.LFE81-.LFB81
 13415 00a0 00000000 		.4byte	.LFB82
 13416 00a4 88000000 		.4byte	.LFE82-.LFB82
 13417 00a8 00000000 		.4byte	.LFB83
 13418 00ac 5C000000 		.4byte	.LFE83-.LFB83
 13419 00b0 00000000 		.4byte	.LFB84
 13420 00b4 24000000 		.4byte	.LFE84-.LFB84
 13421 00b8 00000000 		.4byte	.LFB85
 13422 00bc 14000000 		.4byte	.LFE85-.LFB85
 13423 00c0 00000000 		.4byte	.LFB87
 13424 00c4 0C000000 		.4byte	.LFE87-.LFB87
 13425 00c8 00000000 		.4byte	.LFB88
 13426 00cc 0C000000 		.4byte	.LFE88-.LFB88
 13427 00d0 00000000 		.4byte	.LFB89
 13428 00d4 0C000000 		.4byte	.LFE89-.LFB89
 13429 00d8 00000000 		.4byte	.LFB90
 13430 00dc 14000000 		.4byte	.LFE90-.LFB90
 13431 00e0 00000000 		.4byte	.LFB92
 13432 00e4 08010000 		.4byte	.LFE92-.LFB92
 13433 00e8 00000000 		.4byte	.LFB86
 13434 00ec D8000000 		.4byte	.LFE86-.LFB86
 13435 00f0 00000000 		.4byte	.LFB73
 13436 00f4 6C000000 		.4byte	.LFE73-.LFB73
 13437 00f8 00000000 		.4byte	.LFB74
 13438 00fc 34000000 		.4byte	.LFE74-.LFB74
 13439 0100 00000000 		.4byte	.LFB93
 13440 0104 C4000000 		.4byte	.LFE93-.LFB93
 13441 0108 00000000 		.4byte	.LFB79
 13442 010c C0000000 		.4byte	.LFE79-.LFB79
 13443 0110 00000000 		.4byte	.LFB94
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 341


 13444 0114 20000000 		.4byte	.LFE94-.LFB94
 13445 0118 00000000 		.4byte	.LFB95
 13446 011c 28000000 		.4byte	.LFE95-.LFB95
 13447 0120 00000000 		.4byte	.LFB96
 13448 0124 74000000 		.4byte	.LFE96-.LFB96
 13449 0128 00000000 		.4byte	.LFB97
 13450 012c 54000000 		.4byte	.LFE97-.LFB97
 13451 0130 00000000 		.4byte	.LFB98
 13452 0134 20000000 		.4byte	.LFE98-.LFB98
 13453 0138 00000000 		.4byte	.LFB99
 13454 013c 14000000 		.4byte	.LFE99-.LFB99
 13455 0140 00000000 		.4byte	.LFB100
 13456 0144 58000000 		.4byte	.LFE100-.LFB100
 13457 0148 00000000 		.4byte	.LFB101
 13458 014c 10000000 		.4byte	.LFE101-.LFB101
 13459 0150 00000000 		.4byte	.LFB102
 13460 0154 0A000000 		.4byte	.LFE102-.LFB102
 13461 0158 00000000 		.4byte	.LFB103
 13462 015c 06000000 		.4byte	.LFE103-.LFB103
 13463 0160 00000000 		.4byte	.LFB107
 13464 0164 78000000 		.4byte	.LFE107-.LFB107
 13465 0168 00000000 		.4byte	.LFB108
 13466 016c 5C000000 		.4byte	.LFE108-.LFB108
 13467 0170 00000000 		.4byte	.LFB91
 13468 0174 A4000000 		.4byte	.LFE91-.LFB91
 13469 0178 00000000 		.4byte	.LFB110
 13470 017c 18000000 		.4byte	.LFE110-.LFB110
 13471 0180 00000000 		.4byte	.LFB113
 13472 0184 0C000000 		.4byte	.LFE113-.LFB113
 13473 0188 00000000 		.4byte	.LFB114
 13474 018c D0000000 		.4byte	.LFE114-.LFB114
 13475 0190 00000000 		.4byte	.LFB115
 13476 0194 88000000 		.4byte	.LFE115-.LFB115
 13477 0198 00000000 		.4byte	.LFB116
 13478 019c A0000000 		.4byte	.LFE116-.LFB116
 13479 01a0 00000000 		.4byte	.LFB118
 13480 01a4 D4000000 		.4byte	.LFE118-.LFB118
 13481 01a8 00000000 		.4byte	.LFB119
 13482 01ac C8000000 		.4byte	.LFE119-.LFB119
 13483 01b0 00000000 		.4byte	.LFB120
 13484 01b4 20000000 		.4byte	.LFE120-.LFB120
 13485 01b8 00000000 		.4byte	.LFB121
 13486 01bc 20000000 		.4byte	.LFE121-.LFB121
 13487 01c0 00000000 		.4byte	.LFB122
 13488 01c4 80000000 		.4byte	.LFE122-.LFB122
 13489 01c8 00000000 		.4byte	.LFB123
 13490 01cc A4000000 		.4byte	.LFE123-.LFB123
 13491 01d0 00000000 		.4byte	.LFB124
 13492 01d4 B8000000 		.4byte	.LFE124-.LFB124
 13493 01d8 00000000 		.4byte	.LFB125
 13494 01dc D8000000 		.4byte	.LFE125-.LFB125
 13495 01e0 00000000 		.4byte	.LFB126
 13496 01e4 9C000000 		.4byte	.LFE126-.LFB126
 13497 01e8 00000000 		.4byte	.LFB127
 13498 01ec 34000000 		.4byte	.LFE127-.LFB127
 13499 01f0 00000000 		.4byte	0
 13500 01f4 00000000 		.4byte	0
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 342


 13501              		.section	.debug_ranges,"",%progbits
 13502              	.Ldebug_ranges0:
 13503 0000 0E000000 		.4byte	.LBB41
 13504 0004 3E000000 		.4byte	.LBE41
 13505 0008 44000000 		.4byte	.LBB43
 13506 000c DC000000 		.4byte	.LBE43
 13507 0010 EE000000 		.4byte	.LBB44
 13508 0014 F2000000 		.4byte	.LBE44
 13509 0018 00000000 		.4byte	0
 13510 001c 00000000 		.4byte	0
 13511 0020 0A000000 		.4byte	.LBB46
 13512 0024 20000000 		.4byte	.LBE46
 13513 0028 24000000 		.4byte	.LBB47
 13514 002c 2C000000 		.4byte	.LBE47
 13515 0030 34000000 		.4byte	.LBB48
 13516 0034 4A000000 		.4byte	.LBE48
 13517 0038 00000000 		.4byte	0
 13518 003c 00000000 		.4byte	0
 13519 0040 00000000 		.4byte	.LFB80
 13520 0044 38000000 		.4byte	.LFE80
 13521 0048 00000000 		.4byte	.LFB109
 13522 004c 14000000 		.4byte	.LFE109
 13523 0050 00000000 		.4byte	.LFB112
 13524 0054 2C000000 		.4byte	.LFE112
 13525 0058 00000000 		.4byte	.LFB111
 13526 005c 12000000 		.4byte	.LFE111
 13527 0060 00000000 		.4byte	.LFB70
 13528 0064 92000000 		.4byte	.LFE70
 13529 0068 00000000 		.4byte	.LFB105
 13530 006c 58000000 		.4byte	.LFE105
 13531 0070 00000000 		.4byte	.LFB71
 13532 0074 AC000000 		.4byte	.LFE71
 13533 0078 00000000 		.4byte	.LFB106
 13534 007c 44000000 		.4byte	.LFE106
 13535 0080 00000000 		.4byte	.LFB104
 13536 0084 08000000 		.4byte	.LFE104
 13537 0088 00000000 		.4byte	.LFB128
 13538 008c 84000000 		.4byte	.LFE128
 13539 0090 00000000 		.4byte	.LFB117
 13540 0094 22000000 		.4byte	.LFE117
 13541 0098 00000000 		.4byte	.LFB69
 13542 009c 62000000 		.4byte	.LFE69
 13543 00a0 00000000 		.4byte	.LFB72
 13544 00a4 BC000000 		.4byte	.LFE72
 13545 00a8 00000000 		.4byte	.LFB75
 13546 00ac 64000000 		.4byte	.LFE75
 13547 00b0 00000000 		.4byte	.LFB76
 13548 00b4 20000000 		.4byte	.LFE76
 13549 00b8 00000000 		.4byte	.LFB77
 13550 00bc 28000000 		.4byte	.LFE77
 13551 00c0 00000000 		.4byte	.LFB78
 13552 00c4 E8000000 		.4byte	.LFE78
 13553 00c8 00000000 		.4byte	.LFB81
 13554 00cc 78000000 		.4byte	.LFE81
 13555 00d0 00000000 		.4byte	.LFB82
 13556 00d4 88000000 		.4byte	.LFE82
 13557 00d8 00000000 		.4byte	.LFB83
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 343


 13558 00dc 5C000000 		.4byte	.LFE83
 13559 00e0 00000000 		.4byte	.LFB84
 13560 00e4 24000000 		.4byte	.LFE84
 13561 00e8 00000000 		.4byte	.LFB85
 13562 00ec 14000000 		.4byte	.LFE85
 13563 00f0 00000000 		.4byte	.LFB87
 13564 00f4 0C000000 		.4byte	.LFE87
 13565 00f8 00000000 		.4byte	.LFB88
 13566 00fc 0C000000 		.4byte	.LFE88
 13567 0100 00000000 		.4byte	.LFB89
 13568 0104 0C000000 		.4byte	.LFE89
 13569 0108 00000000 		.4byte	.LFB90
 13570 010c 14000000 		.4byte	.LFE90
 13571 0110 00000000 		.4byte	.LFB92
 13572 0114 08010000 		.4byte	.LFE92
 13573 0118 00000000 		.4byte	.LFB86
 13574 011c D8000000 		.4byte	.LFE86
 13575 0120 00000000 		.4byte	.LFB73
 13576 0124 6C000000 		.4byte	.LFE73
 13577 0128 00000000 		.4byte	.LFB74
 13578 012c 34000000 		.4byte	.LFE74
 13579 0130 00000000 		.4byte	.LFB93
 13580 0134 C4000000 		.4byte	.LFE93
 13581 0138 00000000 		.4byte	.LFB79
 13582 013c C0000000 		.4byte	.LFE79
 13583 0140 00000000 		.4byte	.LFB94
 13584 0144 20000000 		.4byte	.LFE94
 13585 0148 00000000 		.4byte	.LFB95
 13586 014c 28000000 		.4byte	.LFE95
 13587 0150 00000000 		.4byte	.LFB96
 13588 0154 74000000 		.4byte	.LFE96
 13589 0158 00000000 		.4byte	.LFB97
 13590 015c 54000000 		.4byte	.LFE97
 13591 0160 00000000 		.4byte	.LFB98
 13592 0164 20000000 		.4byte	.LFE98
 13593 0168 00000000 		.4byte	.LFB99
 13594 016c 14000000 		.4byte	.LFE99
 13595 0170 00000000 		.4byte	.LFB100
 13596 0174 58000000 		.4byte	.LFE100
 13597 0178 00000000 		.4byte	.LFB101
 13598 017c 10000000 		.4byte	.LFE101
 13599 0180 00000000 		.4byte	.LFB102
 13600 0184 0A000000 		.4byte	.LFE102
 13601 0188 00000000 		.4byte	.LFB103
 13602 018c 06000000 		.4byte	.LFE103
 13603 0190 00000000 		.4byte	.LFB107
 13604 0194 78000000 		.4byte	.LFE107
 13605 0198 00000000 		.4byte	.LFB108
 13606 019c 5C000000 		.4byte	.LFE108
 13607 01a0 00000000 		.4byte	.LFB91
 13608 01a4 A4000000 		.4byte	.LFE91
 13609 01a8 00000000 		.4byte	.LFB110
 13610 01ac 18000000 		.4byte	.LFE110
 13611 01b0 00000000 		.4byte	.LFB113
 13612 01b4 0C000000 		.4byte	.LFE113
 13613 01b8 00000000 		.4byte	.LFB114
 13614 01bc D0000000 		.4byte	.LFE114
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 344


 13615 01c0 00000000 		.4byte	.LFB115
 13616 01c4 88000000 		.4byte	.LFE115
 13617 01c8 00000000 		.4byte	.LFB116
 13618 01cc A0000000 		.4byte	.LFE116
 13619 01d0 00000000 		.4byte	.LFB118
 13620 01d4 D4000000 		.4byte	.LFE118
 13621 01d8 00000000 		.4byte	.LFB119
 13622 01dc C8000000 		.4byte	.LFE119
 13623 01e0 00000000 		.4byte	.LFB120
 13624 01e4 20000000 		.4byte	.LFE120
 13625 01e8 00000000 		.4byte	.LFB121
 13626 01ec 20000000 		.4byte	.LFE121
 13627 01f0 00000000 		.4byte	.LFB122
 13628 01f4 80000000 		.4byte	.LFE122
 13629 01f8 00000000 		.4byte	.LFB123
 13630 01fc A4000000 		.4byte	.LFE123
 13631 0200 00000000 		.4byte	.LFB124
 13632 0204 B8000000 		.4byte	.LFE124
 13633 0208 00000000 		.4byte	.LFB125
 13634 020c D8000000 		.4byte	.LFE125
 13635 0210 00000000 		.4byte	.LFB126
 13636 0214 9C000000 		.4byte	.LFE126
 13637 0218 00000000 		.4byte	.LFB127
 13638 021c 34000000 		.4byte	.LFE127
 13639 0220 00000000 		.4byte	0
 13640 0224 00000000 		.4byte	0
 13641              		.section	.debug_line,"",%progbits
 13642              	.Ldebug_line0:
 13643 0000 AA0C0000 		.section	.debug_str,"MS",%progbits,1
 13643      0200ED02 
 13643      00000201 
 13643      FB0E0D00 
 13643      01010101 
 13644              	.LASF158:
 13645 0000 75785065 		.ascii	"uxPendedCounts\000"
 13645      6E646564 
 13645      436F756E 
 13645      747300
 13646              	.LASF255:
 13647 000f 78596965 		.ascii	"xYieldPending\000"
 13647      6C645065 
 13647      6E64696E 
 13647      6700
 13648              	.LASF4:
 13649 001d 73697A65 		.ascii	"size_t\000"
 13649      5F7400
 13650              	.LASF15:
 13651 0024 73697A65 		.ascii	"sizetype\000"
 13651      74797065 
 13651      00
 13652              	.LASF181:
 13653 002d 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 13653      6B496E74 
 13653      65726E61 
 13653      6C536574 
 13653      54696D65 
 13654              	.LASF126:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 345


 13655 004a 75735374 		.ascii	"usStackDepth\000"
 13655      61636B44 
 13655      65707468 
 13655      00
 13656              	.LASF121:
 13657 0057 7843616E 		.ascii	"xCanBlockIndefinitely\000"
 13657      426C6F63 
 13657      6B496E64 
 13657      6566696E 
 13657      6974656C 
 13658              	.LASF150:
 13659 006d 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 13659      6B476574 
 13659      5469636B 
 13659      436F756E 
 13659      7446726F 
 13660              	.LASF220:
 13661 0086 756C5374 		.ascii	"ulStatsAsPercentage\000"
 13661      61747341 
 13661      73506572 
 13661      63656E74 
 13661      61676500 
 13662              	.LASF64:
 13663 009a 4D656D6F 		.ascii	"MemoryRegion_t\000"
 13663      72795265 
 13663      67696F6E 
 13663      5F7400
 13664              	.LASF79:
 13665 00a9 78457665 		.ascii	"xEventListItem\000"
 13665      6E744C69 
 13665      73744974 
 13665      656D00
 13666              	.LASF19:
 13667 00b8 696E7433 		.ascii	"int32_t\000"
 13667      325F7400 
 13668              	.LASF49:
 13669 00c0 65546173 		.ascii	"eTaskState\000"
 13669      6B537461 
 13669      746500
 13670              	.LASF202:
 13671 00cb 70756C54 		.ascii	"pulTotalRunTime\000"
 13671      6F74616C 
 13671      52756E54 
 13671      696D6500 
 13672              	.LASF218:
 13673 00db 76546173 		.ascii	"vTaskGetRunTimeStats\000"
 13673      6B476574 
 13673      52756E54 
 13673      696D6553 
 13673      74617473 
 13674              	.LASF56:
 13675 00f0 7854494D 		.ascii	"xTIME_OUT\000"
 13675      455F4F55 
 13675      5400
 13676              	.LASF251:
 13677 00fa 78546963 		.ascii	"xTickCount\000"
 13677      6B436F75 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 346


 13677      6E7400
 13678              	.LASF83:
 13679 0105 75785461 		.ascii	"uxTaskNumber\000"
 13679      736B4E75 
 13679      6D626572 
 13679      00
 13680              	.LASF108:
 13681 0112 70785461 		.ascii	"pxTaskCode\000"
 13681      736B436F 
 13681      646500
 13682              	.LASF135:
 13683 011d 75785361 		.ascii	"uxSavedInterruptState\000"
 13683      76656449 
 13683      6E746572 
 13683      72757074 
 13683      53746174 
 13684              	.LASF196:
 13685 0133 70784C69 		.ascii	"pxList\000"
 13685      737400
 13686              	.LASF231:
 13687 013a 78546173 		.ascii	"xTaskGenericNotify\000"
 13687      6B47656E 
 13687      65726963 
 13687      4E6F7469 
 13687      667900
 13688              	.LASF25:
 13689 014d 42617365 		.ascii	"BaseType_t\000"
 13689      54797065 
 13689      5F7400
 13690              	.LASF97:
 13691 0158 75635265 		.ascii	"ucReturn\000"
 13691      7475726E 
 13691      00
 13692              	.LASF47:
 13693 0161 6544656C 		.ascii	"eDeleted\000"
 13693      65746564 
 13693      00
 13694              	.LASF81:
 13695 016a 70785374 		.ascii	"pxStack\000"
 13695      61636B00 
 13696              	.LASF142:
 13697 0172 76546173 		.ascii	"vTaskResume\000"
 13697      6B526573 
 13697      756D6500 
 13698              	.LASF66:
 13699 017e 7848616E 		.ascii	"xHandle\000"
 13699      646C6500 
 13700              	.LASF222:
 13701 0186 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 13701      736B4765 
 13701      744E756D 
 13701      6265724F 
 13701      66546173 
 13702              	.LASF210:
 13703 019d 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 13703      6B507269 
 13703      6F726974 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 347


 13703      79446973 
 13703      696E6865 
 13704              	.LASF273:
 13705 01b5 764C6973 		.ascii	"vListInsert\000"
 13705      74496E73 
 13705      65727400 
 13706              	.LASF75:
 13707 01c1 5461736B 		.ascii	"TaskStatus_t\000"
 13707      53746174 
 13707      75735F74 
 13707      00
 13708              	.LASF171:
 13709 01ce 78546173 		.ascii	"xTaskToSuspend\000"
 13709      6B546F53 
 13709      75737065 
 13709      6E6400
 13710              	.LASF102:
 13711 01dd 78546173 		.ascii	"xTask\000"
 13711      6B00
 13712              	.LASF133:
 13713 01e3 75785265 		.ascii	"uxReturn\000"
 13713      7475726E 
 13713      00
 13714              	.LASF29:
 13715 01ec 70784E65 		.ascii	"pxNext\000"
 13715      787400
 13716              	.LASF113:
 13717 01f3 70784E65 		.ascii	"pxNewTCB\000"
 13717      77544342 
 13717      00
 13718              	.LASF5:
 13719 01fc 5F5F7569 		.ascii	"__uint8_t\000"
 13719      6E74385F 
 13719      7400
 13720              	.LASF71:
 13721 0206 75784261 		.ascii	"uxBasePriority\000"
 13721      73655072 
 13721      696F7269 
 13721      747900
 13722              	.LASF87:
 13723 0215 74736B54 		.ascii	"tskTCB\000"
 13723      434200
 13724              	.LASF70:
 13725 021c 75784375 		.ascii	"uxCurrentPriority\000"
 13725      7272656E 
 13725      74507269 
 13725      6F726974 
 13725      7900
 13726              	.LASF139:
 13727 022e 75784375 		.ascii	"uxCurrentBasePriority\000"
 13727      7272656E 
 13727      74426173 
 13727      65507269 
 13727      6F726974 
 13728              	.LASF285:
 13729 0244 433A5C55 		.ascii	"C:\\Users\\josephh\\Desktop\\Robo-3028\\Zumo\\ZumoB"
 13729      73657273 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 348


 13729      5C6A6F73 
 13729      65706868 
 13729      5C446573 
 13730 0271 6F742E63 		.ascii	"ot.cydsn\000"
 13730      7964736E 
 13730      00
 13731              	.LASF11:
 13732 027a 6C6F6E67 		.ascii	"long int\000"
 13732      20696E74 
 13732      00
 13733              	.LASF263:
 13734 0283 70784375 		.ascii	"pxCurrentTCB\000"
 13734      7272656E 
 13734      74544342 
 13734      00
 13735              	.LASF37:
 13736 0290 784C4953 		.ascii	"xLIST\000"
 13736      5400
 13737              	.LASF248:
 13738 0296 75784465 		.ascii	"uxDeletedTasksWaitingCleanUp\000"
 13738      6C657465 
 13738      64546173 
 13738      6B735761 
 13738      6974696E 
 13739              	.LASF148:
 13740 02b3 78546173 		.ascii	"xTaskGetTickCount\000"
 13740      6B476574 
 13740      5469636B 
 13740      436F756E 
 13740      7400
 13741              	.LASF146:
 13742 02c5 76546173 		.ascii	"vTaskStartScheduler\000"
 13742      6B537461 
 13742      72745363 
 13742      68656475 
 13742      6C657200 
 13743              	.LASF51:
 13744 02d9 65536574 		.ascii	"eSetBits\000"
 13744      42697473 
 13744      00
 13745              	.LASF116:
 13746 02e2 70727641 		.ascii	"prvAddNewTaskToReadyList\000"
 13746      64644E65 
 13746      77546173 
 13746      6B546F52 
 13746      65616479 
 13747              	.LASF283:
 13748 02fb 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 13748      43313120 
 13748      352E342E 
 13748      31203230 
 13748      31363036 
 13749 032e 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 13749      20726576 
 13749      6973696F 
 13749      6E203233 
 13749      37373135 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 349


 13750 0361 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 13750      66756E63 
 13750      74696F6E 
 13750      2D736563 
 13750      74696F6E 
 13751              	.LASF183:
 13752 0389 70785469 		.ascii	"pxTicksToWait\000"
 13752      636B7354 
 13752      6F576169 
 13752      7400
 13753              	.LASF191:
 13754 0397 70785461 		.ascii	"pxTaskStatus\000"
 13754      736B5374 
 13754      61747573 
 13754      00
 13755              	.LASF109:
 13756 03a4 70634E61 		.ascii	"pcName\000"
 13756      6D6500
 13757              	.LASF268:
 13758 03ab 764C6973 		.ascii	"vListInitialise\000"
 13758      74496E69 
 13758      7469616C 
 13758      69736500 
 13759              	.LASF270:
 13760 03bb 764C6973 		.ascii	"vListInsertEnd\000"
 13760      74496E73 
 13760      65727445 
 13760      6E6400
 13761              	.LASF276:
 13762 03ca 7076506F 		.ascii	"pvPortMalloc\000"
 13762      72744D61 
 13762      6C6C6F63 
 13762      00
 13763              	.LASF249:
 13764 03d7 78537573 		.ascii	"xSuspendedTaskList\000"
 13764      70656E64 
 13764      65645461 
 13764      736B4C69 
 13764      737400
 13765              	.LASF225:
 13766 03ea 78436C65 		.ascii	"xClearCountOnExit\000"
 13766      6172436F 
 13766      756E744F 
 13766      6E457869 
 13766      7400
 13767              	.LASF3:
 13768 03fc 7369676E 		.ascii	"signed char\000"
 13768      65642063 
 13768      68617200 
 13769              	.LASF46:
 13770 0408 65537573 		.ascii	"eSuspended\000"
 13770      70656E64 
 13770      656400
 13771              	.LASF17:
 13772 0413 75696E74 		.ascii	"uint8_t\000"
 13772      385F7400 
 13773              	.LASF187:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 350


 13774 041b 75785461 		.ascii	"uxTaskGetTaskNumber\000"
 13774      736B4765 
 13774      74546173 
 13774      6B4E756D 
 13774      62657200 
 13775              	.LASF197:
 13776 042f 70784E65 		.ascii	"pxNextTCB\000"
 13776      78745443 
 13776      4200
 13777              	.LASF236:
 13778 0439 75634F72 		.ascii	"ucOriginalNotifyState\000"
 13778      6967696E 
 13778      616C4E6F 
 13778      74696679 
 13778      53746174 
 13779              	.LASF213:
 13780 044f 75785072 		.ascii	"uxPriorityToUse\000"
 13780      696F7269 
 13780      7479546F 
 13780      55736500 
 13781              	.LASF95:
 13782 045f 756C4E65 		.ascii	"ulNewMaskValue\000"
 13782      774D6173 
 13782      6B56616C 
 13782      756500
 13783              	.LASF6:
 13784 046e 756E7369 		.ascii	"unsigned char\000"
 13784      676E6564 
 13784      20636861 
 13784      7200
 13785              	.LASF256:
 13786 047c 784E756D 		.ascii	"xNumOfOverflows\000"
 13786      4F664F76 
 13786      6572666C 
 13786      6F777300 
 13787              	.LASF98:
 13788 048c 78526574 		.ascii	"xReturn\000"
 13788      75726E00 
 13789              	.LASF36:
 13790 0494 4D696E69 		.ascii	"MiniListItem_t\000"
 13790      4C697374 
 13790      4974656D 
 13790      5F7400
 13791              	.LASF91:
 13792 04a3 76506F72 		.ascii	"vPortSetBASEPRI\000"
 13792      74536574 
 13792      42415345 
 13792      50524900 
 13793              	.LASF105:
 13794 04b3 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 13794      65736574 
 13794      4E657874 
 13794      5461736B 
 13794      556E626C 
 13795              	.LASF107:
 13796 04cf 70727649 		.ascii	"prvInitialiseNewTask\000"
 13796      6E697469 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 351


 13796      616C6973 
 13796      654E6577 
 13796      5461736B 
 13797              	.LASF214:
 13798 04e4 75784F6E 		.ascii	"uxOnlyOneMutexHeld\000"
 13798      6C794F6E 
 13798      654D7574 
 13798      65784865 
 13798      6C6400
 13799              	.LASF58:
 13800 04f7 7854696D 		.ascii	"xTimeOnEntering\000"
 13800      654F6E45 
 13800      6E746572 
 13800      696E6700 
 13801              	.LASF254:
 13802 0507 75785065 		.ascii	"uxPendedTicks\000"
 13802      6E646564 
 13802      5469636B 
 13802      7300
 13803              	.LASF174:
 13804 0515 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 13804      6B506C61 
 13804      63654F6E 
 13804      556E6F72 
 13804      64657265 
 13805              	.LASF235:
 13806 0534 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 13806      72657669 
 13806      6F75734E 
 13806      6F746966 
 13806      69636174 
 13807              	.LASF39:
 13808 0551 7078496E 		.ascii	"pxIndex\000"
 13808      64657800 
 13809              	.LASF77:
 13810 0559 7078546F 		.ascii	"pxTopOfStack\000"
 13810      704F6653 
 13810      7461636B 
 13810      00
 13811              	.LASF253:
 13812 0566 78536368 		.ascii	"xSchedulerRunning\000"
 13812      6564756C 
 13812      65725275 
 13812      6E6E696E 
 13812      6700
 13813              	.LASF100:
 13814 0578 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 13814      61736B49 
 13814      73546173 
 13814      6B537573 
 13814      70656E64 
 13815              	.LASF16:
 13816 058f 63686172 		.ascii	"char\000"
 13816      00
 13817              	.LASF280:
 13818 0594 76417070 		.ascii	"vApplicationStackOverflowHook\000"
 13818      6C696361 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 352


 13818      74696F6E 
 13818      53746163 
 13818      6B4F7665 
 13819              	.LASF59:
 13820 05b2 54696D65 		.ascii	"TimeOut_t\000"
 13820      4F75745F 
 13820      7400
 13821              	.LASF35:
 13822 05bc 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 13822      495F4C49 
 13822      53545F49 
 13822      54454D00 
 13823              	.LASF8:
 13824 05cc 5F5F7569 		.ascii	"__uint16_t\000"
 13824      6E743136 
 13824      5F7400
 13825              	.LASF54:
 13826 05d7 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 13826      56616C75 
 13826      65576974 
 13826      686F7574 
 13826      4F766572 
 13827              	.LASF267:
 13828 05f1 7078506F 		.ascii	"pxPortInitialiseStack\000"
 13828      7274496E 
 13828      69746961 
 13828      6C697365 
 13828      53746163 
 13829              	.LASF136:
 13830 0607 76546173 		.ascii	"vTaskDelete\000"
 13830      6B44656C 
 13830      65746500 
 13831              	.LASF104:
 13832 0613 756C436F 		.ascii	"ulCount\000"
 13832      756E7400 
 13833              	.LASF72:
 13834 061b 756C5275 		.ascii	"ulRunTimeCounter\000"
 13834      6E54696D 
 13834      65436F75 
 13834      6E746572 
 13834      00
 13835              	.LASF221:
 13836 062c 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 13836      736B5265 
 13836      73657445 
 13836      76656E74 
 13836      4974656D 
 13837              	.LASF144:
 13838 0646 78546173 		.ascii	"xTaskResumeFromISR\000"
 13838      6B526573 
 13838      756D6546 
 13838      726F6D49 
 13838      535200
 13839              	.LASF259:
 13840 0659 75785363 		.ascii	"uxSchedulerSuspended\000"
 13840      68656475 
 13840      6C657253 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 353


 13840      75737065 
 13840      6E646564 
 13841              	.LASF166:
 13842 066e 70756C53 		.ascii	"pulStack\000"
 13842      7461636B 
 13842      00
 13843              	.LASF257:
 13844 0677 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 13844      74546173 
 13844      6B556E62 
 13844      6C6F636B 
 13844      54696D65 
 13845              	.LASF246:
 13846 068c 7850656E 		.ascii	"xPendingReadyList\000"
 13846      64696E67 
 13846      52656164 
 13846      794C6973 
 13846      7400
 13847              	.LASF94:
 13848 069e 7563506F 		.ascii	"ucPortCountLeadingZeros\000"
 13848      7274436F 
 13848      756E744C 
 13848      65616469 
 13848      6E675A65 
 13849              	.LASF85:
 13850 06b6 756C4E6F 		.ascii	"ulNotifiedValue\000"
 13850      74696669 
 13850      65645661 
 13850      6C756500 
 13851              	.LASF193:
 13852 06c6 65537461 		.ascii	"eState\000"
 13852      746500
 13853              	.LASF167:
 13854 06cd 756C4368 		.ascii	"ulCheckValue\000"
 13854      65636B56 
 13854      616C7565 
 13854      00
 13855              	.LASF165:
 13856 06da 76546173 		.ascii	"vTaskSwitchContext\000"
 13856      6B537769 
 13856      74636843 
 13856      6F6E7465 
 13856      787400
 13857              	.LASF205:
 13858 06ed 70756345 		.ascii	"pucEndOfStack\000"
 13858      6E644F66 
 13858      53746163 
 13858      6B00
 13859              	.LASF93:
 13860 06fb 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 13860      72745261 
 13860      69736542 
 13860      41534550 
 13860      524900
 13861              	.LASF169:
 13862 070e 7078436F 		.ascii	"pxConstList\000"
 13862      6E73744C 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 354


 13862      69737400 
 13863              	.LASF112:
 13864 071a 70784372 		.ascii	"pxCreatedTask\000"
 13864      65617465 
 13864      64546173 
 13864      6B00
 13865              	.LASF223:
 13866 0728 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 13866      736B496E 
 13866      6372656D 
 13866      656E744D 
 13866      75746578 
 13867              	.LASF143:
 13868 0746 78546173 		.ascii	"xTaskToResume\000"
 13868      6B546F52 
 13868      6573756D 
 13868      6500
 13869              	.LASF131:
 13870 0754 70785374 		.ascii	"pxStateList\000"
 13870      6174654C 
 13870      69737400 
 13871              	.LASF149:
 13872 0760 78546963 		.ascii	"xTicks\000"
 13872      6B7300
 13873              	.LASF61:
 13874 0767 70764261 		.ascii	"pvBaseAddress\000"
 13874      73654164 
 13874      64726573 
 13874      7300
 13875              	.LASF250:
 13876 0775 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 13876      7272656E 
 13876      744E756D 
 13876      6265724F 
 13876      66546173 
 13877              	.LASF137:
 13878 078c 76546173 		.ascii	"vTaskPrioritySet\000"
 13878      6B507269 
 13878      6F726974 
 13878      79536574 
 13878      00
 13879              	.LASF57:
 13880 079d 784F7665 		.ascii	"xOverflowCount\000"
 13880      72666C6F 
 13880      77436F75 
 13880      6E7400
 13881              	.LASF180:
 13882 07ac 70785469 		.ascii	"pxTimeOut\000"
 13882      6D654F75 
 13882      7400
 13883              	.LASF44:
 13884 07b6 65526561 		.ascii	"eReady\000"
 13884      647900
 13885              	.LASF173:
 13886 07bd 70784576 		.ascii	"pxEventList\000"
 13886      656E744C 
 13886      69737400 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 355


 13887              	.LASF13:
 13888 07c9 6C6F6E67 		.ascii	"long unsigned int\000"
 13888      20756E73 
 13888      69676E65 
 13888      6420696E 
 13888      7400
 13889              	.LASF186:
 13890 07db 76546173 		.ascii	"vTaskMissedYield\000"
 13890      6B4D6973 
 13890      73656459 
 13890      69656C64 
 13890      00
 13891              	.LASF278:
 13892 07ec 78506F72 		.ascii	"xPortStartScheduler\000"
 13892      74537461 
 13892      72745363 
 13892      68656475 
 13892      6C657200 
 13893              	.LASF274:
 13894 0800 73747263 		.ascii	"strcpy\000"
 13894      707900
 13895              	.LASF258:
 13896 0807 7849646C 		.ascii	"xIdleTaskHandle\000"
 13896      65546173 
 13896      6B48616E 
 13896      646C6500 
 13897              	.LASF179:
 13898 0817 76546173 		.ascii	"vTaskSetTimeOutState\000"
 13898      6B536574 
 13898      54696D65 
 13898      4F757453 
 13898      74617465 
 13899              	.LASF65:
 13900 082c 78544153 		.ascii	"xTASK_STATUS\000"
 13900      4B5F5354 
 13900      41545553 
 13900      00
 13901              	.LASF151:
 13902 0839 70635461 		.ascii	"pcTaskGetName\000"
 13902      736B4765 
 13902      744E616D 
 13902      6500
 13903              	.LASF140:
 13904 0847 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 13904      696F7269 
 13904      74795573 
 13904      65644F6E 
 13904      456E7472 
 13905              	.LASF60:
 13906 085d 784D454D 		.ascii	"xMEMORY_REGION\000"
 13906      4F52595F 
 13906      52454749 
 13906      4F4E00
 13907              	.LASF182:
 13908 086c 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 13908      6B436865 
 13908      636B466F 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 356


 13908      7254696D 
 13908      654F7574 
 13909              	.LASF164:
 13910 0881 78546963 		.ascii	"xTicksToDelay\000"
 13910      6B73546F 
 13910      44656C61 
 13910      7900
 13911              	.LASF282:
 13912 088f 73707269 		.ascii	"sprintf\000"
 13912      6E746600 
 13913              	.LASF208:
 13914 0897 70784D75 		.ascii	"pxMutexHolder\000"
 13914      74657848 
 13914      6F6C6465 
 13914      7200
 13915              	.LASF217:
 13916 08a5 63537461 		.ascii	"cStatus\000"
 13916      74757300 
 13917              	.LASF110:
 13918 08ad 756C5374 		.ascii	"ulStackDepth\000"
 13918      61636B44 
 13918      65707468 
 13918      00
 13919              	.LASF284:
 13920 08ba 2E2E5C46 		.ascii	"..\\FreeRTOS\\Source\\tasks.c\000"
 13920      72656552 
 13920      544F535C 
 13920      536F7572 
 13920      63655C74 
 13921              	.LASF198:
 13922 08d5 70784669 		.ascii	"pxFirstTCB\000"
 13922      72737454 
 13922      434200
 13923              	.LASF172:
 13924 08e0 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 13924      6B506C61 
 13924      63654F6E 
 13924      4576656E 
 13924      744C6973 
 13925              	.LASF188:
 13926 08f6 76546173 		.ascii	"vTaskSetTaskNumber\000"
 13926      6B536574 
 13926      5461736B 
 13926      4E756D62 
 13926      657200
 13927              	.LASF118:
 13928 0909 70727649 		.ascii	"prvIdleTask\000"
 13928      646C6554 
 13928      61736B00 
 13929              	.LASF215:
 13930 0915 76546173 		.ascii	"vTaskList\000"
 13930      6B4C6973 
 13930      7400
 13931              	.LASF124:
 13932 091f 70727657 		.ascii	"prvWriteNameToBuffer\000"
 13932      72697465 
 13932      4E616D65 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 357


 13932      546F4275 
 13932      66666572 
 13933              	.LASF32:
 13934 0934 7076436F 		.ascii	"pvContainer\000"
 13934      6E746169 
 13934      6E657200 
 13935              	.LASF12:
 13936 0940 5F5F7569 		.ascii	"__uint32_t\000"
 13936      6E743332 
 13936      5F7400
 13937              	.LASF145:
 13938 094b 75785361 		.ascii	"uxSavedInterruptStatus\000"
 13938      76656449 
 13938      6E746572 
 13938      72757074 
 13938      53746174 
 13939              	.LASF1:
 13940 0962 6C6F6E67 		.ascii	"long long int\000"
 13940      206C6F6E 
 13940      6720696E 
 13940      7400
 13941              	.LASF141:
 13942 0970 78596965 		.ascii	"xYieldRequired\000"
 13942      6C645265 
 13942      71756972 
 13942      656400
 13943              	.LASF219:
 13944 097f 756C546F 		.ascii	"ulTotalTime\000"
 13944      74616C54 
 13944      696D6500 
 13945              	.LASF22:
 13946 098b 646F7562 		.ascii	"double\000"
 13946      6C6500
 13947              	.LASF178:
 13948 0992 70784576 		.ascii	"pxEventListItem\000"
 13948      656E744C 
 13948      69737449 
 13948      74656D00 
 13949              	.LASF34:
 13950 09a2 784C4953 		.ascii	"xLIST_ITEM\000"
 13950      545F4954 
 13950      454D00
 13951              	.LASF207:
 13952 09ad 78546173 		.ascii	"xTaskPriorityInherit\000"
 13952      6B507269 
 13952      6F726974 
 13952      79496E68 
 13952      65726974 
 13953              	.LASF262:
 13954 09c2 49544D5F 		.ascii	"ITM_RxBuffer\000"
 13954      52784275 
 13954      66666572 
 13954      00
 13955              	.LASF62:
 13956 09cf 756C4C65 		.ascii	"ulLengthInBytes\000"
 13956      6E677468 
 13956      496E4279 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 358


 13956      74657300 
 13957              	.LASF192:
 13958 09df 78476574 		.ascii	"xGetFreeStackSpace\000"
 13958      46726565 
 13958      53746163 
 13958      6B537061 
 13958      636500
 13959              	.LASF226:
 13960 09f2 756C5265 		.ascii	"ulReturn\000"
 13960      7475726E 
 13960      00
 13961              	.LASF201:
 13962 09fb 75784172 		.ascii	"uxArraySize\000"
 13962      72617953 
 13962      697A6500 
 13963              	.LASF241:
 13964 0a07 70785265 		.ascii	"pxReadyTasksLists\000"
 13964      61647954 
 13964      61736B73 
 13964      4C697374 
 13964      7300
 13965              	.LASF21:
 13966 0a19 666C6F61 		.ascii	"float\000"
 13966      7400
 13967              	.LASF43:
 13968 0a1f 6552756E 		.ascii	"eRunning\000"
 13968      6E696E67 
 13968      00
 13969              	.LASF23:
 13970 0a28 5461736B 		.ascii	"TaskFunction_t\000"
 13970      46756E63 
 13970      74696F6E 
 13970      5F7400
 13971              	.LASF261:
 13972 0a37 756C546F 		.ascii	"ulTotalRunTime\000"
 13972      74616C52 
 13972      756E5469 
 13972      6D6500
 13973              	.LASF122:
 13974 0a46 7854696D 		.ascii	"xTimeToWake\000"
 13974      65546F57 
 13974      616B6500 
 13975              	.LASF0:
 13976 0a52 756E7369 		.ascii	"unsigned int\000"
 13976      676E6564 
 13976      20696E74 
 13976      00
 13977              	.LASF89:
 13978 0a5f 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 13978      6967696E 
 13978      616C4241 
 13978      53455052 
 13978      4900
 13979              	.LASF106:
 13980 0a71 70727644 		.ascii	"prvDeleteTCB\000"
 13980      656C6574 
 13980      65544342 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 359


 13980      00
 13981              	.LASF271:
 13982 0a7e 76506F72 		.ascii	"vPortExitCritical\000"
 13982      74457869 
 13982      74437269 
 13982      74696361 
 13982      6C00
 13983              	.LASF38:
 13984 0a90 75784E75 		.ascii	"uxNumberOfItems\000"
 13984      6D626572 
 13984      4F664974 
 13984      656D7300 
 13985              	.LASF185:
 13986 0aa0 76546173 		.ascii	"vTaskSuspendAll\000"
 13986      6B537573 
 13986      70656E64 
 13986      416C6C00 
 13987              	.LASF101:
 13988 0ab0 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 13988      61736B43 
 13988      6865636B 
 13988      46726565 
 13988      53746163 
 13989              	.LASF176:
 13990 0acb 7078556E 		.ascii	"pxUnblockedTCB\000"
 13990      626C6F63 
 13990      6B656454 
 13990      434200
 13991              	.LASF84:
 13992 0ada 75784D75 		.ascii	"uxMutexesHeld\000"
 13992      74657865 
 13992      7348656C 
 13992      6400
 13993              	.LASF204:
 13994 0ae8 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 13994      736B4765 
 13994      74537461 
 13994      636B4869 
 13994      67685761 
 13995              	.LASF42:
 13996 0b04 5461736B 		.ascii	"TaskHandle_t\000"
 13996      48616E64 
 13996      6C655F74 
 13996      00
 13997              	.LASF277:
 13998 0b11 53746174 		.ascii	"StatisticsCounter_Start\000"
 13998      69737469 
 13998      6373436F 
 13998      756E7465 
 13998      725F5374 
 13999              	.LASF41:
 14000 0b29 4C697374 		.ascii	"List_t\000"
 14000      5F7400
 14001              	.LASF120:
 14002 0b30 78546963 		.ascii	"xTicksToWait\000"
 14002      6B73546F 
 14002      57616974 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 360


 14002      00
 14003              	.LASF156:
 14004 0b3d 78546173 		.ascii	"xTaskResumeAll\000"
 14004      6B526573 
 14004      756D6541 
 14004      6C6C00
 14005              	.LASF128:
 14006 0b4c 78546173 		.ascii	"xTaskCreate\000"
 14006      6B437265 
 14006      61746500 
 14007              	.LASF175:
 14008 0b58 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 14008      6B52656D 
 14008      6F766546 
 14008      726F6D45 
 14008      76656E74 
 14009              	.LASF189:
 14010 0b71 75784861 		.ascii	"uxHandle\000"
 14010      6E646C65 
 14010      00
 14011              	.LASF229:
 14012 0b7a 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 14012      7473546F 
 14012      436C6561 
 14012      724F6E45 
 14012      78697400 
 14013              	.LASF40:
 14014 0b8e 784C6973 		.ascii	"xListEnd\000"
 14014      74456E64 
 14014      00
 14015              	.LASF123:
 14016 0b97 78436F6E 		.ascii	"xConstTickCount\000"
 14016      73745469 
 14016      636B436F 
 14016      756E7400 
 14017              	.LASF45:
 14018 0ba7 65426C6F 		.ascii	"eBlocked\000"
 14018      636B6564 
 14018      00
 14019              	.LASF266:
 14020 0bb0 764C6973 		.ascii	"vListInitialiseItem\000"
 14020      74496E69 
 14020      7469616C 
 14020      69736549 
 14020      74656D00 
 14021              	.LASF132:
 14022 0bc4 75785461 		.ascii	"uxTaskPriorityGet\000"
 14022      736B5072 
 14022      696F7269 
 14022      74794765 
 14022      7400
 14023              	.LASF74:
 14024 0bd6 75735374 		.ascii	"usStackHighWaterMark\000"
 14024      61636B48 
 14024      69676857 
 14024      61746572 
 14024      4D61726B 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 361


 14025              	.LASF90:
 14026 0beb 756C4E65 		.ascii	"ulNewBASEPRI\000"
 14026      77424153 
 14026      45505249 
 14026      00
 14027              	.LASF162:
 14028 0bf8 7853686F 		.ascii	"xShouldDelay\000"
 14028      756C6444 
 14028      656C6179 
 14028      00
 14029              	.LASF2:
 14030 0c05 6C6F6E67 		.ascii	"long double\000"
 14030      20646F75 
 14030      626C6500 
 14031              	.LASF68:
 14032 0c11 78546173 		.ascii	"xTaskNumber\000"
 14032      6B4E756D 
 14032      62657200 
 14033              	.LASF52:
 14034 0c1d 65496E63 		.ascii	"eIncrement\000"
 14034      72656D65 
 14034      6E7400
 14035              	.LASF170:
 14036 0c28 76546173 		.ascii	"vTaskSuspend\000"
 14036      6B537573 
 14036      70656E64 
 14036      00
 14037              	.LASF53:
 14038 0c35 65536574 		.ascii	"eSetValueWithOverwrite\000"
 14038      56616C75 
 14038      65576974 
 14038      684F7665 
 14038      72777269 
 14039              	.LASF31:
 14040 0c4c 70764F77 		.ascii	"pvOwner\000"
 14040      6E657200 
 14041              	.LASF67:
 14042 0c54 70635461 		.ascii	"pcTaskName\000"
 14042      736B4E61 
 14042      6D6500
 14043              	.LASF76:
 14044 0c5f 74736B54 		.ascii	"tskTaskControlBlock\000"
 14044      61736B43 
 14044      6F6E7472 
 14044      6F6C426C 
 14044      6F636B00 
 14045              	.LASF161:
 14046 0c73 7854696D 		.ascii	"xTimeIncrement\000"
 14046      65496E63 
 14046      72656D65 
 14046      6E7400
 14047              	.LASF234:
 14048 0c82 65416374 		.ascii	"eAction\000"
 14048      696F6E00 
 14049              	.LASF163:
 14050 0c8a 76546173 		.ascii	"vTaskDelay\000"
 14050      6B44656C 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 362


 14050      617900
 14051              	.LASF78:
 14052 0c95 78537461 		.ascii	"xStateListItem\000"
 14052      74654C69 
 14052      73744974 
 14052      656D00
 14053              	.LASF168:
 14054 0ca4 7578546F 		.ascii	"uxTopPriority\000"
 14054      70507269 
 14054      6F726974 
 14054      7900
 14055              	.LASF195:
 14056 0cb2 70785461 		.ascii	"pxTaskStatusArray\000"
 14056      736B5374 
 14056      61747573 
 14056      41727261 
 14056      7900
 14057              	.LASF211:
 14058 0cc4 76546173 		.ascii	"vTaskPriorityDisinheritAfterTimeout\000"
 14058      6B507269 
 14058      6F726974 
 14058      79446973 
 14058      696E6865 
 14059              	.LASF14:
 14060 0ce8 6C6F6E67 		.ascii	"long long unsigned int\000"
 14060      206C6F6E 
 14060      6720756E 
 14060      7369676E 
 14060      65642069 
 14061              	.LASF269:
 14062 0cff 76506F72 		.ascii	"vPortEnterCritical\000"
 14062      74456E74 
 14062      65724372 
 14062      69746963 
 14062      616C00
 14063              	.LASF73:
 14064 0d12 70785374 		.ascii	"pxStackBase\000"
 14064      61636B42 
 14064      61736500 
 14065              	.LASF233:
 14066 0d1e 756C5661 		.ascii	"ulValue\000"
 14066      6C756500 
 14067              	.LASF18:
 14068 0d26 75696E74 		.ascii	"uint16_t\000"
 14068      31365F74 
 14068      00
 14069              	.LASF153:
 14070 0d2f 78546173 		.ascii	"xTaskIncrementTick\000"
 14070      6B496E63 
 14070      72656D65 
 14070      6E745469 
 14070      636B00
 14071              	.LASF119:
 14072 0d42 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 14072      64644375 
 14072      7272656E 
 14072      74546173 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 363


 14072      6B546F44 
 14073              	.LASF26:
 14074 0d61 55426173 		.ascii	"UBaseType_t\000"
 14074      65547970 
 14074      655F7400 
 14075              	.LASF30:
 14076 0d6d 70785072 		.ascii	"pxPrevious\000"
 14076      6576696F 
 14076      757300
 14077              	.LASF159:
 14078 0d78 76546173 		.ascii	"vTaskDelayUntil\000"
 14078      6B44656C 
 14078      6179556E 
 14078      74696C00 
 14079              	.LASF147:
 14080 0d88 76546173 		.ascii	"vTaskEndScheduler\000"
 14080      6B456E64 
 14080      53636865 
 14080      64756C65 
 14080      7200
 14081              	.LASF27:
 14082 0d9a 5469636B 		.ascii	"TickType_t\000"
 14082      54797065 
 14082      5F7400
 14083              	.LASF117:
 14084 0da5 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 14084      6865636B 
 14084      5461736B 
 14084      73576169 
 14084      74696E67 
 14085              	.LASF129:
 14086 0dc5 65546173 		.ascii	"eTaskGetState\000"
 14086      6B476574 
 14086      53746174 
 14086      6500
 14087              	.LASF86:
 14088 0dd3 75634E6F 		.ascii	"ucNotifyState\000"
 14088      74696679 
 14088      53746174 
 14088      6500
 14089              	.LASF265:
 14090 0de1 6D656D73 		.ascii	"memset\000"
 14090      657400
 14091              	.LASF160:
 14092 0de8 70785072 		.ascii	"pxPreviousWakeTime\000"
 14092      6576696F 
 14092      75735761 
 14092      6B655469 
 14092      6D6500
 14093              	.LASF154:
 14094 0dfb 78537769 		.ascii	"xSwitchRequired\000"
 14094      74636852 
 14094      65717569 
 14094      72656400 
 14095              	.LASF240:
 14096 0e0b 78546173 		.ascii	"xTaskNotifyStateClear\000"
 14096      6B4E6F74 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 364


 14096      69667953 
 14096      74617465 
 14096      436C6561 
 14097              	.LASF252:
 14098 0e21 7578546F 		.ascii	"uxTopReadyPriority\000"
 14098      70526561 
 14098      64795072 
 14098      696F7269 
 14098      747900
 14099              	.LASF125:
 14100 0e34 70634275 		.ascii	"pcBuffer\000"
 14100      66666572 
 14100      00
 14101              	.LASF157:
 14102 0e3d 78416C72 		.ascii	"xAlreadyYielded\000"
 14102      65616479 
 14102      5969656C 
 14102      64656400 
 14103              	.LASF48:
 14104 0e4d 65496E76 		.ascii	"eInvalid\000"
 14104      616C6964 
 14104      00
 14105              	.LASF194:
 14106 0e56 7072764C 		.ascii	"prvListTasksWithinSingleList\000"
 14106      69737454 
 14106      61736B73 
 14106      57697468 
 14106      696E5369 
 14107              	.LASF155:
 14108 0e73 70785465 		.ascii	"pxTemp\000"
 14108      6D7000
 14109              	.LASF209:
 14110 0e7a 70784D75 		.ascii	"pxMutexHolderTCB\000"
 14110      74657848 
 14110      6F6C6465 
 14110      72544342 
 14110      00
 14111              	.LASF69:
 14112 0e8b 65437572 		.ascii	"eCurrentState\000"
 14112      72656E74 
 14112      53746174 
 14112      6500
 14113              	.LASF237:
 14114 0e99 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 14114      6B47656E 
 14114      65726963 
 14114      4E6F7469 
 14114      66794672 
 14115              	.LASF103:
 14116 0eb3 70756353 		.ascii	"pucStackByte\000"
 14116      7461636B 
 14116      42797465 
 14116      00
 14117              	.LASF212:
 14118 0ec0 75784869 		.ascii	"uxHighestPriorityWaitingTask\000"
 14118      67686573 
 14118      74507269 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 365


 14118      6F726974 
 14118      79576169 
 14119              	.LASF206:
 14120 0edd 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 14120      6B476574 
 14120      43757272 
 14120      656E7454 
 14120      61736B48 
 14121              	.LASF272:
 14122 0ef7 75784C69 		.ascii	"uxListRemove\000"
 14122      73745265 
 14122      6D6F7665 
 14122      00
 14123              	.LASF244:
 14124 0f04 70784465 		.ascii	"pxDelayedTaskList\000"
 14124      6C617965 
 14124      64546173 
 14124      6B4C6973 
 14124      7400
 14125              	.LASF238:
 14126 0f16 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 14126      67686572 
 14126      5072696F 
 14126      72697479 
 14126      5461736B 
 14127              	.LASF245:
 14128 0f30 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 14128      6572666C 
 14128      6F774465 
 14128      6C617965 
 14128      64546173 
 14129              	.LASF7:
 14130 0f4a 73686F72 		.ascii	"short int\000"
 14130      7420696E 
 14130      7400
 14131              	.LASF184:
 14132 0f54 78456C61 		.ascii	"xElapsedTime\000"
 14132      70736564 
 14132      54696D65 
 14132      00
 14133              	.LASF138:
 14134 0f61 75784E65 		.ascii	"uxNewPriority\000"
 14134      77507269 
 14134      6F726974 
 14134      7900
 14135              	.LASF230:
 14136 0f6f 70756C4E 		.ascii	"pulNotificationValue\000"
 14136      6F746966 
 14136      69636174 
 14136      696F6E56 
 14136      616C7565 
 14137              	.LASF152:
 14138 0f84 78546173 		.ascii	"xTaskToQuery\000"
 14138      6B546F51 
 14138      75657279 
 14138      00
 14139              	.LASF92:
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 366


 14140 0f91 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 14140      74526169 
 14140      73654241 
 14140      53455052 
 14140      4900
 14141              	.LASF203:
 14142 0fa3 75785175 		.ascii	"uxQueue\000"
 14142      65756500 
 14143              	.LASF247:
 14144 0fab 78546173 		.ascii	"xTasksWaitingTermination\000"
 14144      6B735761 
 14144      6974696E 
 14144      67546572 
 14144      6D696E61 
 14145              	.LASF260:
 14146 0fc4 756C5461 		.ascii	"ulTaskSwitchedInTime\000"
 14146      736B5377 
 14146      69746368 
 14146      6564496E 
 14146      54696D65 
 14147              	.LASF33:
 14148 0fd9 4C697374 		.ascii	"ListItem_t\000"
 14148      4974656D 
 14148      5F7400
 14149              	.LASF177:
 14150 0fe4 76546173 		.ascii	"vTaskRemoveFromUnorderedEventList\000"
 14150      6B52656D 
 14150      6F766546 
 14150      726F6D55 
 14150      6E6F7264 
 14151              	.LASF275:
 14152 1006 7374726C 		.ascii	"strlen\000"
 14152      656E00
 14153              	.LASF82:
 14154 100d 75785443 		.ascii	"uxTCBNumber\000"
 14154      424E756D 
 14154      62657200 
 14155              	.LASF88:
 14156 1019 5443425F 		.ascii	"TCB_t\000"
 14156      7400
 14157              	.LASF111:
 14158 101f 70765061 		.ascii	"pvParameters\000"
 14158      72616D65 
 14158      74657273 
 14158      00
 14159              	.LASF199:
 14160 102c 75785461 		.ascii	"uxTask\000"
 14160      736B00
 14161              	.LASF200:
 14162 1033 75785461 		.ascii	"uxTaskGetSystemState\000"
 14162      736B4765 
 14162      74537973 
 14162      74656D53 
 14162      74617465 
 14163              	.LASF216:
 14164 1048 70635772 		.ascii	"pcWriteBuffer\000"
 14164      69746542 
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 367


 14164      75666665 
 14164      7200
 14165              	.LASF134:
 14166 1056 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 14166      736B5072 
 14166      696F7269 
 14166      74794765 
 14166      7446726F 
 14167              	.LASF20:
 14168 106f 75696E74 		.ascii	"uint32_t\000"
 14168      33325F74 
 14168      00
 14169              	.LASF232:
 14170 1078 78546173 		.ascii	"xTaskToNotify\000"
 14170      6B546F4E 
 14170      6F746966 
 14170      7900
 14171              	.LASF114:
 14172 1086 78526567 		.ascii	"xRegions\000"
 14172      696F6E73 
 14172      00
 14173              	.LASF281:
 14174 108f 53746174 		.ascii	"StatisticsCounter_ReadCounter\000"
 14174      69737469 
 14174      6373436F 
 14174      756E7465 
 14174      725F5265 
 14175              	.LASF55:
 14176 10ad 654E6F74 		.ascii	"eNotifyAction\000"
 14176      69667941 
 14176      6374696F 
 14176      6E00
 14177              	.LASF228:
 14178 10bb 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 14178      7473546F 
 14178      436C6561 
 14178      724F6E45 
 14178      6E747279 
 14179              	.LASF24:
 14180 10d0 53746163 		.ascii	"StackType_t\000"
 14180      6B547970 
 14180      655F7400 
 14181              	.LASF96:
 14182 10dc 756C4269 		.ascii	"ulBitmap\000"
 14182      746D6170 
 14182      00
 14183              	.LASF127:
 14184 10e5 78546173 		.ascii	"xTaskToDelete\000"
 14184      6B546F44 
 14184      656C6574 
 14184      6500
 14185              	.LASF9:
 14186 10f3 73686F72 		.ascii	"short unsigned int\000"
 14186      7420756E 
 14186      7369676E 
 14186      65642069 
 14186      6E7400
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 368


 14187              	.LASF279:
 14188 1106 76506F72 		.ascii	"vPortEndScheduler\000"
 14188      74456E64 
 14188      53636865 
 14188      64756C65 
 14188      7200
 14189              	.LASF115:
 14190 1118 70727649 		.ascii	"prvInitialiseTaskLists\000"
 14190      6E697469 
 14190      616C6973 
 14190      65546173 
 14190      6B4C6973 
 14191              	.LASF242:
 14192 112f 7844656C 		.ascii	"xDelayedTaskList1\000"
 14192      61796564 
 14192      5461736B 
 14192      4C697374 
 14192      3100
 14193              	.LASF243:
 14194 1141 7844656C 		.ascii	"xDelayedTaskList2\000"
 14194      61796564 
 14194      5461736B 
 14194      4C697374 
 14194      3200
 14195              	.LASF264:
 14196 1153 76506F72 		.ascii	"vPortFree\000"
 14196      74467265 
 14196      6500
 14197              	.LASF10:
 14198 115d 5F5F696E 		.ascii	"__int32_t\000"
 14198      7433325F 
 14198      7400
 14199              	.LASF50:
 14200 1167 654E6F41 		.ascii	"eNoAction\000"
 14200      6374696F 
 14200      6E00
 14201              	.LASF239:
 14202 1171 76546173 		.ascii	"vTaskNotifyGiveFromISR\000"
 14202      6B4E6F74 
 14202      69667947 
 14202      69766546 
 14202      726F6D49 
 14203              	.LASF63:
 14204 1188 756C5061 		.ascii	"ulParameters\000"
 14204      72616D65 
 14204      74657273 
 14204      00
 14205              	.LASF190:
 14206 1195 76546173 		.ascii	"vTaskGetInfo\000"
 14206      6B476574 
 14206      496E666F 
 14206      00
 14207              	.LASF130:
 14208 11a2 65526574 		.ascii	"eReturn\000"
 14208      75726E00 
 14209              	.LASF224:
 14210 11aa 756C5461 		.ascii	"ulTaskNotifyTake\000"
ARM GAS  C:\Users\josephh\AppData\Local\Temp\cckx9LN8.s 			page 369


 14210      736B4E6F 
 14210      74696679 
 14210      54616B65 
 14210      00
 14211              	.LASF227:
 14212 11bb 78546173 		.ascii	"xTaskNotifyWait\000"
 14212      6B4E6F74 
 14212      69667957 
 14212      61697400 
 14213              	.LASF28:
 14214 11cb 78497465 		.ascii	"xItemValue\000"
 14214      6D56616C 
 14214      756500
 14215              	.LASF99:
 14216 11d6 70785443 		.ascii	"pxTCB\000"
 14216      4200
 14217              	.LASF80:
 14218 11dc 75785072 		.ascii	"uxPriority\000"
 14218      696F7269 
 14218      747900
 14219              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
